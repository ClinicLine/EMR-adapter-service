{
    "openapi" : "3.0.1",
    "info" : {
      "title" : "Accuro Rest API",
      "description" : "Welcome to the Accuro API documentation. Here you will find all the information and resources required to interface with our Accuro EMR software. <br><br> <strong>Disclaimer:</strong> <i>While we strive to implement robust validation mechanisms across all endpoints, it may not be feasible to apply comprehensive validation to each one. As a result, we strongly recommend that integrators independently sanitize and validate input and output data. Doing so will help mitigate potential security risks and ensure the integrity and security of your applications.</i>",
      "version" : "10.13.0"
    },
    "tags" : [ {
      "name" : "Accuro API version Endpoints",
      "description" : "Exposes Accuro API version Endpoints."
    }, {
      "name" : "Accuro Settings Endpoint",
      "description" : "Exposes accuro settings endpoint"
    }, {
      "name" : "AccuroUser Endpoints",
      "description" : "Exposes Accuro user endpoints"
    }, {
      "name" : "AppointmentHistory Endpoints",
      "description" : "Exposes appointment history endpoints"
    }, {
      "name" : "AppointmentMaterials Endpoints",
      "description" : "Exposes appointment material endpoints (Deprecated: Refer to the version v2)"
    }, {
      "name" : "AppointmentMaterialsV2 Endpoints",
      "description" : "Exposes the appointment materials V2 endpoints"
    }, {
      "name" : "BillProcedure Endpoints",
      "description" : "Exposes bill procedure endpoints"
    }, {
      "name" : "ChangeOffice Endpoints",
      "description" : "Exposes endpoints to change office"
    }, {
      "name" : "Contact Endpoints",
      "description" : "Exposes contact endpoints"
    }, {
      "name" : "Custom fields Endpoints",
      "description" : "Exposes custom fields endpoints"
    }, {
      "name" : "Details Endpoints",
      "description" : "Exposes details endpoints"
    }, {
      "name" : "DiagnosisStatus Endpoints",
      "description" : "Exposes diagnosis status endpoints"
    }, {
      "name" : "Document Endpoints - Provider",
      "description" : "Exposes provider portal document endpoints"
    }, {
      "name" : "Feature access",
      "description" : "Exposes feature access endpoint"
    }, {
      "name" : "Folder Endpoints",
      "description" : "Exposes all folder endpoints"
    }, {
      "name" : "Gender Endpoints",
      "description" : "Exposes gender endpoints."
    }, {
      "name" : "GeneratedLetter Endpoints",
      "description" : "Exposes generated letter endpoints "
    }, {
      "name" : "HistoryRegular Endpoints",
      "description" : "Exposes history regular endpoints"
    }, {
      "name" : "HistoryType Endpoints",
      "description" : "Exposes history type endpoints"
    }, {
      "name" : "Insurer Endpoints",
      "description" : "Exposes insurer endpoints"
    }, {
      "name" : "Lab Link Group Endpoints",
      "description" : "Exposes lab link group endpoints"
    }, {
      "name" : "LabTemplate Endpoints - Provider",
      "description" : "Exposes lab template endpoints(provider)"
    }, {
      "name" : "LabTemplate Endpoints - Public",
      "description" : "Exposes lab template endpoints(public)"
    }, {
      "name" : "Language Endpoints",
      "description" : "Exposes language endpoints."
    }, {
      "name" : "Letter Endpoints",
      "description" : "Exposes letter endpoints"
    }, {
      "name" : "LimitedUseCode Endpoints",
      "description" : "Exposes limited use code endpoints"
    }, {
      "name" : "Location Endpoints",
      "description" : "Exposes location endpoints."
    }, {
      "name" : "Masking Endpoints",
      "description" : "Exposes patient masking endpoints"
    }, {
      "name" : "Medical summary Endpoints",
      "description" : "Exposes patient medical summary endpoints"
    }, {
      "name" : "Name Suffixes Endpoint",
      "description" : "Exposes name suffixes endpoint"
    }, {
      "name" : "NoKnownAllergy Endpoints",
      "description" : "Exposes no known allergy endpoints."
    }, {
      "name" : "Office Endpoints",
      "description" : "Exposes office endpoints."
    }, {
      "name" : "Patient Endpoints",
      "description" : "Exposes patient endpoints"
    }, {
      "name" : "Patient Identifier Endpoints",
      "description" : "Exposes patient identifier endpoints"
    }, {
      "name" : "Patient PrescriptionV2 Endpoints",
      "description" : "Exposes prescription V2 endpoints"
    }, {
      "name" : "Patient Repliforms Reportable Endpoints",
      "description" : "Exposes patient repliforms reportable data endpoints"
    }, {
      "name" : "Patient status Endpoints",
      "description" : "Exposes patient status endpoints"
    }, {
      "name" : "PatientAlertFlag Endpoints",
      "description" : "Exposes patient flag endpoints"
    }, {
      "name" : "PatientAllergy Endpoints",
      "description" : "Exposes patient allergy endpoints"
    }, {
      "name" : "PatientDiagnosis Endpoints",
      "description" : "Exposes patient diagnosis endpoints"
    }, {
      "name" : "PatientDiagnosisHistory Endpoints",
      "description" : "Exposes patient diagnosis history endpoints"
    }, {
      "name" : "PatientDocument Endpoints",
      "description" : "Exposes patient document endpoints"
    }, {
      "name" : "PatientFlags Endpoints",
      "description" : "Exposes patient user flags and role flags endpoints"
    }, {
      "name" : "PatientHistory Endpoints",
      "description" : "Expose patient history endpoints"
    }, {
      "name" : "PatientHistoryItemHistory Endpoints",
      "description" : "Exposes patient history item history endpoints"
    }, {
      "name" : "PatientImmunization Endpoints",
      "description" : "Exposes patient immunization endpoints"
    }, {
      "name" : "PatientImmunizationSchedule Endpoints",
      "description" : "Exposes patient immunization schedule endpoints"
    }, {
      "name" : "PatientLabs Endpoints - Provider",
      "description" : "Exposes patient labs endpoints(provider)"
    }, {
      "name" : "PatientScheduledVaccines Endpoints",
      "description" : "Retrieves patient scheduled vaccine endpoints"
    }, {
      "name" : "PatientV2 Endpoints",
      "description" : "Exposes the Patient V2 endpoints"
    }, {
      "name" : "Person Titles Endpoint",
      "description" : "Exposes person titles endpoints"
    }, {
      "name" : "Physician Lab Ids Endpoint",
      "description" : "Exposes physician lab Ids endpoint"
    }, {
      "name" : "Prescription Endpoints",
      "description" : "Exposes prescription endpoints"
    }, {
      "name" : "Prescription Favorite Endpoints",
      "description" : "Exposes prescription favorite endpoints"
    }, {
      "name" : "PrescriptionHistory Endpoints",
      "description" : "Exposes prescription history endpoints"
    }, {
      "name" : "Provider Endpoints",
      "description" : "Exposes provider endpoints"
    }, {
      "name" : "Provider permissions Endpoints",
      "description" : "Exposes provider permissions endpoints"
    }, {
      "name" : "ProviderLabs Endpoints",
      "description" : "Exposes provider labs endpoints"
    }, {
      "name" : "Referral Order Endpoints",
      "description" : "Exposes referral order endpoints"
    }, {
      "name" : "Relationship status Endpoints",
      "description" : "Exposes Relationship status endpoints."
    }, {
      "name" : "Role Endpoints",
      "description" : "Exposes role endpoints"
    }, {
      "name" : "Schedule Endpoints - Provider",
      "description" : "Exposes schedule appointments. Scheduler for provider portal applications.\n\nWhen create/update/cancel/delete the appointment, wait room entry will be updated according to the appointment as follow:\n* The wait room entry will be created if the appointment is created and the patient arrives.\n\n* The wait room entry will be created if the appointment is updated and the patient arrives.\n\n* The wait room entry will be deleted if the appointment is updated and the patient leave or does not arrive.\n\n* The wait room entry will be deleted if the appointment is cancelled or deleted.\n\nThe appointment date must be today. If it is not the wait room entry it won't be created.\n\nCurrently, API doesn't support to create wait room entry for the future appointment as Accuro does.\n"
    }, {
      "name" : "Schedule Endpoints- Public",
      "description" : "Exposes schedule endpoints"
    }, {
      "name" : "ScheduleRoom Endpoint",
      "description" : "Exposes schedule room endpoint"
    }, {
      "name" : "Selection List Endpoints",
      "description" : "Exposes selection list endpoints"
    }, {
      "name" : "Site Endpoints",
      "description" : "Exposes site endpoints"
    }, {
      "name" : "TaskAttachment Endpoints",
      "description" : "Exposes task attachment endpoints"
    }, {
      "name" : "User Task Endpoints",
      "description" : "Exposes assigned tasks Endpoints."
    }, {
      "name" : "Vaccine Endpoints",
      "description" : "Exposes vaccine endpoints"
    }, {
      "name" : "Waitlist Consult Site Endpoints",
      "description" : "Exposes endpoints for waitlist consult sites."
    }, {
      "name" : "Waitlist Endpoints",
      "description" : "Exposes waitlist endpoints"
    }, {
      "name" : "Waitlist Procedures Endpoints",
      "description" : "Exposes endpoints for waitlist procedures"
    }, {
      "name" : "Waitlist Request Patient Unavailability Endpoints",
      "description" : "Exposes endpoints for waitlist request patient unavailability"
    }, {
      "name" : "Waitlist Request Procedures Endpoints",
      "description" : "Exposes endpoints for waitlist request procedures"
    }, {
      "name" : "Waitlist Surgical Priority Endpoints",
      "description" : "Exposes endpoints for waitlist surgical priorities."
    }, {
      "name" : "Waitlist Surgical Site Endpoints",
      "description" : "Exposes endpoints for waitlist surgical sites."
    }, {
      "name" : "Waitlist Surgical Status Endpoints",
      "description" : "Exposes endpoints for waitlist surgical statuses."
    }, {
      "name" : "WaitlistAttachment Endpoints",
      "description" : "Exposes waitlist attachment endpoints"
    }, {
      "name" : "Waitroom Endpoints",
      "description" : "Exposes waitroom endpoints"
    }, {
      "name" : "Who Am I Endpoint",
      "description" : "Exposes whoami endpoint"
    } ],
    "paths" : {
      "/v1/accuro-settings" : {
        "get" : {
          "tags" : [ "Accuro Settings Endpoint" ],
          "summary" : "Retrieves Accuro Settings",
          "description" : "Retrieves Accuro Settings.",
          "operationId" : "getAccuroSettings",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, password level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AccuroSettingsDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.AccuroSettings.read" ]
          } ]
        }
      },
      "/v1/users" : {
        "get" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Retrieves all Accuro Users which meet the specified filters",
          "description" : "The results will be provided in a paginated form.  To request the next page, specify the startingId which is same as  **EnvelopeDto.lastId** of the previous page. Last id is the **userId** of the last record of the page, and results will be ordered by this field i.e **userId**. All the parameters are optional, will return all users if none passed. If multiple filters are provided, they will be combined with AND operator. For first name and last name, it's wildcard search starting with the characters passed in. For rest of the fields, it is exact search. 'globalSearch' will search for firstName, LastName or Username  which contains the searched string. When 'globalSearch' is provided, the rest of other fields will be ignored.",
          "operationId" : "searchUser",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userName",
            "in" : "query",
            "description" : "Name of the Accuro user. Optional.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "systemId",
            "in" : "query",
            "description" : "External system Id - External identity system. Has to be passed along with externalUserId.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "externalUserId",
            "in" : "query",
            "description" : "External User Id - External User Identifier. Optional.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "firstName",
            "in" : "query",
            "description" : "Size must be between 2 and 100. Optional.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "globalSearch",
            "in" : "query",
            "description" : "Search for firstName, lastName or username which contains the searched string. When this field is provided, all other fields will be ignored. Minimum 2 characters are required.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "lastName",
            "in" : "query",
            "description" : "Size must be between 2 and 100. Optional.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeLinkedProviderOnly",
            "in" : "query",
            "description" : "If includeLinkedProviderOnly is true then only users associated with the provider will be returned. Wrong values are ignored. Only true and false are valid values.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "activeDirectoryUser",
            "in" : "query",
            "description" : "Active directory user in Accuro. Optional.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request).It is the same as the **userId** of the last record of the previous results.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If provided firstName or lastName is less than minimum characters, or if systemId is passed alone without externalUserId."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoAccuroUserDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.User.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Creates an Accuro user",
          "description" : "Creates an Accuro user.",
          "operationId" : "create",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Accuro user - userId is not required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccuroUserDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid Data"
            },
            "201" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AccuroUserDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.User.create" ]
          } ]
        }
      },
      "/v1/users/{userId}" : {
        "put" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Updates an existing Accuro user",
          "description" : "Updates an Accuro user based on id. Setting the field AccuroUserDto.active to false is deactivating the user.",
          "operationId" : "updateAccuroUser",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Accuro user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccuroUserDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Access forbidden. Permission is required."
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success"
            },
            "400" : {
              "description" : "If the id is not given."
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.User.update" ]
          } ]
        }
      },
      "/v1/api-version" : {
        "get" : {
          "tags" : [ "Accuro API version Endpoints" ],
          "summary" : "Retrieves the version of Accuro API build",
          "description" : "Retrieves the version of Accuro API build.",
          "operationId" : "getApiVersion",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  },
                  "examples" : {
                    "Get Accuro API version" : {
                      "summary" : "Retrieves Accuro API version.",
                      "description" : "Retrieves Accuro API version.",
                      "value" : "10.2.0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/contacts" : {
        "post" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Creates a contact",
          "description" : "Creates a contact",
          "operationId" : "create_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client level authorization grant with first party scope, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "201" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "Integer",
                    "example" : 1
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Contacts.create" ]
          } ]
        }
      },
      "/v1/contacts/{contactId}/external-contact-identifiers" : {
        "get" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Retrieves external contact identifiers for the specified contact id",
          "description" : "Retrieves a set of external contact identifiers for the specified contact",
          "operationId" : "getAllExternalContactIdentifiersForContact",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client level authorization grant with first party scope, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactId",
            "in" : "path",
            "description" : "Contact id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ExternalContactIdentifierDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Contacts.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Saves external contact identifiers associated with the specified contact id",
          "description" : "Saves external contact identifiers associated with the specified contact id",
          "operationId" : "create_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client level authorization grant with first party scope, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "ExternalContactIdentifier",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalContactIdentifierDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid contact id"
            },
            "201" : {
              "description" : "Created"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Contacts.create" ]
          } ]
        }
      },
      "/v1/contacts/{contactId}" : {
        "get" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Retrieves contact information by id",
          "description" : "Retrieves contact information for contacts and pharmacies of address book in Accuro.",
          "operationId" : "getContactById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactId",
            "in" : "path",
            "description" : "Contact id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/contacts/{contactId}/external-contact-identifiers/{systemIdentifier}" : {
        "get" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Retrieves external contact identifiers information by contact id",
          "description" : "Retrieves a external contact identifier for the specified contact and external system. All timestamps are in UTC",
          "operationId" : "getExternalContactIdentifierByExternalSystem",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client level authorization grant with first party scope, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactId",
            "in" : "path",
            "description" : "Contact id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "systemIdentifier",
            "in" : "path",
            "description" : "System Identifier",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ExternalContactIdentifierDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Contacts.read" ]
          } ]
        }
      },
      "/v1/contacts/search" : {
        "get" : {
          "tags" : [ "Contact Endpoints" ],
          "summary" : "Retrieves all active contacts which meet the specified filters",
          "description" : "The results will be provided in a paginated form.  To request the next page, specify the startingId which is the same as  **EnvelopeDto.lastId** of the previous page. Last id is the **contactId** of the last record of the page, and the results will be sorted by the field of **contactId**. <br /><br />On providing contactName filter, results will be returned containing the contact name matching with the beginning of that filter. For rest of the filters, the results are returned on the basis of exact match.Providing no search terms will return a page of all contacts with no filters.",
          "operationId" : "search",
          "parameters" : [ {
            "name" : "contactType",
            "in" : "query",
            "description" : "Contact type",
            "schema" : {
              "type" : "string"
            },
            "example" : "Pharmacy"
          }, {
            "name" : "contactName",
            "in" : "query",
            "description" : "Name of the contact. Size must be between 2 and 200",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "externalContactId ",
            "in" : "query",
            "description" : "The externalContactId which matches ExternalContactIdentifierDto#getValue()",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "externalContactSystemId",
            "in" : "query",
            "description" : "The externalSystemContactId which matches an ExternalContactSystem.SystemIdentifier",
            "schema" : {
              "type" : "string"
            },
            "example" : "healthcare_directory"
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **contactId** of the last records of the previous results.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactType",
            "in" : "query",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contactName",
            "in" : "query",
            "schema" : {
              "maxLength" : 200,
              "minLength" : 2,
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "schema" : {
              "pattern" : "(^-?\\d+$|^$)",
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "schema" : {
              "pattern" : "(^-?\\d+$|^$)",
              "type" : "string"
            }
          }, {
            "name" : "externalContactId",
            "in" : "query",
            "schema" : {
              "maxLength" : 64,
              "minLength" : 0,
              "type" : "string"
            }
          }, {
            "name" : "externalContactSystemId",
            "in" : "query",
            "schema" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If provided contactName is less than minimum characters."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoContactDto"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/users/{userId}/copy-user-permissions" : { },
      "/v1/users/{userId}/copy-user-preferences" : { },
      "/v1/details" : {
        "get" : {
          "tags" : [ "Details Endpoints" ],
          "summary" : "Retrieves user details",
          "description" : "Retrieves information about the currently authenticated user.",
          "operationId" : "getDetails",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Authenticated as client",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Details"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/security/users/{userId}/features" : {
        "get" : {
          "tags" : [ "Feature access" ],
          "summary" : "Retrieves all the features accessible to the user in all the offices.",
          "description" : "Retrieves all the features accessible to the user in all the offices. Permissions checks are done if the data is requested for the user other than the logged in user. The results are provided in a paginated form. Last id is the **officeId** of the last record of  the current page, and results will be ordered by this field. startingId by default is 0 or its value can be set as **Envelope.lastId** of the previous page to requestnext set of records after this id. **Envelope.count** is the total records returned in current page. **Envelope.total** is the total records that can be returned irrespective of number of pages",
          "operationId" : "getFeatureAccess",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 50. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is the last office id of the previous page(request)",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "User id for which feature access is requested",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. The content of Envelope contains the Map. The Mapof key as an officeId and value as a collection of all the features.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDto"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/genders" : {
        "get" : {
          "tags" : [ "Gender Endpoints" ],
          "summary" : "Retrieves genders",
          "description" : "Gets a set of all available genders. This will include the built-in genders for male,female and unknown, as well as any user defined genders.",
          "operationId" : "getGenders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/GenderDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/labs/results/{resultId}" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves lab result",
          "description" : "Retrieves the specified lab result.",
          "operationId" : "getLabResult",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "resultId",
            "in" : "path",
            "description" : "The lab result id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabResultDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Lab result doesn't exist"
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/labs/results" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves lab results",
          "description" : "Retrieves a list of all lab results.",
          "operationId" : "getLabResults",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabResultDto"
                    }
                  }
                }
              }
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/labs/tests/{testId}/results" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves lab results for the lab test",
          "description" : "Retrieves all lab results for the specified lab test. It will return an empty list if the specified test has no results, or if the test does not exist.",
          "operationId" : "getLabResultsForTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabResultDto"
                    }
                  }
                }
              }
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/labs/sources" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves lab sources",
          "description" : "Retrieves a map of all lab sources.",
          "operationId" : "getLabSources",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns a map source id to source name",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string",
                    "example" : {
                      "1" : "Excelleris",
                      "2" : "Medinet",
                      "3" : "Capital Health"
                    }
                  }
                }
              }
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/labs/tests/{testId}" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves Lab Test",
          "description" : "Retrieves the specified lab test by the given test id.",
          "operationId" : "getLabTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabTestDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Lab test doesn't exist with the given id"
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/labs/tests" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Public" ],
          "summary" : "Retrieves lab tests",
          "description" : "Retrieves a set of all lab tests.",
          "operationId" : "getLabTests",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabTestDto"
                    }
                  }
                }
              }
            }
          },
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/enumerations/languages/official" : {
        "get" : {
          "tags" : [ "Language Endpoints" ],
          "summary" : "Retrieves official languages",
          "description" : "Gets a set of all available official languages. The results are ordered by code and description values.",
          "operationId" : "getOfficialLanguages",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/OfficialLanguageDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/enumerations/languages/spoken" : {
        "get" : {
          "tags" : [ "Language Endpoints" ],
          "summary" : "Retrieves spoken languages",
          "description" : "Gets a set of all available spoken languages. The results are ordered by code order.",
          "operationId" : "getSpokenLanguages",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SpokenLanguageDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/locations" : {
        "get" : {
          "tags" : [ "Location Endpoints" ],
          "summary" : "Retrieves locations",
          "description" : "Retrieves all locations.",
          "operationId" : "getLocations",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LocationDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/medeo-practitioner-links" : { },
      "/v1/enumerations/name-suffixes" : {
        "get" : {
          "tags" : [ "Name Suffixes Endpoint" ],
          "summary" : "Retrieves list of all name suffixes",
          "description" : "Retrieves list of all name suffixes(both built-in and custom).",
          "operationId" : "getNameSuffixes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/offices" : {
        "get" : {
          "tags" : [ "Office Endpoints" ],
          "summary" : "Retrieves Offices",
          "description" : "Retrieves all Accuro offices.",
          "operationId" : "getOfficeList",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/OfficeDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/accessible-providers" : {
        "get" : {
          "tags" : [ "Provider permissions Endpoints" ],
          "summary" : "Get permissible provider ids for a provided permissions type.",
          "description" : "Get all providers for the logged in user to access a feature/resource for a provided type.The type determines feature/resource.If the access token is without user (e.g client credentials grant), empty list is returned.",
          "operationId" : "getAccessibleProviders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "permissionsType",
            "in" : "query",
            "description" : "Permissions access type for.",
            "schema" : {
              "type" : "string",
              "enum" : [ "READ_APPOINTMENTS", "WRITE_APPOINTMENTS" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "integer",
                      "format" : "int32"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.ProviderPermissions.read" ]
          } ]
        }
      },
      "/v1/enumerations/person-titles" : {
        "get" : {
          "tags" : [ "Person Titles Endpoint" ],
          "summary" : "Retrieves available person titles",
          "description" : "Retrieves a list person titles(both built-in and custom).",
          "operationId" : "getPersonTitles",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/{physicianId}/lab-ids" : {
        "get" : {
          "tags" : [ "Physician Lab Ids Endpoint" ],
          "summary" : "Retrieves all physician lab ids for the provided physician id",
          "description" : "Get all physician lab id records for the physician id provided",
          "operationId" : "getPhysicianLabs",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Okta authorization",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "physicianId",
            "in" : "path",
            "description" : "The provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PhysicianLabIdDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "Physician Lab Ids Endpoint" ],
          "summary" : "Creates physician lab ids",
          "description" : "Creates physicianLabId object.",
          "operationId" : "create_3",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Okta authorization",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "physicianId",
            "in" : "path",
            "description" : "The provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "The new physician lab id's object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhysicianLabIdDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid Data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PhysicianLabIdDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.update" ]
          } ]
        },
        "delete" : {
          "tags" : [ "Physician Lab Ids Endpoint" ],
          "summary" : "Deletes physician lab records related to given ID",
          "description" : "Deletes physician lab records related to given ID.",
          "operationId" : "delete",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "physicianId",
            "in" : "path",
            "description" : "The provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No content"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.update" ]
          } ]
        }
      },
      "/v1/enumerations/physician-master-numbers" : {
        "get" : {
          "tags" : [ "Person Titles Endpoint" ],
          "summary" : "Retrieves assigned physician master numbers",
          "description" : "Retrieves assigned physician master numbers. This feature is only available for Ontario Province.",
          "operationId" : "getPhysicianMasterNumbers",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/MasterNumberDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/{providerId}/offices" : {
        "put" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "link offices to provider",
          "description" : "This endpoint adds the provider to the offices. Please ensure provider and offices ids are valid and active as this endpoint will not do the validation.",
          "operationId" : "addProviderToOffices",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Okta authorization",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "A list of office ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid provider id or office id."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.update" ]
          } ]
        }
      },
      "/v1/providers" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves providers",
          "description" : "Gets a set of all providers.",
          "operationId" : "getProviders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderDto"
                    }
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Creates a new provider",
          "description" : "This endpoint creates a new provider, requiring first name and last name.Please ensure Title and Suffix to be valid if provided as this endpoint will not do the validation. Also please ensure the office id is valid and active if default Office is provided.",
          "operationId" : "createProvider",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Okta authorization",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New provider",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "201" : {
              "description" : "Created"
            },
            "400" : {
              "description" : "If provider practitionerNumber field exceeds the max size. Each province has different size limit on this field: BC & AB=5, MB=12 NS & ON=6 SK=4 "
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.create" ]
          } ]
        }
      },
      "/v1/providers/{providerId}/disable" : {
        "put" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Disables Provider Visibility",
          "description" : "Disables Provider Visibility for the providerId provided",
          "operationId" : "disableProviderVisibility",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Access forbidden. Permission is required."
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.update" ]
          } ]
        }
      },
      "/v1/providers/offices" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves all providers in offices which meet the specified filters",
          "description" : "Gets all providers in offices which meet the specified filters.",
          "operationId" : "getAllOfficeProviders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeActiveOnly",
            "in" : "query",
            "description" : "If includeActiveOnly is null/false, the search results will include all providers, regardless of their active status. If includeActiveOnly is true, only active providers will be returned.",
            "schema" : {
              "type" : "boolean"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/{providerId}" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves the provider",
          "description" : "Gets the provider for the given provider id.",
          "operationId" : "getProviderById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ProviderDto"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Updates the provider",
          "description" : "Updates the provider for the given provider id.",
          "operationId" : "updateProvider",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Provider to be updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If any field of provider details is invalid."
            },
            "204" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ProviderDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.update" ]
          } ]
        }
      },
      "/v1/providers/{providerId}/identifiers" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves identifiers for provider",
          "description" : "Gets identifiers for the given provider id.",
          "operationId" : "getProviderIdentifiers",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ProviderIdentifierDto"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/{providerId}/specialties" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves specialities for provider",
          "description" : "Gets specialities for the given provider id.",
          "operationId" : "getProviderSpecialties",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a map of specialty id and description",
                    "example" : "{ { \"code1\" : \"specialty1\" }, { \"code2\" : \"specialty2\" } }"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/statuses" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves provider statuses",
          "description" : "Gets provider statuses.",
          "operationId" : "getProviderStatuses",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a map of status id and description",
                    "example" : "{ { 1 : \"status1\" }, { 2 : \"status2\" } }"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/types" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves provider types",
          "description" : "Gets a set of provider types.",
          "operationId" : "getProviderTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderTypeDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/offices/{officeId}" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves providers for the office",
          "description" : "Gets providers for the give office id.",
          "operationId" : "getProvidersForOffice",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "officeId",
            "in" : "path",
            "description" : "Office id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/specialties" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Retrieves Specialities",
          "description" : "Gets provider specialties. Provider specialties are not supported in British Columbia.",
          "operationId" : "getSpecialties",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a Map of speciality id and description",
                    "example" : "{ { \"code1\" : \"specialty1\" }, { \"code2\" : \"specialty2\" } }"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/providers/search" : {
        "get" : {
          "tags" : [ "Provider Endpoints" ],
          "summary" : "Gets all providers which meet the specified filters.",
          "description" : "Gets all providers which meet the specified filters. The results will be provided in a paginated form. Set the startingId to the {@code EnvelopeDto.lastId} of the previous page to request the next page. Last id is the {@code id} of the last record of the page, and results will be ordered by this field. first name or last name must pass at least two characters. For example: 'APIClient' can be searched by passing 'ap' or 'client'. Either First name or last name or globalSearch must be provided.",
          "operationId" : "searchProviders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "firstName",
            "in" : "query",
            "description" : "The providers firstName",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "lastName",
            "in" : "query",
            "description" : "The providers lastName .",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "globalSearch",
            "in" : "query",
            "description" : "Search for firstName or lastName which contains the searched string. When this field is provided, all other fields will be ignored. Minimum 2 characters are required.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeActiveOnly",
            "in" : "query",
            "description" : "If includeActiveOnly is null/false, the search results will include all providers, regardless of their active status. If includeActiveOnly is true, only active providers will be returned.",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. <p>If the page size is not provided or less than 1, the page size will be set to default value 25.</p><p>If page size provided is more than maximum value, the page size will be set to the default maximum value 50.</p>",
            "schema" : {
              "type" : "string"
            },
            "example" : 25
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "The starting {@code id} (exclusive) of the next page of data. Typically this is the {@code EnvelopeDto.lastId} from the last page.",
            "schema" : {
              "type" : "string"
            },
            "example" : 10
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Provider.read" ]
          } ]
        }
      },
      "/v1/enumerations/relationship-statuses" : {
        "get" : {
          "tags" : [ "Relationship status Endpoints" ],
          "summary" : "Retrieves Relationship statuses",
          "description" : "Gets a set of all available Relationship statuses.",
          "operationId" : "getRelationshipStatuses",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/RelationshipStatusDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/scheduler/reasons" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment reasons",
          "description" : "Gets a list of appointment reasons.",
          "operationId" : "getAppointmentReasons",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentReasonDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to appointment reasons in offices that contains a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/scheduler/statuses" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment statuses",
          "description" : "Gets a list of appointment statuses.",
          "operationId" : "getAppointmentStatuses",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/StatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/scheduler/types" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment types",
          "description" : "Gets a list of appointment types.",
          "operationId" : "getAppointmentTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentTypeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/scheduler/priorities" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment priorities",
          "description" : "Gets a list of appointment priorities.",
          "operationId" : "getPriorities",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PriorityDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/sites/{siteId}" : {
        "get" : {
          "tags" : [ "Site Endpoints" ],
          "summary" : "Retrieves the appointment site by the site id",
          "description" : "Gets the appointment site by the site id.",
          "operationId" : "getSite",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client credential bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "siteId",
            "in" : "path",
            "description" : "Site id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the appointment site id does not exist on the server"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SiteDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "REMINDER_API" ]
          } ]
        }
      },
      "/v1/sites" : {
        "get" : {
          "tags" : [ "Site Endpoints" ],
          "summary" : "Retrieves all appointment sites",
          "description" : "Gets all appointment sites.",
          "operationId" : "getSites",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client credentials bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SiteDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "REMINDER_API" ]
          } ]
        }
      },
      "/v1/whoami" : {
        "get" : {
          "tags" : [ "Who Am I Endpoint" ],
          "summary" : "Retrieves user Information",
          "description" : "Retrieves information about the service user.",
          "operationId" : "getUserInfo",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, password level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/UserInfoDto"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/users/{id}" : {
        "get" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Retrieves Accuro user by id",
          "description" : "Retrieves Accuro user by the given id.",
          "operationId" : "getAccuroUserById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The accuro user id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AccuroUserDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.User.read" ]
          } ]
        }
      },
      "/v1/users/{userId}/offices" : {
        "get" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Retrieve user accessible offices.",
          "description" : "Retrieve all offices the user has access to. Permissions checks are done if the data is requested for the user other than the logged in user. The results are provided in a paginated form. Last id is the officeId of the last record of  the current page, and results will be ordered by this field. StartingId by default is 0 or its value can be set as EnvelopeDto.lastId of the previous page to requestnext set of records after this id. EnvelopeDto.count is the total records returned in current page. EnvelopeDto.total is the total records that can be returned irrespective of number of pages",
          "operationId" : "getOfficesForUser",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 50. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is the last office id of the previous page(request)",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "User id for which offices is requested",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "pattern" : "(^-?\\d+$|^$)",
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "schema" : {
              "pattern" : "(^-?\\d+$|^$)",
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "schema" : {
              "pattern" : "(^-?\\d+$|^$)",
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoOfficeDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Office.read" ]
          } ]
        }
      },
      "/v1/users/{userId}/tasks" : {
        "get" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Retrieves all tasks for the user id",
          "description" : "Gets all tasks for the user id.The user can access the tasks assigned to the user,  OR created by the user all filters are optional and if provided, they will be combined with AND operator on top of the user accessible tasks. Represents a Task Object with a deleted field indicating whether the task has been deleted.",
          "operationId" : "getTasks",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider credentials bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "The user id., the user id to retreive the tasks assigned to.",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "includeCompleted",
            "in" : "query",
            "description" : "Include completed tasks or not. Set to TRUE in order to include completed tasks. By default the result will not include completed tasks.",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "taskDueDate",
            "in" : "query",
            "description" : "Task due date. If provided, tasks which are due on that day will be returned.",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "createdStartDate",
            "in" : "query",
            "description" : "The created startDate. ",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "createdEndDate",
            "in" : "query",
            "description" : "The created endDate.  ",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **taskId** of the last records of the previous results.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/UserTaskDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.UserTask.read" ]
          } ]
        }
      },
      "/v1/users/{existingUserId}/assign-tasks" : {
        "put" : {
          "tags" : [ "AccuroUser Endpoints" ],
          "summary" : "Reassign the task to new User.",
          "description" : "Reassign the task to new User.  \n* The endpoint would assign the task from source to destination user even whenthe task is deleted.\n* If tasks is not linked to the source user, it will be ignored and not assigned to the destination user.\n* If no action is being taken during assign operation, the endpoint would simply return Success.\n* Either request body or Query params should be passed.",
          "operationId" : "reassignTasks",
          "parameters" : [ {
            "name" : "existingUserId",
            "in" : "path",
            "description" : "The source user id whose tasks needs to be assigned ",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "newUserId",
            "in" : "query",
            "description" : "The destination user id to whom tasks needs to be assigned to. ",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCompleted",
            "in" : "query",
            "description" : "Include completed tasks or not. Set to true in order to include completed tasks. Possible values are true or false. If value is set to other than true or false, it would be considered false. ",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "taskDueDateStart",
            "in" : "query",
            "description" : "The task due date start. If only taskDueDateStart is provided, all tasks with due date on and after the value would be selected. If both taskDueDateStart and taskDueDateEnd is provided, all the tasks between taskDueDateStart and taskDueDateEnd would be selected (both dates inclusive)",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "taskDueDateEnd",
            "in" : "query",
            "description" : "The task due date end. If only taskDueDateEnd is provided, all tasks with due date on and before the value would be returned. If both taskDueDateStart and taskDueDateEnd is provided, all the tasks between taskDueDateStart and taskDueDateEnd would be selected (both dates inclusive)",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "TaskIds to assign to new user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the resource is not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.UserTask.update" ]
          } ]
        }
      },
      "/v1/authorized-clients" : { },
      "/v1/authorized-clients/{id}" : { },
      "/v1/special-service-fees" : { },
      "/v1/special-service-fees/{id}" : { },
      "/v1/external-id-systems" : { },
      "/v1/external-id-systems/{systemId}" : { },
      "/v1/external-id-systems/{systemId}/external-id-users" : { },
      "/v1/external-id-systems/{systemId}/external-id-users/{externalUserId}" : { },
      "/v1/external-id-users" : { },
      "/v1/aac-entitlements" : { },
      "/v1/aac-entitlements/{id}" : { },
      "/v1/aac-licenses" : { },
      "/v1/aac-licenses/{licenseId}" : { },
      "/v1/aac-licenses/days-with-claims-usage" : { },
      "/v1/aac-licenses/login-usage" : { },
      "/v1/provider-portal/patients/{patientId}/masks/{maskId}/authorizations" : {
        "get" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Retrieves patient mask authorizations corresponding to given mask id and patient id.",
          "description" : "Retrieves patient mask authorizations corresponding to given mask id and patient id.",
          "operationId" : "getMaskAuthorizations",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MaskAuthorizationDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Creates mask authorization.",
          "description" : "Creates mask authorization. Reason is required if the user is not the creator of the mask. Cannot create authorization if the mask has already existing authorization with same user or role id",
          "operationId" : "createAuthorization",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "reason",
            "in" : "query",
            "description" : "Reason",
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Mask authorization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MaskAuthorizationDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "201" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.create" ]
          } ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/masks" : {
        "get" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Retrieves all masks of the given patient which meet the specified filters",
          "description" : "The results will be provided in a paginated form.  To request the next page, specify the startingId which is same as  **EnvelopeDto.lastId** of the previous page. Last id is the **maskId** of the last record of the page, and results will be ordered by this field i.e **maskId**. ",
          "operationId" : "searchMasks",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fieldName",
            "in" : "query",
            "description" : "The name of the field on which mask has been applied.",
            "schema" : {
              "type" : "string"
            },
            "example" : "STREET1"
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **maskId** of the last records of the previous results.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoMaskDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Creates a new mask corresponding to the given patient.",
          "description" : "Creates a new mask corresponding to the given patient.",
          "operationId" : "createMask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "The new mask",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MaskDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "201" : {
              "description" : "created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns mask id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.create" ]
          } ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/masks/{maskId}/authorizations/{authorizationId}" : {
        "get" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Retrieves patient mask authorizations corresponding to given mask id and patient id.",
          "description" : "Retrieves patient mask authorizations corresponding to given mask id and patient id.",
          "operationId" : "getMaskAuthorizationById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "authorizationId",
            "in" : "path",
            "description" : "authorization Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Mask authorization not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MaskAuthorizationDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.read" ]
          } ]
        },
        "put" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Updates mask authorization.",
          "description" : "Update mask authorization. Note: Only Until date can be updated. The reason is required for breaking a glass if user is not the creator of mask.",
          "operationId" : "updateAuthorization",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "authorizationId",
            "in" : "path",
            "description" : "Authorization Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "reason",
            "in" : "query",
            "description" : "Reason",
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Mask authorization",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MaskAuthorizationDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No Content"
            },
            "400" : {
              "description" : "Reason not supplied for non-owned mask update"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.update" ]
          } ]
        },
        "delete" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Creates mask authorization.",
          "description" : "Creates mask authorization",
          "operationId" : "deleteAuthorization",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "authorizationId",
            "in" : "path",
            "description" : "Authorization Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "reason",
            "in" : "query",
            "description" : "Reason",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No Content"
            },
            "404" : {
              "description" : "Mask/Mask Authorization not found."
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.delete" ]
          } ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/masks/{maskId}" : {
        "get" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Retrieves patient mask corresponding to given mask id.",
          "description" : "Retrieves patient mask corresponding to given mask id.",
          "operationId" : "getPatientMask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Mask Not Found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MaskDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.read" ]
          } ]
        },
        "put" : {
          "tags" : [ "Masking Endpoints" ],
          "summary" : "Updates mask",
          "description" : "Updates the given mask. Note: Reason is required only to non-owners of the mask. Only notes and masked flag can be updated. ",
          "operationId" : "updateMask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "maskId",
            "in" : "path",
            "description" : "Mask id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "reason",
            "in" : "query",
            "description" : "Reason",
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Updated mask",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MaskDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Reason not supplied for non-owned mask update"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.update" ]
          } ]
        }
      },
      "/v1/materials/appointments/{appointmentId}" : {
        "get" : {
          "tags" : [ "AppointmentMaterials Endpoints" ],
          "summary" : "Retrieves an appointment",
          "description" : "Retrieves an aggregated appointment data for the provided appointmentId.",
          "operationId" : "getAppointment",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client credential bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "The id for which aggregated appointment data has to be retrieved",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Specified appointment is not found."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AppointmentMaterialsDto"
                  }
                }
              }
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "REMINDER_API" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to appointments with a provider that the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v2/materials/appointments/{appointmentId}" : {
        "get" : {
          "tags" : [ "AppointmentMaterialsV2 Endpoints" ],
          "summary" : "Retrieves an appointment",
          "description" : "Retrieves an appointment data for the provided appointmentId.",
          "operationId" : "getAppointment_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client credential bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Id of the appointment",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Specified appointment is not found."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AppointmentMaterialsDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "REMINDER_API" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY AND PATIENT_DEMOGRAPHICS with access level: READ_ONLY" ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to the appointment with a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v2/materials/appointments" : {
        "get" : {
          "tags" : [ "AppointmentMaterialsV2 Endpoints" ],
          "summary" : "Retrieves appointments",
          "description" : "Retrieves all the appointments which meet the specified filters. The results are provided in paginated form. To request the next page, specify the startingId which should be set to the **EnvelopeDto.lastId** of the previous page. All of the parameters are optional except for **startDate**.<br><br>Field **rowversion**, the update timestamp of an appointment is introduced in this endpoint. Last id is the **rowversion** of the last record of the page, and results are ordered by this field.<br><br>In addition to pagination, the **rowversion** can be used to retrieve all changed appointments since a previous call. Repeating a call with the same filters, but updating the **startingId** to the **lastId** of the previous request will provide only appointments that have changed since last request, preventing the need to perform repeat expensive full queries to detect changes.<br><br>The count will be reset to 0 on the last page.",
          "operationId" : "getAppointments",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client credential bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "query",
            "description" : "The provider Id. If this field is provided, the appointments will be filtered by provider Id.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "The starting rowversion(exclusive) of the next page of data. Typically this is the EnvelopeDto.lastId from the last page of data.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages requested. Default page size is 25. Must be 0 < pageSize < 50, otherwise the default page size will be set.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "If provided without an endDate parameter, only appointments which were scheduled on the date specified in this parameter will be returned. If endDate parameter is also provided then appointments within the date range will be returned.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "If provided, the appointments will be filtered by the date range startDate - endDate. ",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeNullOffice",
            "in" : "query",
            "description" : "Indication to include appointments with no-office in the results or not. If only Null offices are required in the results, pass -1 as the **officeIds** parameter and set this parameter to **True**. By default this parameter is **True** and results will include appointments with no office as well. So this parameter is only required for filtering out no-office appointments, or requesting **only** no-office appointments. If this parameter is **False** then no-office appointments will be excluded from the results.",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "includeBillOnly",
            "in" : "query",
            "description" : "If this field is true, results will include both regular and billOnly appointments. If this field is false, the results will not include billOnly appointments. If the field is not provided or null, the results will not include  billOnly appointments",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "includeCancelled",
            "in" : "query",
            "description" : "If this field is true, results will include cancelled appointments. If the field is null, not provided or false, the results will not include the cancelled appointments. ",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "accessionNumber",
            "in" : "query",
            "description" : " The appointment accessionNumber. This is another identifier for the appointment resource. Null and blank accession numbers are not valid.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "officeId",
            "in" : "query",
            "description" : "Multiple office ids can be provided, i.e. in a request url, officeId=1280&officeId=3996. \n\n If this parameter is provided, all appointments will be filtered by the offices they are a part of.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          }, {
            "name" : "includeCancelled",
            "in" : "query",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "accessionNumber",
            "in" : "query",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoAppointmentDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "REMINDER_API" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY AND PATIENT_DEMOGRAPHICS with access level: READ_ONLY" ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to appointments with a provider that the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/history" : {
        "get" : {
          "tags" : [ "AppointmentHistory Endpoints" ],
          "summary" : "Retrieves appointment history",
          "description" : "Retrieves the history of the appointment represented by the series of state changes.",
          "operationId" : "getAppointmentHistory",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (Any one permission type is required.) ",
            "permissions" : [ {
              "level" : "ReadOnly",
              "logicalOperator" : "",
              "description" : "Allows access to appointment history for appointments with a provider the user has this permission for",
              "type" : "Scheduling"
            }, {
              "level" : "ReadOnly",
              "logicalOperator" : "",
              "description" : "Allows access to appointment history for appointments with a billing provider the user has this permission for",
              "type" : "Billing"
            } ]
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/history" : {
        "get" : {
          "tags" : [ "AppointmentHistory Endpoints" ],
          "summary" : "Retrieves appointment history for the date range",
          "description" : "Retrieves all the appointment state changes for a date range.",
          "operationId" : "getAppointmentHistory_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Start date",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End date",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Start date is invalid"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (Any one permission type is required.) ",
            "permissions" : [ {
              "level" : "ReadOnly",
              "logicalOperator" : "",
              "description" : "Allows access to appointment history for appointments with a provider the user has this permission for",
              "type" : "Scheduling"
            }, {
              "level" : "ReadOnly",
              "logicalOperator" : "",
              "description" : "Allows access to appointment history for appointments with a billing provider the user has this permission for",
              "type" : "Billing"
            } ]
          }
        }
      },
      "/v1/provider-portal/appointments/{appointmentId}/billprocedures" : {
        "get" : {
          "tags" : [ "BillProcedure Endpoints" ],
          "summary" : "Retrieves procedure codes",
          "description" : "Retrieves medical procedure codes for an appointment. ",
          "operationId" : "getProcedureCodes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string",
                    "description" : "Set of procedure code",
                    "example" : [ "A001", "A002" ]
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to bill procedures for claims that are assigned a provider the user has this permission for.",
            "type" : "Billing"
          }
        }
      },
      "/v1/provider-portal/current-office" : {
        "put" : {
          "tags" : [ "ChangeOffice Endpoints" ],
          "summary" : "Change which office is considered the \"current office\" when making calls using the current access token.",
          "description" : "This endpoint is use to change the current office associated with an access token so that subsequent API calls with that access token will operate as if they are for the specified office.",
          "operationId" : "changeOffice",
          "requestBody" : {
            "description" : "Office id - the office that a user wants to switch too.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 1
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Consumer unauthorized"
            },
            "403" : {
              "description" : "If the user does not have access to the office requested"
            },
            "204" : {
              "description" : "Request successful"
            }
          }
        }
      },
      "/v1/provider-portal/custom-properties" : {
        "get" : {
          "tags" : [ "Custom fields Endpoints" ],
          "summary" : "Retrieves accessible custom fields",
          "description" : "Retrieves all the global custom fields and the ones from the offices which user/client can access.",
          "operationId" : "getCustomFields",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If user doesn't have the permissions to access to any offices."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/CustomFieldDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/folders" : {
        "get" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Retrieves Folders",
          "description" : "Gets all the folders and their associated sub-folders(sub-types).Also, allows '%' wild-card search with the folder name(not the sub-folder name).\n\nTo search 'Image Folder', below keywords are valid: \n\n* Image Folder\n\n* image Folder\n\n* %ma%\n\n* %der\n\n* Image %\n\n",
          "operationId" : "getFolders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "folderName",
            "in" : "query",
            "description" : "The folder name to search for. If it is empty or null the endpoint will return all available folders. If it's a wild-card the results will be matching folders. And is a case-insensitive.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/FolderDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Saves the folder",
          "description" : "Creates the folder.</br>The folder can be created with below mentioned scenarios:</br>a) To create the folder without any sub-folders to link with: only folder name field is needed and rest of the fields must be null.</br>b)To create the folder with linked sub-folders: along with folder name, desired sub-folder must be provided to the request.</br>&nbsp;b.1) To link the new sub-folder, provide only sub-folder name.This will create the sub-folder and link it to the folder created.</br>&nbsp;b.2) To link the existing sub-folder, provide the sub-folder with both id and name. This will link to the created folder.",
          "operationId" : "createFolder",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Object of folder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns folder id.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "folder id",
                    "example" : 1
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/folders/sub-folders" : {
        "get" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Retrieves sub-folders",
          "description" : "Gets a set of all sub-folders available in the system.",
          "operationId" : "getSubFolders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SubFolderDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Saves the sub-folder",
          "description" : "Creates the sub-folder. In this request, only sub-folder will be created. This sub-folder can be later linked to any parent folder.</br> The sub-folder name field must be provided and the id field can be left blank. ",
          "operationId" : "createSubFolder",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The sub-folder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubFolderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Return sub-folder id.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "The sub-folder id",
                    "example" : 1
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/folders/{folderId}" : {
        "get" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Retrieves the folder",
          "description" : "Gets the folder and all its associated sub-folders for the folder id.",
          "operationId" : "getFolderById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "folderId",
            "in" : "path",
            "description" : "Folder id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/FolderDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Updates folder links",
          "description" : "Link or unlink sub-folders to the folder.</br>a) To link sub-folders: Must provide folder id, name, current sub-folders(existing linked sub-folders to the folder) and new sub-folders(must exist in the system) to be linked. For example: If the folder is linked with sub-folder A and B, in order to link sub-folder C, provide all the three sub-folders in the update request.</br>b) To unlink sub-folders: Must provide folder id, name, and provide all the sub-folders which should be finally linked to the folder. For example: If the folder is linked with sub-folder A and B, in order to unlink sub-folder A, provide only sub-folder B in the update request. To unlink all sub-folders, the sub folder collection must be empty.",
          "operationId" : "updateFolderLinks",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "folderId",
            "in" : "path",
            "description" : "The folder id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Object of folder",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "OK"
            },
            "400" : {
              "description" : "Invalid folder id or folder information not provided"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Deletes the folder",
          "description" : "Deletes the folder.",
          "operationId" : "deleteFolder",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "folderId",
            "in" : "path",
            "description" : "The folder id of the folder to be deleted",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "OK"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/folders/sub-folders/{subFolderId}" : {
        "get" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Retrieves the sub-folder",
          "description" : "Gets the sub-folder for the id.",
          "operationId" : "getSubFolderById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "subFolderId",
            "in" : "path",
            "description" : "Id of the sub-folder",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SubFolderDto"
                  },
                  "example" : {
                    "id" : 1,
                    "name" : "Document"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        },
        "delete" : {
          "tags" : [ "Folder Endpoints" ],
          "summary" : "Deletes the sub-folder",
          "description" : "Deletes the sub-folder. This will delete the sub-folder and unlink it from all the linked parent folders.</br>The sub-folder cannot be deleted if it is already in use.",
          "operationId" : "deleteSubFolder",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "subFolderId",
            "in" : "path",
            "description" : "The sub-folder id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "OK"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/generated-letters/{id}" : {
        "get" : {
          "tags" : [ "GeneratedLetter Endpoints" ],
          "summary" : "Retrieves the generated letter by Id",
          "description" : "Retrieves the generated letter in two parts.\n\nThe letter metadata which is json string of GeneratedLetterDto object and the actual binary data of the generated letter.",
          "operationId" : "getGeneratedLetterById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The id of the generated letter",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource doesn't exist"
            },
            "200" : {
              "description" : "Success. Multipart response in two parts: Json string in first part and binary data in second. The example on this doc is raw data in return.",
              "content" : {
                "multipart/form-data" : {
                  "schema" : {
                    "type" : "object",
                    "example" : "--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\nContent-Type: application/json\nContent-ID: <root.message@cxf.apache.org>\nGeneratedLetter of json format\n--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\nContent-Type: application/pdf\nContent-ID: <1>\nbinary data of content\n--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\n"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the generated letter.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/generated-letters" : {
        "get" : {
          "tags" : [ "GeneratedLetter Endpoints" ],
          "summary" : "Retrieves generated letters. (Deprecated: Refer to the version v2).",
          "description" : "Retrieves all generated letters without file content for all the provided filters. The results will be in ascending order by id.",
          "operationId" : "getGeneratedLetters",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "The user id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "The start date of the searching period. If this is provided without an endDate, this method will return all generated letters from the specified startDate.\n\n If endDate is also provided then results within the date range will be returned. \n\n",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-02-21"
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "The end date of the searching period. If this field is provided, the results will be filtered by the date range. </br> startDate - endDate. <br> Example: 2020-02-22<br>",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "query",
            "description" : "The appointment id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "User id and patient id must be provided"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GeneratedLetterDto"
                  }
                }
              }
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to generated letters with a provider the user has this permission for.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/generated-letters/{id}/status" : {
        "put" : {
          "tags" : [ "GeneratedLetter Endpoints" ],
          "summary" : "Updates the status of the generated letter",
          "description" : "Updates the status of a generated letter. Referral status can be any of the Status mentioned in ReferralStatus enum.",
          "operationId" : "updateLetterStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The id of the generated letter",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "Referral status of the generated letter to updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "NO_FILE", "FILE_READY", "FILE_RETRIEVED" ]
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Status must be provided. The provided generated id letter doesn't match with the specified resource, or no generated letter found with the id provided."
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the letter.",
            "type" : "EMR"
          }
        }
      },
      "/v2/provider-portal/generated-letters/{id}" : {
        "get" : {
          "tags" : [ "GeneratedLetter Endpoints" ],
          "summary" : "Retrieves the generated letter by id",
          "description" : "Get generated letter and content by id, the multipart response includes two sections: The letter metadata is provided as a JSON string in one part of response. It represents the properties of the generated letter and is structured according to the `GeneratedLetterDto` object.The actual binary content of the letter is included in the other part of response. The format of the content depends on the file extension of the generated letter: If the file extension is pdf, the content will be in the application/pdf format. If the file extension is tiff, the content will be in the image/tiff format or else it will be application/octet-stream.  Please note that the letter's content is not included within the DTO but is provided separately in the multipart response. You can access the content in the appropriate section of the response based on the file extension.",
          "operationId" : "getGeneratedLetterById_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The id of the generated letter",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource doesn't exist"
            },
            "200" : {
              "description" : "Success. Multipart response in two parts: Json string in the first part and binary data in the second part. The example is showing raw data of the response.",
              "content" : {
                "multipart/form-data" : {
                  "schema" : {
                    "type" : "object",
                    "example" : "--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\nContent-Type: application/json\nContent-ID: <root.message@cxf.apache.org>\nGeneratedLetter of json format\n--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\nContent-Type: application/pdf\nContent-ID: <1>\n\n{\"letterContent\":null,\"id\":223109,\"letterId\":1015,\"referralOrderId\":0,\"letterVersion\":5,\"physicianId\":28471,\"officeId\":18232,\"userId\":1,\"targetId\":0,\"appointmentId\":-1,\"patientId\":2474,\"cc\":0,....,\"extension\":\"pdf\"}\nbinary data of content\n--uuid:359c1fc9-82d1-48c7-85b2-b12475a98f0f\n"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the generated letter.",
            "type" : "EMR"
          }
        }
      },
      "/v2/provider-portal/generated-letters" : {
        "get" : {
          "tags" : [ "GeneratedLetter Endpoints" ],
          "summary" : "Retrieves generated letters",
          "description" : "Retrieves all generated letters without file content for all the provided filters. The results will be paginated in ascending order by id. ",
          "operationId" : "getGeneratedLetters_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "query",
            "description" : "The user id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "patientId",
            "in" : "query",
            "description" : "The patient id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "createdStartDate",
            "in" : "query",
            "description" : "The start date of the searching period for the generated letter date. If this is provided without an createdEndDate, this endpoint will return all generated letters created on and after the specified startDate.\n\n If createdEndDate is also provided then results within the date range will be returned. \n\n",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-02-21"
          }, {
            "name" : "createdEndDate",
            "in" : "query",
            "description" : "The end date of the searching period for the generated letter date. If this field is provided without createdStartDate, this endpoint will return all generated letters created on  and before the specified createdEndDate.If this field is provided along with createdStartDate, then results within the date range will be returned \n startDate - endDate. <br> Example: 2020-02-22<br>",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "query",
            "description" : "The appointment id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If the createdStartDate is greater than createdEndDate"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GeneratedLetterDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to generated letters with a provider the user has this permission for.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/insurers/{insurerId}" : {
        "get" : {
          "tags" : [ "Insurer Endpoints" ],
          "summary" : "Retrieves insurer by id",
          "description" : "Retrieves insurer by the given id.",
          "operationId" : "getInsurerById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "insurerId",
            "in" : "path",
            "description" : "The insurer id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/InsurerDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/insurers" : {
        "get" : {
          "tags" : [ "Insurer Endpoints" ],
          "summary" : "Retrieves all insurers",
          "description" : "Retrieves all insurers.",
          "operationId" : "getInsurers",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/InsurerDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Insurer Endpoints" ],
          "summary" : "Retrieves insurers by IDs",
          "description" : "Retrieves insurers by the given list of ids.",
          "operationId" : "getInsurers_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Collection of insurer id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "example" : 1
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/InsurerDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "No insurer ids have been supplied"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/lab-link-groups" : {
        "get" : {
          "tags" : [ "Lab Link Group Endpoints" ],
          "summary" : "Retrieves all the lab link groups available.",
          "description" : "Gets all the lab link groups available.",
          "operationId" : "getAll_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabLinkGroupReadOnlyDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/lab-link-groups/{groupId}" : {
        "get" : {
          "tags" : [ "Lab Link Group Endpoints" ],
          "summary" : "Retrieves the lab link group by group id.",
          "description" : "Gets the lab link group which belong to the given group id.",
          "operationId" : "getByGroupId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Lab link group id.",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabLinkGroupReadOnlyDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/labs/tests/{testId}/results" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves lab results for lab test",
          "description" : "Retrieves all lab results for a specified lab test. It will return an empty list if the specified test has no lab results, or if the test does not exist.",
          "operationId" : "getLabResultsForTest_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabResultDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Updates to add all lab results on the lab test",
          "description" : "Updates to add all lab results on the passed lab test.",
          "operationId" : "addResultsToTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "List of lab result ids to add to test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "delete" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Deletes lab result from the lab test",
          "description" : "Deletes the passed lab results from the specific lab test.",
          "operationId" : "deleteLabResultsForTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "List of lab result ids to delete from test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/labs/results" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves a set of all lab results",
          "description" : "Retrieves a set of all lab results.",
          "operationId" : "getLabResults_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabResultDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "post" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Saves lab result",
          "description" : "Saves a new lab result resource.",
          "operationId" : "createLabResult",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Lab result to create",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabResultDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns Lab result Id.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "lab result id",
                    "example" : 1
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/labs/tests" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves a set of all lab tests",
          "description" : "Retrieves a set of lab tests.",
          "operationId" : "getLabTests_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabTestDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "post" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Saves lab test",
          "description" : "Saves a new lab test and returns the id of the created entity.",
          "operationId" : "createLabTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Lab test to create",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabTestDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns the Lab test Id.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "format" : "int32",
                    "example" : 1
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/labs/results/{resultId}" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves the lab result",
          "description" : "Retrieves the lab result.",
          "operationId" : "getLabResult_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "resultId",
            "in" : "path",
            "description" : "The lab result id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Lab result doesn't exists for the given id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabResultDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Updates lab result",
          "description" : "Updates all fields on an existing lab result resource.",
          "operationId" : "updateLabResult",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "resultId",
            "in" : "path",
            "description" : "The lab result id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "Lab result to update",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabResultDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Lab result id in the resource does not match with the id in the body"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/labs/sources" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves lab sources",
          "description" : "Retrieves a list of all lab sources.",
          "operationId" : "getLabSources_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns a map source id to source name.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string",
                    "example" : "{ 1 : \"Excelleris\"} "
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/labs/tests/{testId}" : {
        "get" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Retrieves the specified lab test by id",
          "description" : "Retrieves the specified lab test.",
          "operationId" : "getLabTest_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabTestDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Lab test doesn't exist with the given id"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "LabTemplate Endpoints - Provider" ],
          "summary" : "Updates lab test",
          "description" : "Updates all fields on the passed lab test.",
          "operationId" : "updateLabTest",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testId",
            "in" : "path",
            "description" : "The lab test id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "Lab test to update",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabTestDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Lab Test resource id does not match with the id in the body"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the user has this permission for at least one provider.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/letters" : {
        "get" : {
          "tags" : [ "Letter Endpoints" ],
          "summary" : "Retrieves all letters which meet the specified filters",
          "description" : "Patient id or provider id must be provided. The results will be returned in a paginated form.  To request the next page, specify the startingId which is the same as  **EnvelopeDto.lastId** of the previous page. 'lastId' is the **id** of the last record of the page, and the results will be sorted by the field of **id**. <br /><br />On providing contactName filter, results will be returned containing the contact name matching with the beginning of that filter. ",
          "operationId" : "searchLetters",
          "parameters" : [ {
            "name" : "patientId ",
            "in" : "query",
            "description" : "The patient id",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "query",
            "description" : "The provider id",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **id** of the last records of the previous results.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If both patient id and provider id are not provided."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoLetterDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "CLINICAL_NOTES_WRITE", "CLINICAL_NOTES_READ" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY" ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the letter.",
            "type" : "EMR"
          }
        },
        "put" : {
          "tags" : [ "Letter Endpoints" ],
          "summary" : "Saves a patient letter",
          "description" : "Creates a new patient letter for the patient. If you provide Rich Text Format(RTF) data, please be aware that currently features like paragraph attributes, images and tables  are not supported. The RTF content must follow the Rich Text Format (RTF) specification by Microsoft Corporation.",
          "operationId" : "createPatientLetter",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New patient letter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPatientLetterDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Data provided is not valid"
            },
            "200" : {
              "description" : "Success. Returns the patient letter id generated.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Patient letter id",
                    "example" : 1
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "CLINICAL_NOTES_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: Full Access" ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for provider of the letter.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/letters/types" : {
        "get" : {
          "tags" : [ "Letter Endpoints" ],
          "summary" : "Retrieves letter types",
          "description" : "Retrieves all letter types.",
          "operationId" : "getActiveLetterTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LetterTypeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "CLINICAL_NOTES_WRITE", "CLINICAL_NOTES_READ" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/letters/{letterId}" : {
        "get" : {
          "tags" : [ "Letter Endpoints" ],
          "summary" : "Retrieves the letter by letter id",
          "description" : "Get the letter and its binary content by letter id. The multipart response includes two sections:\nThe first part is the letter metadata in JSON format representing the properties of the letter and is structured according to the `LetterDto` object. \nThe second part is the binary styled content of the letter. The binary content is of Rich Text Format (RTF)",
          "operationId" : "getLetterByLetterId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "letterId",
            "in" : "path",
            "description" : "The letter Id and not the id of the record.",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource doesn't exist"
            },
            "200" : {
              "description" : "Success. Multipart response in two parts: Json string in the first part and binary data in the second part. The example is showing raw data of the response.",
              "content" : {
                "multipart/form-data" : {
                  "schema" : {
                    "type" : "object",
                    "example" : "--uuid: 3612915e-0b5e-4911-98f4-e17e664b3a59\nContent-Type: application/json\nContent-ID: <root.message@cxf.apache.org>\n{Letter in json format}\n\n--uuid: 3612915e-0b5e-4911-98f4-e17e664b3a59\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\nContent-ID: <1>\n\nbinary data of content\n--uuid: 3612915e-0b5e-4911-98f4-e17e664b3a59\n"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "CLINICAL_NOTES_WRITE", "CLINICAL_NOTES_READ" ]
          } ],
          "x-accuroRoles" : [ "EMR_CLINICAL_NOTES with access level: READ_ONLY" ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the letter.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/medications/limited-use-codes" : {
        "get" : {
          "tags" : [ "LimitedUseCode Endpoints" ],
          "summary" : "Retrieves limited use code",
          "description" : "Retrieves all limited use codes for the drug id (DIN).",
          "operationId" : "getLmitedUseCodeByDrugId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "din",
            "in" : "query",
            "description" : "Drug id",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid DIN or access beyond Ontario Province"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LimitedUseCodeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/flags/{flagId}" : {
        "get" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Retrieves patient flag by flag Id",
          "description" : "Retrieves a patient flag that has been applied to the patient.",
          "operationId" : "getFlagForPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "flagId",
            "in" : "path",
            "description" : "Flag id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientAlertFlagDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Applies patient flag",
          "description" : "Applies the patient flag to the patient",
          "operationId" : "applyFlag",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "flagId",
            "in" : "path",
            "description" : "Flag id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Removes patient flag",
          "description" : "Removes a patient flag from the patient.",
          "operationId" : "removeFlag",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "flagId",
            "in" : "path",
            "description" : "Flag id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/flags" : {
        "get" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Retrieves patient flags",
          "description" : "Retrieves all patient flags that have been applied to the patient.",
          "operationId" : "getFlagsForPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientAlertFlagDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Applies multiple patient flags",
          "description" : "Applies multiple patient flags to the single patient.",
          "operationId" : "applyFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patient flag ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Flag ids could not be found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/flags/{flagId}" : {
        "get" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Retrieves patient flag",
          "description" : "Retrieves an available patient flag associated with the provided flag id.",
          "operationId" : "getFlagById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "flagId",
            "in" : "path",
            "description" : "The flag id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Flag not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientAlertFlagDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/flags" : {
        "get" : {
          "tags" : [ "PatientAlertFlag Endpoints" ],
          "summary" : "Retrieves patient flags",
          "description" : "Retrieves all available patient flags.",
          "operationId" : "getFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientAlertFlagDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/patient-chart-lock" : { },
      "/v1/provider-portal/patients/{patientId}/patient-chart-unlock" : { },
      "/v1/provider-portal/patients" : {
        "post" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Creates a new patient",
          "description" : "Creates a new patient.",
          "operationId" : "createPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The new patient",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Patient is missing or location id on secondary address is not provided"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns patient id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        }
      },
      "/v1/provider-portal/patients/{patientId}/aliases" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient aliases",
          "description" : "Retrieves a list of the patient aliases.",
          "operationId" : "getPatientAliases",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AliasDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient alias",
          "description" : "Updates the patient alias.",
          "operationId" : "updatePatientAlias",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patients alias",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AliasDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Adds new patient alias",
          "description" : "Adds a new patient's alias.",
          "operationId" : "createPatientAlias",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "New patient alias",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AliasDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns patient alias id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Deletes patient's alias",
          "description" : "Deletes a patient's alias.",
          "operationId" : "deletePatientAlias",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "aliasId",
            "in" : "query",
            "description" : "Alias id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if delete is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/emails" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient's emails",
          "description" : "Retrieves a list of the patient's emails.",
          "operationId" : "getPatientEmails",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/EmailDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's email",
          "description" : "Updates the patient's email.",
          "operationId" : "updatePatientEmail",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Create patient's email",
          "description" : "Creates the patient's email.",
          "operationId" : "createPatientEmail",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "New patient's email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns email id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Deletes patient's email",
          "description" : "Deletes the patient's email.",
          "operationId" : "deletePatientEmail",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "emailId",
            "in" : "query",
            "description" : "Email id to be deleted",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if delete is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/phones" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves the additional patient's phone",
          "description" : "Retrieves a list of the additional patient's phone. It doesn't include default home, work or cell phone numbers.",
          "operationId" : "getPatientPhones",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PhoneDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates the additional patient's phone",
          "description" : "Updates the additional patient's phone. It doesn't update default home, work or cell phone numbers.",
          "operationId" : "updatePatientPhone",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated patient phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhoneDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Creates the additional patient's phone",
          "description" : "Creates the additional patient's phone. It doesn't create default home, work or cell phone numbers.",
          "operationId" : "createPatientPhone",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "New patient's phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhoneDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns phone id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Deletes the additional patient's phone",
          "description" : "Deletes the additional patient's phone. It doesn't delete default home, work or cell phone numbers.",
          "operationId" : "deletePatientPhone",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "phoneId",
            "in" : "query",
            "description" : "Phone id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if delete is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient",
          "description" : "Retrieves patient associated with the patient id.",
          "operationId" : "getPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Patient not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient",
          "description" : "Updates the given patient.",
          "operationId" : "updatePatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated patient",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        },
        "patch" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient",
          "description" : "Updates the given patient. This endpoint allows partial update, i.e., update only those fields which need to be updated instead of updating entire Patient object. If there are any invalid fields in the request, they will be ignored and the valid ones will be updated. The database field validations are applied with reference to the PatientDto.",
          "operationId" : "patchPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated patient fields",
            "content" : {
              "application/merge-patch+json" : {
                "schema" : {
                  "type" : "object",
                  "example" : {
                    "CustomProperty" : "CustomValue"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "204" : {
              "description" : "Request successful"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        }
      },
      "/v1/provider-portal/patients/search" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Searches patients by PHN",
          "description" : "Searches for patients by the given personal health number/care card number.",
          "operationId" : "getPatientByPhn",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "phn",
            "in" : "query",
            "description" : "The full/partial PHN to search",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/custom-properties" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient's custom properties",
          "description" : "Retrieves the patient's custom properties.",
          "operationId" : "getPatientCustomProperties",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "officeId",
            "in" : "query",
            "description" : "Office ID to filter results",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Insufficient permissions for the given office"
            },
            "400" : {
              "description" : "Custom properties are user specific - requires a specific user"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a map of property name to value.Both key values are strings.",
                    "example" : {
                      "CustomProperty" : "CustomValue"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's custom properties",
          "description" : "Updates the patient's custom properties.",
          "operationId" : "updatePatientCustomProperties",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "A map of custom property name to value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "example" : {
                    "CustomProperty" : "CustomValue"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or missing custom properties"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "patch" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's custom properties",
          "description" : "Merges updated patient's custom properties map to the existing custom properties map. To remove a custom property, set its value to null in the request.",
          "operationId" : "patchPatientCustomProperties",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "A map of custom property names to values",
            "content" : {
              "application/merge-patch+json" : {
                "schema" : {
                  "type" : "object",
                  "example" : {
                    "CustomProperty" : "CustomValue"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or missing custom properties"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/insurers" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves the patient's private insurer ids",
          "description" : "Retrieves a list of private insurer ids for the specific patient.",
          "operationId" : "getPatientPrivateInsurerIds",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success, returns a list of insurer ids",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns a list of insurer ids",
                    "example" : [ 1, 2 ]
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's private insurers",
          "description" : "Updates the patient's private insurers.",
          "operationId" : "updatePatientPrivateInsurerIds",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Array of insurer ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/role-flags" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient's role flags",
          "description" : "Retrieves the patient's role flags.",
          "operationId" : "getPatientRoleFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a map of role id to flag",
                    "example" : {
                      "1" : {
                        "flagUser" : 1,
                        "message" : "string",
                        "lastUpdated" : "2019-04-18T20:05:51.529Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's role flags",
          "description" : "Updates patient's role flags.",
          "operationId" : "updatePatientRoleFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "A map of role id to flag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "example" : {
                    "1" : {
                      "flagUser" : 1,
                      "message" : "string",
                      "lastUpdated" : "2019-04-18T20:05:51.529Z"
                    }
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Missing role flags"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/user-flags" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient's user flags",
          "description" : "Retrieves the patient's user flags.",
          "operationId" : "getPatientUserFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Returns a Map of user id (Integer) and patient flag",
                    "example" : "{ 1: { \"message\": \"string\",  \"lastUpdated\": \"2019-04-18T20:05:51.529Z\" } }"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Updates patient's user flags",
          "description" : "Updates the patient's user flags.",
          "operationId" : "updatePatientUserFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "The map of user id (integer) and patient flag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "The map of user id (integer) and patient flag",
                  "example" : "{ 1: { \"message\": \"string\", \"lastUpdated\": \"2019-04-18T20:05:51.529Z\" } }"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/profile-picture" : {
        "get" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Retrieves patient's profile picture",
          "description" : "Retrieves patient's profile picture",
          "operationId" : "getProfilePicture",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success. Returns file with media type as : application/octet-stream and png format.",
              "content" : {
                "application/octet-stream" : {
                  "schema" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "404" : {
              "description" : "If profile picture is not found."
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Patient Endpoints" ],
          "summary" : "Uploads patient's profile picture",
          "description" : "Uploads patient's profile picture",
          "operationId" : "uploadProfilePicture",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Image to be uploaded as profile picture.",
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PictureMultipartDefinition"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "413" : {
              "description" : "If picture uploaded is more than 10MB"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "Integer",
                    "description" : "Returns profile picture id if successful.",
                    "example" : 12
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v2/provider-portal/patients" : {
        "post" : {
          "tags" : [ "PatientV2 Endpoints" ],
          "summary" : "Creates a new patient",
          "description" : "Creates a new patient",
          "operationId" : "createPatient_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The new patient",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientV2Dto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "204" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns patient id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        }
      },
      "/v2/provider-portal/patients/{patientId}" : {
        "get" : {
          "tags" : [ "PatientV2 Endpoints" ],
          "summary" : "Retrieves patient",
          "description" : "Retrieves patient associated with the patient id.",
          "operationId" : "getPatient_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Patient not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientV2Dto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "PatientV2 Endpoints" ],
          "summary" : "Updates patient",
          "description" : "Updates the given patient.",
          "operationId" : "updatePatient_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated patient",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientV2Dto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        },
        "patch" : {
          "tags" : [ "PatientV2 Endpoints" ],
          "summary" : "Updates patient",
          "description" : "Updates the given patient. This endpoint allows partial update, i.e., update only those fields which need to be updated instead of updating entire Patient object. If there are any invalid fields in the request, they will be ignored and the valid ones will be updated. The database field validations are applied with reference to the PatientV2Dto",
          "operationId" : "patchPatient_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated patient fields",
            "content" : {
              "application/merge-patch+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonNode"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "If no sufficient roles or features"
            },
            "400" : {
              "description" : "Invalid data"
            },
            "204" : {
              "description" : "Request successful"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ],
          "x-accuroFeaturePermissions" : "Set Office Provider(Set Office Provider) - To set an office provider for a patient  AND Set Referring Physician(Set Referring Physician) - To set a referring provider for a patient "
        }
      },
      "/v2/provider-portal/patients/search" : {
        "get" : {
          "tags" : [ "PatientV2 Endpoints" ],
          "summary" : "Retrieves all patients which meet the specified filters",
          "description" : "The results will be provided in a paginated form.  To request the next page, specify the startingId which is same as  **EnvelopeDto.lastId** of the previous page. Last id is the **patientId** of the last record of the page, and results will be ordered by this field i.e **patientId**. All searches are begins with search except for the phone, i.e matches will only be found at the beginning of the string. For the phone, the search for the records which have input parameter as the value at any position in them. For the uuid parameter, the search is performed for the exact value.",
          "operationId" : "getPatients",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "phn",
            "in" : "query",
            "description" : "Patient health number",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "firstName",
            "in" : "query",
            "description" : "Size must be between 2 and 100",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "lastName",
            "in" : "query",
            "description" : "Size must be between 2 and 100",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "phone",
            "in" : "query",
            "description" : "Size must be between 3 and 50",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fileNumber",
            "in" : "query",
            "description" : "Patient file number",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "medeoUserUuid",
            "in" : "query",
            "description" : "Unique Medeo Patient user UUID.The exact value should be provided.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientUuid",
            "in" : "query",
            "description" : "Unique Patient UUID.The exact value should be provided.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **patientId** of the last records of the previous results.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If provided firstName, lastName, or phone is less than minimum characters."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvelopeDtoPatientV2Dto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v2/provider-portal/patients/{patientId}/role-flags" : {
        "get" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Retrieves patient role flags",
          "description" : "Retrieves patient role flags associated with the patient id.",
          "operationId" : "getPatientRoleFlags_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "example" : [ {
                    "roleId" : 1,
                    "flag" : "A message",
                    "lastUpdatedDate" : "2017-11-08T00:00:00.000"
                  } ]
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Updates patient role flags",
          "description" : "Updates patient role flags",
          "operationId" : "updatePatientRoleFlags_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patient role flags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PatientRoleFlagDto"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Patient role flags missing or invalid patient id"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Creates patient role flags",
          "description" : "Creates patient role flags",
          "operationId" : "createPatientRoleFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patient role flags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PatientRoleFlagDto"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Patient role flags missing or invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "example" : [ {
                    "patientId" : 1,
                    "flagId" : 2
                  } ]
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v2/provider-portal/patients/{patientId}/user-flags" : {
        "get" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Retrieves patient user flag belongs to logged-in user",
          "description" : "Retrieves patient user flag associated with the patient id and belongs to the logged in user",
          "operationId" : "getPatientUserFlag",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant or Client level authorization grant with first party scope.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientUserFlagDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Updates patient user flag",
          "description" : "Updates patient user flag",
          "operationId" : "updatePatientUserFlags_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant or Client level authorization grant with first party scope",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patient User Flag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientUserFlagDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Patient user flags missing or Invalid patient id"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Creates a patient user flag",
          "description" : "Creates a patient user flag",
          "operationId" : "createPatientUserFlags",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant or Client level authorization grant with first party scope.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Patient User Flag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatientUserFlagDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Patient user flags missing or Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientUserRoleFlagIdDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v2/provider-portal/patients/{patientId}/role-flags/{roleId}" : {
        "delete" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Deletes patient role flag",
          "description" : "Deletes patient role flag associated with the patient id.",
          "operationId" : "deletePatientRoleFlag",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "roleId",
            "in" : "path",
            "description" : "Role Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Role Flag Not Found for Deletion"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v2/provider-portal/patients/{patientId}/user-flags/{userId}" : {
        "delete" : {
          "tags" : [ "PatientFlags Endpoints" ],
          "summary" : "Deletes a patient user flag",
          "description" : "Deletes patient user flag associated with patient id and logged in user. An user flag can be accessed/modified only by the logged in user",
          "operationId" : "deletePatientUserFlag",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant or Client level authorization grant with first party scope.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "User Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "User id should match the logged in user"
            },
            "404" : {
              "description" : "User Flag Not Found for Deletion"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/patient-identifiers" : {
        "get" : {
          "tags" : [ "Patient Identifier Endpoints" ],
          "summary" : "Retrieve patient identifiers by ID",
          "description" : "Fetches all patient identifiers associated with a given patient ID. A valid patient ID must be provided.",
          "operationId" : "getPatientIdentifiers",
          "parameters" : [ {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient ID",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Successfully retrieved patient identifiers.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid patient ID. Please provide a valid ID."
            },
            "404" : {
              "description" : "No patient identifiers found for the given ID."
            },
            "500" : {
              "description" : "Internal server error."
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.PatientIdentifier.read" ]
          } ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{groupId}/observations" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab group observations",
          "description" : "Gets the observations for the particular lab group.",
          "operationId" : "getLabGroupObservations",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabObservationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when a recipient provider is a provider the user has this permission for.",
            "type" : "Labs"
          }
        },
        "post" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Saves observation to lab group",
          "description" : "Adds the new lab observation to the lab group.\n\nThe returned integer for this call will be the id of the new lab group as lab group updates will always generate the new lab group.",
          "operationId" : "addLabGroupObservation",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Lab observation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabObservationDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided patient id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the ordering provider is a provider the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab groups",
          "description" : "Gets the lab groups for the specific patient.",
          "operationId" : "getLabGroups",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "testIds",
            "in" : "query",
            "description" : "This parameter will filter the results by the test ids to which they belong. \n\n Multiple test ids can be provided, i.e. in the request url, testIds=12&testIds=39.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "resultIds",
            "in" : "query",
            "description" : "This parameter will filter the results by the result ids to which they belong. \n\n Multiple result ids can be provided, i.e. in the request url, resultIds=12&resultIds=39.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "If both start and end date is provided, the observations between these are retrieved. If only start date is provided, the observation on that particular date are retrieved.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "If both start and end date is provided, the observations between these two dates are retrieved",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabGroupDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to lab groups with a recipient provider the user has this permission for.",
            "type" : "Labs"
          }
        },
        "post" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Saves the lab group",
          "description" : "Creates the lab group for the particular patient.",
          "operationId" : "createLabGroup",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "New lab group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabGroupDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id.\n\nTransaction date is required for the lab groups.\n\nVersion date is required for the lab groups.\n\nThe provided lab group does not match with the specified resource.\n\n"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when the ordering provider is set to a provider the user has this permission for.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{groupId}" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab group for the patient",
          "description" : "Gets the patient's lab group by group id.",
          "operationId" : "getLabGroup",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided lab group does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabGroupDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to lab groups with a recipient provider the user has this permission for.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Updates the lab group for the patient",
          "description" : "Updates the lab group for the particular patient. This endpoint creates the new lab group, therefore it returns the new id for the lab group.",
          "operationId" : "updateLabGroup",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated lab group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabGroupDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id.\n\nTransaction date is required for the lab groups.\n\nVersion date is required for the lab groups.\n\nThe provided lab group does not match with the specified resource.\n\n"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns new group id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "ReadOnly",
              "logicalOperator" : "",
              "description" : "Allows access when a recipient provider is a provider the user has this permission for.",
              "type" : "Labs"
            }, {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the ordering provider are providers the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        },
        "delete" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Deletes the lab group",
          "description" : "Deletes the lab group for the particular patient.",
          "operationId" : "deleteLabGroup",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided lab group id does not match with the specified resource.\n\n"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when a recipient provider is a provider the user has this permission for.",
            "type" : "Labs"
          },
          "x-accuroFeaturePermissions" : "EMR_DELETE_LABS (Delete Labs) - Is Required to delete a lab"
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{groupId}/observations/{observationId}" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab group observation",
          "description" : "Gets an observation by observation id for the particular lab group.",
          "operationId" : "getLabGroupObservation",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "observationId",
            "in" : "path",
            "description" : "Observation id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided patient id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LabObservationDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when a recipient provider is a provider the user has this permission for.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Updates the lab group observation",
          "description" : "Updates the observation for the particular lab group.\n\nThe returned integer for this endpoint call will be the id of the new lab group as UPDATE operation always generates the new lab group.",
          "operationId" : "updateLabGroupObservation",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "observationId",
            "in" : "path",
            "description" : "Observation id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated lab observation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LabObservationDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided patient id does not match with the specified resource.\n\nThe provided observation id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the ordering provider is a provider the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        },
        "delete" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Removes the lab group observation",
          "description" : "Removes the lab observation from a lab group.\n\nThe returned integer for this call will be the id of the new lab group as lab group updates will always generate the new lab group.",
          "operationId" : "deleteLabGroupObservation",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "observationId",
            "in" : "path",
            "description" : "Observation id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided patient id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns new active group id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the ordering provider is a provider the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{baseGroupId}/history" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab group history",
          "description" : "Retrieves the complete history of the lab group by group id for the particular patient.",
          "operationId" : "getLabGroupHistory",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "baseGroupId",
            "in" : "path",
            "description" : "Base group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided lab group Id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabGroupDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to history when a recipient provider is a provider the user has this permission for.",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{groupId}/recipients" : {
        "get" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Retrieves the lab group recipient ids",
          "description" : "Retrieves the provider ids who are the recipients of the lab group.",
          "operationId" : "getLabGroupRecipientIds",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided lab group id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "integer",
                      "description" : "Returns a set of ids",
                      "example" : [ 1001 ]
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access when a recipient provider is a provider the user has this permission for.",
            "type" : "Labs"
          }
        },
        "put" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Updates the lab group recipients",
          "description" : "Updates the passed provider ids as the lab group recipients.",
          "operationId" : "updateLabGroupRecipients",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "ID of the patient on the lab",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "ID of the resource accessed",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "Add recipient's ids to lab group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "description" : "Recipient's ids",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided lab group id does not match with the specified resource.\n\n"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access when an existing recipient provider and the added recipient providers are providers the user has this permission for.",
            "type" : "Labs"
          }
        },
        "delete" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Removes the lab group recipients",
          "description" : "Removes the passed provider ids as the recipients from the lab group.",
          "operationId" : "removeLabGroupRecipients",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id of the patient on the lab",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "ID of the resource accessed",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "requestBody" : {
            "description" : "Remove recipients from lab group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "description" : "Recipient's ids",
                    "example" : [ 1001 ]
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient ID or group ID.\n\nThe provided lab group Id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the removed recipient providers are providers the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/lab-groups/{groupId}/reviews" : {
        "put" : {
          "tags" : [ "PatientLabs Endpoints - Provider" ],
          "summary" : "Update to mark the lab group as reviewed",
          "description" : "Marks the lab group as reviewed for the particular provider.",
          "operationId" : "reviewLabGroupForProviders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "groupId",
            "in" : "path",
            "description" : "Group id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "A set of provider ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid patient id or group id.\n\nThe provided patient id does not match with the specified resource."
            },
            "404" : {
              "description" : "Resource not found"
            },
            "204" : {
              "description" : "No Content"
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access when the reviewing providers are providers the user has this permission for.",
              "type" : "Labs"
            } ]
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/medical-summary" : {
        "get" : {
          "tags" : [ "Medical summary Endpoints" ],
          "summary" : "Retrieves patient medical summary by patient id.",
          "description" : "Retrieves the patient medical summary by the given patient id. Only prescriptions with provider permissions and active status are retrieved.Dosages are sorted by start date.",
          "operationId" : "getPatientMedicalSummary",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The unique patient id.",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "The user is not authorized."
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Invalid patient id."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientMedicalSummaryDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_SUMMARY_READ" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patient-statuses" : {
        "get" : {
          "tags" : [ "Patient status Endpoints" ],
          "summary" : "Retrieves patient statuses",
          "description" : "Retrieve all patient statuses. Results are order by status order",
          "operationId" : "getAll_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientStatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patient-statuses/{id}" : {
        "get" : {
          "tags" : [ "Patient status Endpoints" ],
          "summary" : "Retrieves patient status",
          "description" : "Retrieves patient status associated with the status id.",
          "operationId" : "getById_3",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Patient status id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Patient status not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientStatusDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DEMOGRAPHICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/provider/{providerId}/lab-groups" : {
        "get" : {
          "tags" : [ "ProviderLabs Endpoints" ],
          "summary" : "Retrieves active lab groups",
          "description" : "Gets all active labs for the given provider id. This will return all unreviewed or unmatched labs for the particular provider. This request is similar to the home section in Accuro.",
          "operationId" : "getActiveLabGroups",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Invalid provider id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/LabGroupDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LABS_READ", "LABS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_LABS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to the requested providers lab groups when this user has this permission for this provider",
            "type" : "Labs"
          }
        }
      },
      "/v1/provider-portal/patient-repliforms-reportables" : {
        "get" : {
          "tags" : [ "Patient Repliforms Reportable Endpoints" ],
          "summary" : "Retrieves patient repliforms reportable data",
          "description" : "Retrieves patient repliforms reportable data associated with the chartItemId. The chartItemId can be obtained from the referral orders endpoint.",
          "operationId" : "getPatient_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "chartItemId",
            "in" : "query",
            "description" : "chartItemId",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Patient repliforms reportable data not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientRepliformReportableDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.PatientRepliform.read" ]
          } ]
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/statuses/{statusId}" : {
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Updates appointment status",
          "description" : "Adds the status to the Appointment.",
          "operationId" : "addAppointmentStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "statusId",
            "in" : "path",
            "description" : "Status id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if operation is successful",
                    "example" : true
                  }
                }
              }
            },
            "400" : {
              "description" : "Unable to add status"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "Scheduling"
          }
        },
        "delete" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Deletes appointment status",
          "description" : "Removes the status from the appointment.",
          "operationId" : "removeAppointmentStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "statusId",
            "in" : "path",
            "description" : "Status id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if operation is successful",
                    "example" : true
                  }
                }
              }
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves appointments",
          "description" : "Gets all appointments for the specific date or date range. Filtered for the specific provider, resource, patient or office or accession number",
          "operationId" : "getAppointments_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Start Date - required if no patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            },
            "example" : "2018-10-01"
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End Date",
            "schema" : {
              "type" : "string"
            },
            "example" : "2018-10-11"
          }, {
            "name" : "provider",
            "in" : "query",
            "description" : "Provider id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "resource",
            "in" : "query",
            "description" : "Resource id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "patient",
            "in" : "query",
            "description" : "Patient id - required if no start date",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "officeId",
            "in" : "query",
            "description" : "Office id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "accessionNumber",
            "in" : "query",
            "description" : "The appointment accessionNumber. This is another identifier for the appointment resource. Null and blank accession numbers are not valid.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeDeleted",
            "in" : "query",
            "description" : "This is set to false by default or for the invalid value. When it's true, the results will include deleted appointments",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "includeCancelled",
            "in" : "query",
            "description" : "This is set to false by default or for the invalid value. When it's true, the results will include cancelled appointments",
            "schema" : {
              "type" : "boolean"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "Start date or patient id must be supplied"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Saves appointment",
          "description" : "Creates new appointment.",
          "operationId" : "createAppointment",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New Appointment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Attempting to create an appointment in another office"
            },
            "201" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns the appointment id",
                    "example" : 1001
                  }
                }
              }
            },
            "400" : {
              "description" : "The start and end times must be within 0000-2400 hours.\n\nThe provided start time must not come on or after the appointment's end time.\n\nStart Time must be in valid 24 hour time.\n\nEnd Time must be in valid 24 hour time."
            },
            "409" : {
              "description" : "If another client is editing the schedule in the location"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access if the user has this permission for the appointment provider",
              "type" : "Scheduling"
            } ]
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/lock" : {
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Saves protection lock",
          "description" : "Creates the protection lock for the specific appointment.",
          "operationId" : "createProtectionLock",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Attempting to lock an appointment in another office.\n\nAccess the masked information without the right permission."
            },
            "204" : {
              "description" : "Success"
            },
            "409" : {
              "description" : "If another client is editing this appointment"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ]
        },
        "delete" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Deletes protection lock",
          "description" : "Releases the protection lock for the specific appointment.",
          "operationId" : "deleteProtectionLock",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success"
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/scheduler/providers/{providerId}/calendar-notes" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves provider calendar notes for the specified date range.",
          "description" : "Gets all the calendar notes for the specified provider within the given date range. Start date is required. If there is no end date, record for only start date will be returned. Note: The maximum date range allowed is 1 year.",
          "operationId" : "getProviderCalendarNote",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Start date",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End date",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProviderScheduleCalendarDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "Start date not specified"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider.",
            "type" : "Scheduling"
          }
        },
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Updates a provider calendar note",
          "description" : "Updates a provider calendar note.",
          "operationId" : "updateProviderCalendarNote",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Provider schedule calendar",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderScheduleCalendarDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Missing or invalid required fields"
            },
            "200" : {
              "description" : "Success"
            },
            "404" : {
              "description" : "Calendar note not found for the given date."
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider.",
            "type" : "Scheduling"
          }
        },
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Creates a provider calendar note",
          "description" : "Creates a provider calendar note. If the given date already has calendar note, it will be updated.",
          "operationId" : "createProviderCalendarNote",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Provider schedule calendar",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProviderScheduleCalendarDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Missing or invalid required fields or calendar note already exists"
            },
            "200" : {
              "description" : "Success"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider.",
            "type" : "Scheduling"
          }
        },
        "delete" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Deletes provider calendar note for the specified date.",
          "description" : "Deletes provider calendar note for the specified date.",
          "operationId" : "deleteProviderCalendarNote",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "path",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "date",
            "in" : "query",
            "description" : "Date for which calendar note is to be deleted.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success"
            },
            "400" : {
              "description" : "Invalid provider or date not specified."
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/lock" : {
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Saves schedule lock",
          "description" : "Requests schedule protection lock.",
          "operationId" : "createScheduleLock",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Schedule slot for lock",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduleSlotDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "The object of UUID.",
                    "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                  }
                }
              }
            },
            "400" : {
              "description" : "A provider or resource must be specified to lock"
            },
            "409" : {
              "description" : "If another client is editing the location on the schedule"
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "Scheduling"
          }
        },
        "delete" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Deletes schedule lock",
          "description" : "Releases schedule protection lock.",
          "operationId" : "deleteScheduleLock",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Lock UUID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success"
            },
            "400" : {
              "description" : "Lock id must be specified."
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/statuses" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment statuses",
          "description" : "Gets a list of appointment statuses.",
          "operationId" : "getAppointmentStatuses_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/StatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Creates appointment status",
          "description" : "Creates the appointment status.",
          "operationId" : "createStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New appointment status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns id",
                    "example" : 1001
                  }
                }
              }
            },
            "400" : {
              "description" : "Status name can not be null.\n\nStatus abbreviation can not be null.\n\nName must be at most 50 characters.\n\nAbbreviation must be at most 2 characters."
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ]
        },
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves statuses by appointment ids",
          "description" : "Gets statuses applied to multiple appointments.",
          "operationId" : "getStatusesByAppointmentIds",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Appointment ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "The map of appointment ids to array of status(s)",
                    "example" : "{ 1 : { 1, 3, 4, 5 }, 2 : { 2, 3, 4 } }"
                  }
                }
              }
            },
            "400" : {
              "description" : "No appointment ids have been supplied"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to the appointment statuses the user has this permission for the providers of the appointments.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves appointment",
          "description" : "Gets appointment by the given appointment id.",
          "operationId" : "getAppointment_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AppointmentDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Updates appointment",
          "description" : "Updates existing Appointment.",
          "operationId" : "updateAppointment",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "cancellationReason",
            "in" : "query",
            "description" : "Reason for cancellation when appointment is cancelled.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated appointment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Access forbidden without Schedule Lock.\n\nAccess the masked information without the right permission."
            },
            "204" : {
              "description" : "Updated successfully"
            },
            "400" : {
              "description" : "The start and end times must be within 0000-2400 hours.\n\nThe provided start time must not come on or after the appointment's end time.\n\nThe provided appointment does not match the specified resource.\n\n"
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "409" : {
              "description" : "If another client is editing this appointment or its location on the schedule"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access if the user has this permission for the appointment provider",
              "type" : "Scheduling"
            } ]
          }
        },
        "delete" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Deletes appointment",
          "description" : "Deletes or cancels the appointment.",
          "operationId" : "deleteAppointment",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "cancel",
            "in" : "query",
            "description" : "Cancel appointment and do not delete",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "cancellationReason",
            "in" : "query",
            "description" : "Reason for cancellation",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Access forbidden without Protection Lock.\n\nAccess the masked information without the right permission."
            },
            "204" : {
              "description" : "Deleted successfully"
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "409" : {
              "description" : "If another client is editing this appointment"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the appointment provider.",
            "type" : "Scheduling"
          },
          "x-accuroFeaturePermissions" : "SCHEDULING_DELETE_APPOINTMENT (Delete Appointment) - Is required to delete an appointment"
        },
        "patch" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Patches appointment",
          "description" : "Patches existing Appointment. Allow user to update only relevant fields.Check the example object where we are updating only 4 fields instead of entire object.",
          "operationId" : "patchAppointment",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "cancellationReason",
            "in" : "query",
            "description" : "Reason for cancellation when appointment is cancelled.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated appointment Fields. Allows partial modifications to a resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentDto"
                },
                "example" : {
                  "date" : "2025-01-23",
                  "accessionNumber" : 123,
                  "siteId" : 178,
                  "appointmentDetails" : {
                    "notes" : "TEst note"
                  }
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Access forbidden without Schedule Lock.\n\nAccess the masked information without the right permission."
            },
            "204" : {
              "description" : "Updated successfully"
            },
            "400" : {
              "description" : "The start and end times must be within 0000-2400 hours.\n\nThe provided start time must not come on or after the appointment's end time.\n\nThe provided appointment does not match the specified resource.\n\n"
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "409" : {
              "description" : "If another client is editing this appointment or its location on the schedule"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "logicalOperator" : " (All permission types are required. ) ",
            "permissions" : [ {
              "level" : "Full",
              "logicalOperator" : "",
              "description" : "Allows access if the user has this permission for the appointment provider",
              "type" : "Scheduling"
            } ]
          }
        }
      },
      "/v1/provider-portal/scheduler/suggestions" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves all suggestions",
          "description" : "Gets all schedule suggestions.",
          "operationId" : "getAllSuggestions",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ScheduleSuggestionDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/scheduler/applied-availabilities" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves applied availabilities",
          "description" : "Gets availabilities applied to the scheduler.",
          "operationId" : "getAppliedAvailabilities",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "query",
            "description" : "Provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Start date",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End date",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppliedAvailabilityDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "No provider id or start date specified"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to availabilities for providers the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/applied-suggestions" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves applied suggestions",
          "description" : "Gets schedule suggestions that have been applied in the scheduler.For startDate and endDate, only date part is considered. If time and time zone passed, they will be ignored.",
          "operationId" : "getAppliedSuggestions",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Start date. Only date part is considered",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End date. Only date part is considered",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "provider",
            "in" : "query",
            "description" : "Provider id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "resource",
            "in" : "query",
            "description" : "Resource id",
            "deprecated" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "subColumn",
            "in" : "query",
            "description" : "Sub column",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppliedSuggestionDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "startDate and endDate are required"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to applied suggestions for providers the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/statuses" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves appointment statuses",
          "description" : "Gets statuses for the appointment.",
          "operationId" : "getAppointmentStatuses_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "integer",
                      "description" : "Returns Status(s)",
                      "example" : 1
                    }
                  }
                }
              }
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to appointments if the user has this permission for appointment provider.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/availability-templates" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves availability templates",
          "description" : "Gets all availability templates.",
          "operationId" : "getAvailabilityTemplates",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AvailabilityTemplateDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/billing_details" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves billing details for appointment",
          "description" : "Gets billing details for the specific appointment.",
          "operationId" : "getBillingDetails",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "Appointment id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Accesses the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/BillingDetailsDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Appointment not found"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to billing details if the user has this permission for the appointment provider.",
            "type" : "Billing"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/billing_details" : {
        "post" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves billing details for appointments",
          "description" : "Gets billing details for multiple appointments.",
          "operationId" : "getBillingDetails_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Appointment ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access the masked information without the right permission"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "object",
                    "description" : "Map of appointment id and BillingDetailsDto",
                    "example" : "{ { 1 : { \"noCharge\" : false, \"noShow\" : true, \"insurerId\" : 14 } } }"
                  }
                }
              }
            },
            "400" : {
              "description" : "No appointment ids have been supplied"
            },
            "500" : {
              "description" : "Timezone not set in Accuro"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to billing details if the user has this permission for the appointment provider.",
            "type" : "Billing"
          }
        }
      },
      "/v1/provider-portal/scheduler/sites" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves all sites",
          "description" : "Gets all sites.",
          "operationId" : "getSites_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SiteDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access to sites associated with an office the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/availability-templates/{templateId}" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves template availability",
          "description" : "Gets the specific availability template by the given template id.",
          "operationId" : "getTemplateAvailabilities",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "templateId",
            "in" : "path",
            "description" : "Template id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AvailabilityDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "No Template id specified"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/scheduler/scheduler-time-intervals" : {
        "get" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Retrieves scheduler time intervals of the specified providers or users",
          "description" : "Gets scheduler time intervals by provider ids or user ids. Provider id or user id must be provided. Multiple provider ids or user ids can be passed. The limitation of the maximum count of provider ids or user ids is 10.",
          "operationId" : "getTimeIntervals",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client, patient, or provider level authorization grant.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "query",
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          }, {
            "name" : "userId",
            "in" : "query",
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "Provider id or user id is required. The maximum count of provider ids allowed is 10. The maximum count of user ids allowed is 10. "
            },
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/TimeIntervalsDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ]
        }
      },
      "/v1/provider-portal/scheduler/reasons/{reasonId}" : {
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Updates appointment reason",
          "description" : "Updates appointment reason.",
          "operationId" : "updateReason",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "reasonId",
            "in" : "path",
            "description" : "Reason id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated appointment reason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentReasonDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if operation is successful",
                    "example" : true
                  }
                }
              }
            },
            "400" : {
              "description" : "Reason id does not match path"
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider associated with the appointment reason.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/statuses/{statusId}" : {
        "put" : {
          "tags" : [ "Schedule Endpoints - Provider" ],
          "summary" : "Updates appointment status",
          "description" : "Updates the appointment status.",
          "operationId" : "updateStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "statusId",
            "in" : "path",
            "description" : "Status id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "boolean",
                    "description" : "Returns true if update is successful",
                    "example" : true
                  }
                }
              }
            },
            "400" : {
              "description" : "Status name can not be null.\n\nStatus abbreviation can not be null.\n\nName must be at most 50 characters.\n\nAbbreviation must be at most 2 characters.\n\nThe provided Status does not match the specified resource."
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/selection-lists/address-types" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Retrieve all the types available for the patient address",
          "description" : "Get all the types available for the patient address",
          "operationId" : "getAddressTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "PATIENT_DEMOGRAPHICS_WRITE", "PATIENT_DEMOGRAPHICS_READ" ]
          } ]
        }
      },
      "/v1/provider-portal/selection-lists/chart-unlock-reasons" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Get all available patient chart unlock reasons.",
          "description" : "Retrieves all available patient chart unlock reasons.",
          "operationId" : "getChartUnlockReason",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.PatientChartLock.read" ]
          } ]
        }
      },
      "/v1/provider-portal/selection-lists/mask-removal-reasons" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Get all the reasons available for the mask removal",
          "description" : "Get all the reasons available for the mask removal.",
          "operationId" : "getMaskRemovalReasons",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Mask.read" ]
          } ]
        }
      },
      "/v1/provider-portal/selection-lists/referral-statuses" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Get all the statuses available for the referral orders",
          "description" : "Get all the statuses available for the referral orders.",
          "operationId" : "getReferralStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ]
        }
      },
      "/v1/provider-portal/selection-lists/referral-types" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Returns the Referral Types",
          "description" : "Returns the List of Referral Types for the referral order.",
          "operationId" : "getReferralTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If any required field is missing or not valid"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "String",
                    "example" : "ReferralType"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ]
        }
      },
      "/v1/provider-portal/selection-lists/waitlist-surgical-refused-reasons" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Retrieves all the surgical refused reasons for waitlist.",
          "description" : "Gets all the waitlist surgical refused reasons.",
          "operationId" : "getSurgicalRefusedReason",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Consumer unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/selection-lists/waitlist-surgical-types" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Retrieves all the surgical types for waitlist.",
          "description" : "Gets all the waitlist surgical types.",
          "operationId" : "getSurgicalTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Consumer unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/selection-lists/waitlist-body-areas" : {
        "get" : {
          "tags" : [ "Selection List Endpoints" ],
          "summary" : "Retrieve all the types available for the SWLBodyArea",
          "description" : "Get all the types available for the SWLBodyArea",
          "operationId" : "getWaitlistBodyArea",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/tasks/{taskId}/attachments" : {
        "get" : {
          "tags" : [ "TaskAttachment Endpoints" ],
          "summary" : "Retrieves a list of attachments.",
          "description" : "Get attachments for the task by taskId.",
          "operationId" : "getAttachmentByTaskId",
          "parameters" : [ {
            "name" : "taskId",
            "in" : "path",
            "description" : "The task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized access"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AttachmentDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "TaskAttachment Endpoints" ],
          "summary" : "Add, update, or remove attachments for the task.",
          "description" : "Currently only document attachments are allowed. Sending an empty body will remove all existing attachments.",
          "operationId" : "manageAttachments",
          "parameters" : [ {
            "name" : "taskId",
            "in" : "path",
            "description" : "The task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "A list of attachments",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AttachmentDto"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized access"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success"
            },
            "400" : {
              "description" : "Invalid input or unsupported item category"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.update" ]
          } ]
        }
      },
      "/v1/provider-portal/wait-room-entries" : {
        "get" : {
          "tags" : [ "Waitroom Endpoints" ],
          "summary" : "Retrieves waitroom entries.",
          "description" : "Retrieves the waitroom entries satisfying the given criteria.\nAll of the parameters are optional. \n All existing waitroom entries for the current day will be returned if none of the params are provided. If multiple filters are provided, they will be combined with AND operator. If start and end date are provided the the results between dates are displayed.",
          "operationId" : "getWaitRoomEntries",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "isCompleted",
            "in" : "query",
            "description" : "Wait room entries completed or in progress.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "providerId",
            "in" : "query",
            "description" : "Unique id of the provider.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "query",
            "description" : "Unique id of the patient",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "officeId",
            "in" : "query",
            "description" : "Office Id for which waitroom entries are requested.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "roomId",
            "in" : "query",
            "description" : "Unique id for the wait room.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "query",
            "description" : "Unique id for the appointment.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startDate",
            "in" : "query",
            "description" : "Starting date.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "endDate",
            "in" : "query",
            "description" : "End date.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WaitRoomEntryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY OR TRAFFIC_MANAGER with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/wait-room-entries/{id}" : {
        "get" : {
          "tags" : [ "Waitroom Endpoints" ],
          "summary" : "Retrieves waitroom entry.",
          "description" : "Retrieves wait room entry by id.",
          "operationId" : "getWaitRoomEntryById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "WaitRoom Id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Wait room entry not found."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitRoomEntryDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY OR TRAFFIC_MANAGER with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/documents" : {
        "post" : {
          "tags" : [ "Document Endpoints - Provider" ],
          "summary" : "Saves a document",
          "description" : "Creates a document by storing the document meta data and the contents in the database. The Role DOCUMENTS or EMR_VIRTUAL_CHART with Full access level authorize to access this endpoint.",
          "operationId" : "createDocument",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "type",
            "in" : "query",
            "description" : "Query parameter which tells document type is REFERRAL or not.\nIf 'Document Sub-Types' is enabled at Accuro, sub_folder_id and sub_folder could be passed.\n If 'Document From Field' is enabled at Accuro, from_id, from_type and from_name could be passed.",
            "schema" : {
              "type" : "string",
              "example" : "REFERRAL"
            }
          } ],
          "requestBody" : {
            "description" : "This endpoint request is of type `multipart/form-data` with two parts as mentioned below:\n 1. `details`: A JSON string containing the metadata of the document, represented by the `DocumentDto` object. This part is used to provide information such as the file name, patient ID, folder ID, and other related details.\n 2. `document`: The actual file( one or more) to be uploaded, provided as binary data. This part should contain the file content in binary format (e.g., a PDF or image file). \n \nThe request body would look like this in the postman client: \n \n![document](https://apidocs.dev.qhrtech.com/images/create-document.png) \n\nBelow example shows `DocumentDto` object which goes as the value for the`details` key ",
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "type" : "object",
                  "example" : "{\n    \"file_name\": \"Custom Test.pdf\", \n    \"folder_id\": 3,\n    \"priority\": \"3\",\n    \"patient_id\": 377,\n    \"description\": \"This is my description\"\n    \"received_date\": \"2024-08-09\",\n    \"date_created\": \"2024-08-19\",\n    \"from_id\": -1,\n    \"sub_folder_id\": 1,\n    \"from_name\": \"Dr David Hsu\",\n    \"from_type\": \"OneTimeRecipient\",\n    \"reviews\": [{\n      \"physician_id\": 25874,\n      \"reviewDate\": \"\"\n    }]\n }"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "If access is denied or preference not set for any field"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If there are field or business validation errors"
            },
            "413" : {
              "description" : "If document uploaded is more than 20MB"
            },
            "200" : {
              "description" : "Success. Returns document id",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "integer",
                      "description" : "document id",
                      "example" : 1
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the reviewing providers.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/documents/{documentId}/reviews" : {
        "get" : {
          "tags" : [ "Document Endpoints - Provider" ],
          "summary" : "Retrieves document reviews",
          "description" : "Gets a set of all document reviews by document id.",
          "operationId" : "getDocumentReviews",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "documentId",
            "in" : "path",
            "description" : "Document ID",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/DocumentReviewDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/documents/file-types" : {
        "get" : {
          "tags" : [ "Document Endpoints - Provider" ],
          "summary" : "Retrieves file types",
          "description" : "Gets a set of all existing file types.",
          "operationId" : "getFileTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/FileTypeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/documents/{documentId}" : {
        "get" : {
          "tags" : [ "PatientDocument Endpoints" ],
          "summary" : "Retrieves the contents of the patient's document",
          "description" : "Retrieves the contents of the document by the given document id and patient id. The media type of the file depends upon the file extension. By default it is application/octet-stream. For pdf file, it is application/pdf and so on.",
          "operationId" : "getDoc",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "documentId",
            "in" : "path",
            "description" : "The document id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success, the file to be downloaded",
              "content" : {
                "application/pdf" : {
                  "schema" : {
                    "type" : "string",
                    "format" : "binary",
                    "example" : "Binary content of the file"
                  }
                }
              }
            },
            "404" : {
              "description" : "Document not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/documents" : {
        "get" : {
          "tags" : [ "PatientDocument Endpoints" ],
          "summary" : "Retrieves patient's documents",
          "description" : "Retrieves all the documents of the patient, filtered by folder and/or sub type if provided.",
          "operationId" : "getDocuments",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "folder",
            "in" : "query",
            "description" : "Folder to filter the results",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "subtype",
            "in" : "query",
            "description" : "Sub type to filter the results",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/DocumentDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/documents/folders" : {
        "get" : {
          "tags" : [ "PatientDocument Endpoints" ],
          "summary" : "Retrieves patient's folders",
          "description" : "Retrieves path types(folders) including sub types(sub folders) of the patient.",
          "operationId" : "getPatientFolders",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientFoldersDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "DOCUMENTS_READ", "DOCUMENTS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "DOCUMENTS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/diagnosis-statuses" : {
        "get" : {
          "tags" : [ "DiagnosisStatus Endpoints" ],
          "summary" : "Retrieves all diagnosis statuses",
          "description" : "Gets a set of diagnosis statuses.",
          "operationId" : "getAllDiagnosisStatuses",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/DiagnosisStatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/diagnosis-statuses/{statusId}" : {
        "get" : {
          "tags" : [ "DiagnosisStatus Endpoints" ],
          "summary" : "Retrieves the diagnosis status",
          "description" : "Gets the diagnosis status via the specified status id.",
          "operationId" : "getDiagnosisStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "statusId",
            "in" : "path",
            "description" : "DiagnosisStatus id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not Found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DiagnosisStatusDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/history-regular/{historyRegularId}" : {
        "get" : {
          "tags" : [ "HistoryRegular Endpoints" ],
          "summary" : "Retrieves history item by id",
          "description" : "Retrieves the history regular item for a given history regular sub type id.",
          "operationId" : "getByItemId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "historyRegularId",
            "in" : "path",
            "description" : "The history regular id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/HistoryRegularItemDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource doesn't exist with the given id"
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY AND EMR_MEDICAL_HISTORY with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/history-regular" : {
        "get" : {
          "tags" : [ "HistoryRegular Endpoints" ],
          "summary" : "Retrieves history regular items",
          "description" : "Retrieves history regular sub type items associated to the specified type id.\n\nRetrieves all sub type items if no type is specified.\n",
          "operationId" : "getForHistoryItems",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "historyTypeId",
            "in" : "query",
            "description" : "The history type id",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/HistoryRegularItemDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY AND EMR_MEDICAL_HISTORY with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/history-types" : {
        "get" : {
          "tags" : [ "HistoryType Endpoints" ],
          "summary" : "Retrieves all history types",
          "description" : "Retrieves all medical history types.\n\nNote: It is possible to have multiple history types with the same name if they were created by two instances of Accuro at the same time. Some actions that use history types are performed by name and may have inconsistent results.\n",
          "operationId" : "getAll_3",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/HistoryTypeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/history-types/{typeId}" : {
        "get" : {
          "tags" : [ "HistoryType Endpoints" ],
          "summary" : "Retrieves history type by id",
          "description" : "Retrieves the history type by the given history type id.",
          "operationId" : "getById_4",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "typeId",
            "in" : "path",
            "description" : "The history type id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "The specified history type doesn't exist"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/HistoryTypeDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/no-known-allergies/{allergyId}" : {
        "get" : {
          "tags" : [ "NoKnownAllergy Endpoints" ],
          "summary" : "Retrieves the no known allergy",
          "description" : "Retrieves a single no known allergy by the given id for the patient.",
          "operationId" : "getByNoKnownAllergyId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "allergyId",
            "in" : "path",
            "description" : "The no known allergy id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the records does not exist on the server or not found."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/NoKnownAllergyDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/no-known-allergies" : {
        "get" : {
          "tags" : [ "NoKnownAllergy Endpoints" ],
          "summary" : "Retrieves no known allergies",
          "description" : "Retrieves a set of no known allergies for the patient. There can be only 1 no known allergy for each allergy type. Results are ascending ordered by id.",
          "operationId" : "getForPatient",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "The patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "allergyType",
            "in" : "query",
            "description" : "The allergy type",
            "schema" : {
              "type" : "string",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "For the invalid allergy type."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/NoKnownAllergyDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/allergies" : {
        "get" : {
          "tags" : [ "PatientAllergy Endpoints" ],
          "summary" : "Retrieves the patient allergies",
          "description" : "Retrieves all the allergies for the given patient. Results are ascending ordered by id. The fields, patientReaction and reactionDescription, do not represent the actual allergy reactions. The allergy reactions of the allergy can be retrieved through its own endpoint.",
          "operationId" : "getAllPatientAllergies",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "allergyType",
            "in" : "query",
            "description" : "Allergy type",
            "schema" : {
              "type" : "string",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientAllergyDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/allergies/{patientAllergyId}/comments" : {
        "get" : {
          "tags" : [ "PatientAllergy Endpoints" ],
          "summary" : "Retrieves allergy comments",
          "description" : "Retrieves all comments associated to the patient allergy.",
          "operationId" : "getAllergyComments",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "patientAllergyId",
            "in" : "path",
            "description" : "Allergy id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "The patient allergy doesn't exist or not associated to the patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AllergyCommentDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/allergies/{patientAllergyId}" : {
        "get" : {
          "tags" : [ "PatientAllergy Endpoints" ],
          "summary" : "Retrieves the allergy with the given patient and allergy ids",
          "description" : "Retrieves the allergy with the given patient and allergy ids.The fields, patientReaction and reactionDescription, do not represent the actual allergy reactions. The allergy reactions of the allergy can be retrieved through its own endpoint.",
          "operationId" : "getPatientAllergy",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "patientAllergyId",
            "in" : "path",
            "description" : "Allergy id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the requested resource is not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientAllergyDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/allergies/{patientAllergyId}/reactions" : {
        "get" : {
          "tags" : [ "PatientAllergy Endpoints" ],
          "summary" : "Retrieves reactions for the allergy",
          "description" : "Retrieves all reactions associated to the patient allergy.",
          "operationId" : "getReactionsForPatientAllergy",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "patientAllergyId",
            "in" : "path",
            "description" : "Allergy id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "The patient does not have the allergy"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AllergyCommentDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/diagnoses/{diagnosisId}" : {
        "get" : {
          "tags" : [ "PatientDiagnosis Endpoints" ],
          "summary" : "Retrieves the patient diagnosis by the given ids",
          "description" : "Retrieves the single patient diagnosis by the given diagnosis id associated to the given patient id.",
          "operationId" : "getByDiagnosisId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "diagnosisId",
            "in" : "path",
            "description" : "Diagnosis id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "The diagnosis doesn't exist or is not associated to the patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientDiagnosisDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/diagnoses" : {
        "get" : {
          "tags" : [ "PatientDiagnosis Endpoints" ],
          "summary" : "Retrieves patient diagnoses for the patient",
          "description" : "Retrieves all active patient diagnoses for the given patient id.",
          "operationId" : "getForPatient_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientDiagnosisDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/diagnoses/{diagnosisId}/histories/{historyId}" : {
        "get" : {
          "tags" : [ "PatientDiagnosisHistory Endpoints" ],
          "summary" : "Retrieves the patient diagnosis history by each id",
          "description" : "This PatientDiagnosisHistoryEndpoint  is designed to retrieve patient diagnosis history\n  records.\n \n  <p>\n  Also, this endpoint represents item history of \"History Of Problems\" in Accuro.\n  </p>\n \n  <p>\n  Steps to retrieve this data from Accuro:\n  <ol>\n  <li>Log into Accuro</li>\n  <li>Click \"EMR\" on the left panel</li>\n  <li>Click \"Encounter Note\" tab</li>\n  <li>Go to \"History Of Problems\"</li>\n  <li>Click Add or Edit button</li>\n  <li>Select any diagnoses. If there is none then create one and edit it to generate a history\n  record.</li>\n  <li>Click History button</li>\n  </ol>\n  </p>",
          "operationId" : "getById_5",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "diagnosisId",
            "in" : "path",
            "description" : "Diagnosis id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "historyId",
            "in" : "path",
            "description" : "History id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Resource not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientDiagnosisHistoryDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/diagnoses/{diagnosisId}/histories" : {
        "get" : {
          "tags" : [ "PatientDiagnosisHistory Endpoints" ],
          "summary" : "Retrieves the patient diagnosis history by each id",
          "description" : "Retrieves the patient diagnosis history records for the given patient id and the patient diagnosis id.\nThe results are order by the id in the descending order.\n",
          "operationId" : "getForPatientDiagnosis",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Patient authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "diagnosisId",
            "in" : "path",
            "description" : "Diagnosis id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientDiagnosisHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/history-items/{historyItemId}" : {
        "get" : {
          "tags" : [ "PatientHistory Endpoints" ],
          "summary" : "Retrieves patient history item by id",
          "description" : "These endpoints expose patient history bands. These are categorized into 4 different types:\n Regular, Free Text, URL and Tracking HistoryType's as an each distinctive history feature\n type. There can be multiple bands for each type. For example, type REGULAR has\n FamilyHistory/Lifestyle/SurgicalHistory. Each patient can have multiple records for each type\n which are being referred as Patient history item(s).\n\n <p>\n The patient history item(s) is/are represented by its corresponding Dto. Please refer each of\n them below <br>\n PatientHistoryRegularDto <br>\n PatientHistoryTextDto <br>\n PatientHistoryUrlDto <br>\n PatientHistoryTrackingDto <br>\nThis Endpoint Retrieves a patient history item by the given id. The history type is mandatory ",
          "operationId" : "getPatientHistoryItemById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyItemId",
            "in" : "path",
            "description" : "History item id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyType",
            "in" : "query",
            "description" : "History type",
            "required" : true,
            "schema" : {
              "type" : "string",
              "description" : "History type enum. Determines different custom history types",
              "enum" : [ "REGULAR", "FREE_TEXT", "URL", "TRACKING" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "oneOf" : [ {
                        "$ref" : "#/components/schemas/PatientHistoryRegularDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTextDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTrackingDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryUrlDto"
                      } ]
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "No history type provided"
            },
            "404" : {
              "description" : "Not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDICAL_HISTORY with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/history-items" : {
        "get" : {
          "tags" : [ "PatientHistory Endpoints" ],
          "summary" : "Retrieves patient history items",
          "description" : "These endpoints expose patient history bands. These are categorized into 4 different types:\n Regular, Free Text, URL and Tracking {@link HistoryType}'s as an each distinctive history feature\n type. There can be multiple bands for each type. For example, type REGULAR has\n FamilyHistory/Lifestyle/SurgicalHistory. Each patient can have multiple records for each type\n which are being referred as Patient history item(s).\n\n <p>\n The patient history item(s) is/are represented by its corresponding Dto. Please refer each of\n them below <br>\n PatientHistoryRegularDto <br>\n PatientHistoryTextDto <br>\n PatientHistoryUrlDto <br>\n PatientHistoryTrackingDto <br>\n </p> This Endpoint Retrieves all the patient history items filtering by the history type specified. If no history type specified then all types of existing patient history items will be returned.",
          "operationId" : "getPatientHistoryItems",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyType",
            "in" : "query",
            "description" : "History type",
            "schema" : {
              "type" : "string",
              "description" : "History type enum. Determines different custom history types",
              "enum" : [ "REGULAR", "FREE_TEXT", "URL", "TRACKING" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "oneOf" : [ {
                        "$ref" : "#/components/schemas/PatientHistoryRegularDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTextDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTrackingDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryUrlDto"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDICAL_HISTORY with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/history-items/{historyItemId}/histories/{historyId}" : {
        "get" : {
          "tags" : [ "PatientHistoryItemHistory Endpoints" ],
          "summary" : "Retrieves history item record for the patient",
          "description" : " <p>\n There are 4 types of patient history item as follows:\n <ul>\n <li>REGULAR</li>\n <li>TRACKING</li>\n <li>URL</li>\n <li>FREE_TEXT</li>\n </ul>\n A specific type is required to retrieve the patient history item history records through these\n endpoints.\n </p>\n \n <p>\n Also, Regular type has some built-in types as follow:\n <ul>\n <li>Family History</li>\n <li>Life Style</li>\n <li>Surgical History</li>\n </ul>\n So if you like to retrieve those band's histories should use the historyType query param\n as Regular\n </p>\n \n <p>\n The result entities are varying depending on the provided history types. The results have a base\n entity as\n AbstractPatientHistoryItemHistoryDto.\n The different entities are as follows:\n <ul>\n <li>REGULAR -\n PatientHistoryRegularHistoryDto</li>\n <li>TRACKING -\n PatientHistoryTrackingHistoryDto</li>\n <li>URL -\n PatientHistoryUrlHistoryDto</li>\n <li>FREE_TEXT -\n PatientHistoryTextHistoryDto</li>\n </ul>\n </p>Retrieves a single record of the patient's history item.",
          "operationId" : "getByHistoryId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyItemId",
            "in" : "path",
            "description" : "History item id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyId",
            "in" : "path",
            "description" : "History item record id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyType",
            "in" : "query",
            "description" : "History type",
            "required" : true,
            "schema" : {
              "type" : "string",
              "description" : "History type enum. Determines different custom history types",
              "enum" : [ "REGULAR", "FREE_TEXT", "URL", "TRACKING" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "oneOf" : [ {
                        "$ref" : "#/components/schemas/PatientHistoryRegularHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTextHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTrackingHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryUrlHistoryDto"
                      } ]
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "The history type is not provided"
            },
            "404" : {
              "description" : "The history type is invalid or history item is not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/history-items/{historyItemId}/histories" : {
        "get" : {
          "tags" : [ "PatientHistoryItemHistory Endpoints" ],
          "summary" : "Retrieves records of patient's history item",
          "description" : "Retrieves the records for the patient history item. Sorting of the records will depend upon HistoryType: \n\n`REGULAR`: descending order of the record modified date.\n\n`TRACKING`: descending order of the tracking Id. \n\n`URL`: descending order of the patient history Id.\n\n`FREE_TEXT`: descending order of the patient history Id. \n\n",
          "operationId" : "getForPatientHistoryItem",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyItemId",
            "in" : "path",
            "description" : "History item id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "historyType",
            "in" : "query",
            "description" : "History type",
            "required" : true,
            "schema" : {
              "type" : "string",
              "description" : "History type enum. Determines different custom history types",
              "enum" : [ "REGULAR", "FREE_TEXT", "URL", "TRACKING" ]
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "oneOf" : [ {
                        "$ref" : "#/components/schemas/PatientHistoryRegularHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTextHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryTrackingHistoryDto"
                      }, {
                        "$ref" : "#/components/schemas/PatientHistoryUrlHistoryDto"
                      } ]
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "No history type is provided"
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "PATIENT_DIAGNOSTICS with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/immunizations" : {
        "get" : {
          "tags" : [ "PatientImmunization Endpoints" ],
          "summary" : "Retrieves all the patient immunizations",
          "description" : "Retrieves all the patient immunizations for the given patient.",
          "operationId" : "getAllImmunizations",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatientImmunizationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/immunizations/{immunizationId}" : {
        "get" : {
          "tags" : [ "PatientImmunization Endpoints" ],
          "summary" : "Retrieves immunization for the patient",
          "description" : "Retrieves the patient immunization for the given patient and immunization id.",
          "operationId" : "getImmunization",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "immunizationId",
            "in" : "path",
            "description" : "Immunization id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If immunization is not found for the patient"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PatientImmunizationDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/immunization-schedules/{id}" : {
        "get" : {
          "tags" : [ "PatientImmunizationSchedule Endpoints" ],
          "summary" : "Retrieves immunization schedule by id",
          "description" : "Retrieves one immunization schedule of the given patient with the specified immunization schedule id.",
          "operationId" : "getImmunizationScheduleById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Immunization schedule id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "The immunization is not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ImmunizationScheduleDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/immunization-schedules" : {
        "get" : {
          "tags" : [ "PatientImmunizationSchedule Endpoints" ],
          "summary" : "Retrieves immunization schedules for the patient",
          "description" : "Retrieves all the immunization schedules for the given patient.",
          "operationId" : "getImmunizationSchedules",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ImmunizationScheduleDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/{prescriptionId}" : {
        "get" : {
          "tags" : [ "Prescription Endpoints" ],
          "summary" : "Retrieves a prescription for the patient",
          "description" : "Gets the prescription for the given patient with the specified prescription id.\n\nThe **LimitedUseCodeDto** variable is specific to **ON** province, which is not included for the other provinces. If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect on prescriptions. ",
          "operationId" : "getByPrescriptionId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "prescriptionId",
            "in" : "path",
            "description" : "Prescription id.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCcddMapping",
            "in" : "query",
            "description" : "includeCcddMapping.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Prescription id does not exist or not associated to the patient id"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions" : {
        "get" : {
          "tags" : [ "Prescription Endpoints" ],
          "summary" : " Retrieves the prescriptions for the patient",
          "description" : "Gets all prescriptions for the given patient.\n\nThe **LimitedUseCodeDto** variable is **ON** province specific and it is not included for the other provinces. Note: This endpoint is deprecated. Check the version-2 to access the similar resources.   If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect on prescriptions.",
          "operationId" : "getForPatient_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "external",
            "in" : "query",
            "description" : "Include only external medications",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCcddMapping",
            "in" : "query",
            "description" : "Include includeCcddMapping or not",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                    }
                  }
                }
              }
            }
          },
          "deprecated" : true,
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/{prescriptionId}/order-statuses" : {
        "post" : {
          "tags" : [ "Prescription Endpoints" ],
          "summary" : "Updates order status for the given prescription of the given patient.",
          "description" : "Updates order status for the given prescription of the given patient. Prescription status history will be created only if there is an Eprescribe cancel request response with 'Approve' status linked to the prescription.",
          "operationId" : "updatePrescriptionOrderStatus",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant or client credentials with first party QHR scope",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "prescriptionId",
            "in" : "path",
            "description" : "Prescription id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "StatusHistory data transfer object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusHistoryDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Prescription id does not exist or not associated to the patient id"
            },
            "200" : {
              "description" : "Ok"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Prescription.update" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access to update prescription order status that are assigned a provider the user has this permission for.",
            "type" : "EMR"
          }
        }
      },
      "/v2/provider-portal/patients/{patientId}/prescriptions" : {
        "get" : {
          "tags" : [ "Patient PrescriptionV2 Endpoints" ],
          "summary" : " Retrieves all prescriptions for a patient",
          "description" : "Gets all prescriptions for a given patient. The **LimitedUseCodeDto** variable is **ON** province specific and it is not included for the other provinces. Except Patient ID, all the parameters are optional. All prescriptions follow Accuro  permissions with the exception of external prescriptions.  If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect on prescriptions.",
          "operationId" : "getForPatient_3",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "external",
            "in" : "query",
            "description" : "Include only external medications. To include both internal and external records, keep the parameter null.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "Specifies the unique order id of the next page of data (exclusive). Typically this is the {@code EnvelopeDto.lastId} from the last page of data.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "Default page size is 25. The size must be 0 < pageSize <= 50. If the size is not provided or less than 1 it will be set the default size i.e 25. If it is over 50 it will set to the maximum size which is 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCcddMapping",
            "in" : "query",
            "description" : "Boolean value. Results should included ccdd mapping or not.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/scheduled-vaccines" : {
        "get" : {
          "tags" : [ "PatientScheduledVaccines Endpoints" ],
          "summary" : "Retrieves the scheduled vaccines for the patient",
          "description" : "Gets the scheduled vaccines for the given patient id.",
          "operationId" : "getByPatientId_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Patient not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ScheduleVaccineDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/patients/{patientId}/immunization-schedules/{scheduleId}/scheduled-vaccines" : {
        "get" : {
          "tags" : [ "PatientScheduledVaccines Endpoints" ],
          "summary" : "Retrieves the scheduled vaccines",
          "description" : "Gets the scheduled vaccines for the given schedule id.",
          "operationId" : "getByScheduleId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "scheduleId",
            "in" : "path",
            "description" : "Schedule id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Schedule cannot be found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ScheduleVaccineDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/prescriptions" : {
        "get" : {
          "tags" : [ "Prescription Endpoints" ],
          "summary" : " Retrieves all prescriptions for a patient",
          "description" : "Retrieves all prescriptions for a given patient. The **LimitedUseCodeDto** variable is **ON** province specific and it is not included for the other provinces. All the parameters are optional. All prescriptions follow Accuro  permissions with the exception of external prescriptions.  If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect on prescriptions.",
          "operationId" : "getPrescriptions",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "query",
            "description" : "Patient id",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "rxUuid",
            "in" : "query",
            "description" : "Prescription uuid",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "external",
            "in" : "query",
            "description" : "Include only external medications. To include both internal and external records, keep the parameter null.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "The unique row number(exclusive) for the list of records of the next page. In other words, this id specifies, the next set of records returned by API, would have row number greater than this startingId. For the very first request, this field can be left null or 0. For the subsequent requests, the value for this  field should be obtained from the lastId {@code EnvelopeDto.lastId} field of the data received in the previous request. The last id is the row number of the last record in the list.  The records are arranged in the descending order of their created date.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "Default page size is 25. The size must be 0 < pageSize <= 50. If the size is not provided or less than 1 it will be set the default size i.e 25. If it is over 50 it will set to the maximum size which is 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCcddMappings",
            "in" : "query",
            "description" : "The flag if ccdd mappings are included in return",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/prescription-favorites" : {
        "get" : {
          "tags" : [ "Prescription Favorite Endpoints" ],
          "summary" : "Retrieves prescription favorites",
          "description" : "This endpoint collection is designed to retrieve prescription favorite information. User can save\n many prescriptions under one favorite so PrescriptionFavoriteDto has the list of\n prescription id.\n \n <p>\n How to create new prescription favorite\n <ul>\n <li>Run Accuro</li>\n <li>Log in</li>\n <li>Select patient</li>\n <li>Go to EMR</li>\n <li>Go to Encounter Notes</li>\n <li>Click Yellow Star symbol under Active/External Medication</li>\n <li>Click Green Plus(+) symbol in the pop up panel</li>\n <li>Type title</li>\n <li>Click Green Plus(+) symbol to add prescription in the favorite</li>\n </ul>\n </p>Retrieves all prescription favorites for the logged in user.",
          "operationId" : "getAll_4",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionFavoriteDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/prescription-favorites/{favoriteId}" : {
        "get" : {
          "tags" : [ "Prescription Favorite Endpoints" ],
          "summary" : "Retrieves prescription favorite",
          "description" : "Retrieves a prescription favorite for the given id.",
          "operationId" : "getById_6",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "favoriteId",
            "in" : "path",
            "description" : "favorite id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionFavoriteDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/prescription-favorites/{favoriteId}/prescriptions/{rxId}" : {
        "get" : {
          "tags" : [ "Prescription Favorite Endpoints" ],
          "summary" : "Retrieves a prescription for a favorite id and a prescription id ",
          "description" : "Retrieves a prescription for the given favorite id and the given prescription id.",
          "operationId" : "getPrescriptionByPrescriptionId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "favoriteId",
            "in" : "path",
            "description" : "favorite id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "rxId",
            "in" : "path",
            "description" : "prescription id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/prescription-favorites/{favoriteId}/prescriptions" : {
        "get" : {
          "tags" : [ "Prescription Favorite Endpoints" ],
          "summary" : "Retrieves prescriptions for a favorite id",
          "description" : "Retrieves all prescriptions for the given favorite id.",
          "operationId" : "getPrescriptionsByFavoriteId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "favoriteId",
            "in" : "path",
            "description" : "favorite id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionMedicationDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/{prescriptionId}/histories/{historyId}" : {
        "get" : {
          "tags" : [ "PrescriptionHistory Endpoints" ],
          "summary" : " Retrieves a prescription history entry by id",
          "description" : " This endpoint collection is designed to retrieve prescription history entry for patients.\n <p>\n Steps to retrieve this data from Accuro:\n <ol>\n <li>Log into Accuro</li>\n <li>Click \"EMR\" on the left panel</li>\n <li>Click \"Encounter Note\" tab</li>\n <li>Create a record in \"Active Medication\"</li>\n <li>Click \"Medication\" tab on the top</li>\n <li>Right click over the prescription you may want to change</li>\n <li>Do \"Edit\" > \"SIG\" or \"Change Status\"</li>\n <li>Double click the prescription</li>\n <li>Click \"Other\" tab</li>\n <li>Find your edit on \"Change History\" tab</li>\n </ol>\n </p>This Endpoint Gets a prescription history entry for a given history id. All results follow Accuro permissions with the exception of external prescriptions. If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect which prescriptions are retrieved.",
          "operationId" : "getByHistoryId_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "prescriptionId",
            "in" : "path",
            "description" : "Prescription id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "historyId",
            "in" : "path",
            "description" : "History id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescription histories for prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/histories" : {
        "get" : {
          "tags" : [ "PrescriptionHistory Endpoints" ],
          "summary" : " Retrieves prescriptions history for a patient",
          "description" : "This Endpoint Gets all prescriptions history for the given patient. If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect on prescriptions.",
          "operationId" : "getByPatientId_2",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescription histories for prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/{prescriptionId}/histories" : {
        "get" : {
          "tags" : [ "PrescriptionHistory Endpoints" ],
          "summary" : " Retrieves prescription history by prescription id",
          "description" : "Gets prescription history for a given prescription id. If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect which prescriptions are retrieved.",
          "operationId" : "getByPrescriptionId_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "prescriptionId",
            "in" : "path",
            "description" : "Prescription id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PrescriptionHistoryDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescription histories for prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/patients/{patientId}/prescriptions/{prescriptionId}/histories/summaries" : {
        "get" : {
          "tags" : [ "PrescriptionHistory Endpoints" ],
          "summary" : " Retrieves prescription history summary by prescription id",
          "description" : "Gets prescription history summary for a prescription. If the checkbox 'Exclude Prescriptions from EMR Provider Permissions' under global security settings is checked, permissions will have no effect which prescriptions are retrieved.",
          "operationId" : "getSummary",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "path",
            "description" : "Patient id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "prescriptionId",
            "in" : "path",
            "description" : "Prescription id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to prescription histories for prescriptions prescribed by a provider the user has this permission for (if Accuro is configured to enforce provider permissions for prescriptions).",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/vaccines/{vaccineId}" : {
        "get" : {
          "tags" : [ "Vaccine Endpoints" ],
          "summary" : "Retrieves the single vaccine by vaccine id",
          "description" : "Gets the single vaccine by the given vaccine id.",
          "operationId" : "getVaccineById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "vaccineId",
            "in" : "path",
            "description" : "Vaccine id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/VaccineDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Vaccine not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/vaccines" : {
        "get" : {
          "tags" : [ "Vaccine Endpoints" ],
          "summary" : "Retrieves vaccines",
          "description" : "Gets all active vaccines.",
          "operationId" : "getVaccines",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/VaccineDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "EMR_MEDS_READ", "EMR_MEDS_WRITE" ]
          } ],
          "x-accuroRoles" : [ "EMR_MEDS with access level: READ_ONLY " ]
        }
      },
      "/v1/pharmacist-claim-statuses" : { },
      "/v1/pharmacist-claim-statuses/{guid}" : { },
      "/v1/provider-portal/conversation-contacts" : { },
      "/v1/provider-portal/conversation-contacts/{contactId}" : { },
      "/v1/provider-portal/conversation-contacts/{contactId}/users" : { },
      "/v1/provider-portal/conversation-contacts/{contactId}/users/{userId}" : { },
      "/v1/provider-portal/conversations/{id}/archive" : { },
      "/v1/provider-portal/conversations" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages/{messageId}/attachments" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages/{messageId}/attachments/{attachmentId}/contents" : { },
      "/v1/provider-portal/conversations/{id}/participants" : { },
      "/v1/provider-portal/conversations/{id}" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages/{messageId}" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages/{messageId}/attachments/{attachmentId}" : { },
      "/v1/provider-portal/conversations/{conversationId}/messages/{messageId}/statuses" : { },
      "/v1/provider-portal/conversations/{conversationId}/external-patients" : { },
      "/v1/provider-portal/conversations/{id}/unarchive" : { },
      "/v1/provider-portal/conversations/{conversationId}/external-patients/{externalPatientId}" : { },
      "/v1/provider-portal/conversations/{conversationId}/patients/{patientId}" : { },
      "/v1/provider-portal/conversations/{conversationId}/medications/{prescriptionMedicationId}" : { },
      "/v1/provider-portal/conversations/{conversationId}/task-groups/{taskGroupUuid}" : { },
      "/v1/provider-portal/unmatched-patients" : { },
      "/v1/provider-portal/unmatched-patients/{id}" : { },
      "/v1/provider-portal/dispense-notifications" : { },
      "/v1/provider-portal/dispense-notifications/{id}" : { },
      "/v1/provider-portal/erx-cancel-requests/{cancelRequestId}/responses" : { },
      "/v1/provider-portal/erx-jobs" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/histories" : { },
      "/v1/provider-portal/erx-jobs/{jobId}" : { },
      "/v1/provider-portal/erx-jobs/{id}/histories" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/histories/{id}" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/prescriptions" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/prescriptions/{id}" : { },
      "/v1/provider-portal/erx-job-outcomes" : { },
      "/v1/provider-portal/erx-job-outcomes/{outcomeId}" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/tasks" : { },
      "/v1/provider-portal/erx-jobs/{jobId}/tasks/{id}" : { },
      "/v1/provider-portal/erx-job-types" : { },
      "/v1/provider-portal/eprescribe-order-statuses" : { },
      "/v1/provider-portal/erx-outcome-codes" : { },
      "/v1/provider-portal/erx-job-tasks/{id}" : { },
      "/v1/provider-portal/erx-cancel-requests" : { },
      "/v1/provider-portal/erx-cancel-requests/{localId}" : { },
      "/v1/provider-portal/external-patients" : { },
      "/v1/provider-portal/external-patients/{id}" : { },
      "/v1/provider-portal/renewal-requests" : { },
      "/v1/provider-portal/renewal-requests/{id}" : { },
      "/v1/provider-portal/renewal-request-groups" : { },
      "/v1/provider-portal/renewal-request-groups/{id}" : { },
      "/v1/provider-portal/renewal-request-responses/{responseId}" : { },
      "/v1/provider-portal/referral-orders" : {
        "get" : {
          "tags" : [ "Referral Order Endpoints" ],
          "summary" : "Retrieves Referral orders",
          "description" : "Gets all Referral orders for the specific dates and the reconciled flag.The results will be provided in paginated form. To request the next page, the startingId should be set to the {@code EnvelopeDto.lastId} of the previous page. The order with the startingId will be excluded. The last id is the unique id of the referral order and the last record of the page. The results will be sorted by this id. Total is the number of all the records including the current page. The {@code count} is  the number of the records in the current page and will be reset to 0 in the last page. \n lastModifiedStart and lastModifiedEnd if provided, should be provided together.\n The difference between lastModifiedStart and lastModifiedEnd should not be more than 30 days.\n lastModifiedStart and lastModifiedEnd will be compared against last modified of referral or repliforms (whichever is existing and greater).\nif lastModifiedStart is greater than lastModifiedEnd, their values will be swapped.\nIf values of lastModifiedStart and lastModifiedEnd are passed as date only, the time part will be rounded to zero, \n e.g., 2022-11-25 will be rounded to 2022-11-25T00:00:00.000 \n",
          "operationId" : "getFromDate",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fromDate",
            "in" : "query",
            "description" : "The specific date when the referral orders occurred. API will return the orders on or after this date.",
            "schema" : {
              "type" : "string"
            },
            "example" : "2018-10-01"
          }, {
            "name" : "lastModifiedStart",
            "in" : "query",
            "description" : "The last updated or modified date of orders. API will return the orders matching the results on or after this date.",
            "schema" : {
              "type" : "string"
            },
            "example" : "2022-11-25T15:44:28.000"
          }, {
            "name" : "lastModifiedEnd",
            "in" : "query",
            "description" : "The last updated or modified date of orders. API will return the orders matching the results on or before this date.",
            "schema" : {
              "type" : "string"
            },
            "example" : "2022-11-25T15:44:28.000"
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "Specifies where to start the next page of data. Typically this is the **EnvelopeDto#getLastId()** from the last page of data.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages requested. Default page size is 50. Must be 0 < pageSize < 50, otherwise the default page size, 10, will be set.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "reconciled",
            "in" : "query",
            "description" : "The flag indicates if the referral orders are reconciled or not. If true it will return all reconciled referral orders. Otherwise it will return all non-reconciled referral orders. If the flag is not provided, it will return both reconciled/non-reconciled referral orders.",
            "schema" : {
              "type" : "boolean"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ReferralOrderDto"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "If schema version is not supported"
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to referral orders for providers the user has this permission for.",
            "type" : "EMR"
          }
        },
        "post" : {
          "tags" : [ "Referral Order Endpoints" ],
          "summary" : "Saves Referral Order",
          "description" : "A simple order or a referral order from generate letters can be created, but creation of requisition order is not supported through this endpoint. Requisition has chartItemType value 3. However we can update Requisition through PUT endpoint. \n \nThese fields are mandatory to create any order:\n<ul>\n<li>patientId</li>\n<li>orderStatus</li>\n<li>type</li>\n</ul>\nBelow mentioned fields would be auto-populated by the API: \n<ul>\n<li>lastModified</li>\n<li>repliformLastModified</li>\n<li>modifiedByUser</li>\n<li>appointmentId</li>\n</ul>\nFor the referral order from generated letter, apart from the mandatory fields,only other mandatory field is fax log id. Api will populate all other relevant fields as mentioned below: \n<ul>\n<li>order</li>\n<li>primaryRecipient</li>\n<li>ccRecipients</li>\n<li>chartItemId</li>\n<li>chartItemType</li>\n<li>type</li>\n<li>description</li>\n<li>contactType</li>\n<li>contactId</li>\n</ul>\nFor the rest of the details, refer to description of each field at ReferralOrderDto object.\n\nRead Only fields would be ignored and not set.Currently creation of the order of outbound e-referral is not supported. \n",
          "operationId" : "create_17",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReferralOrderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Access forbidden without the right permission or token without service user."
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns the referral order id",
                    "example" : 1001
                  }
                }
              }
            },
            "400" : {
              "description" : "If the referral order is not given. And if the given order is for outbound e-referral."
            },
            "500" : {
              "description" : "Timezone not set in Accuro."
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_WRITE" ]
          } ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/referral-orders/{id}" : {
        "get" : {
          "tags" : [ "Referral Order Endpoints" ],
          "summary" : "Retrieves Referral order",
          "description" : "Gets Referral order by the given id.",
          "operationId" : "getById_15",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ReferralOrderDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_READ", "LETTER_WRITE" ]
          } ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for the provider of the referral order.",
            "type" : "EMR"
          }
        },
        "put" : {
          "tags" : [ "Referral Order Endpoints" ],
          "summary" : "Updates Referral Order",
          "description" : "Update referral order.\n<p>\nOnly specified fields below can be updated, otherwise Bad Request (400 error) \nwill be returned.\n<ul>\n<li>physicianId</li>\n<li>order</li>\n<li>status</li>\n<li>type</li>\n<li>description</li>\n<li>specific</li>\n<li>location</li>\n<li>bookedDate</li>\n<li>contactId</li>\n<li>contactType</li>\n<li>appointmentDatetime</li>\n<li>appointmentTime</li>\n<li>reconciled</li>\n<li>faxLogId</li>\n</ul>\n</p>\n\n<p>\nAny fields which are not listed above must be set to the previous values which are set for referral order.\nApart from above fields, there are some fields mentioned below, which are read-only and any update to them would be ignored.\n<ul>\n<li>lastModified</li>\n<li>repliformLastModified</li>\n<li>modifiedByUser</li>\n<li>appointmentId</li>\n</ul>\n</p>\n\n<p>\nThe field 'type' and 'physicianId' cannot be updated for the requisition and referral order created from generated letter.\nThe field 'order' can not be updated for requisition. \nOrder can be converted to referral from generate letter by passing the faxLogId provided this field is not populated. 'faxLogId' can be updated from null to valid value but cannot be replaced from existing value to any new value. These fields would be auto-updated when order is convertedto referral from generate letter: \n<ul>\n<li>order</li>\n<li>primaryRecipient</li>\n<li>ccRecipients</li>\n<li>chartItemId</li>\n<li>chartItemType</li>\n<li>type</li>\n<li>description</li>\n<li>contactType</li>\n<li>contactId</li>\n</ul>\n</p>\n",
          "operationId" : "update_8",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReferralOrderDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "The user is not authorized for the office"
            },
            "403" : {
              "description" : "Access forbidden without the right permission or token withoutservice user."
            },
            "204" : {
              "description" : "No Content"
            },
            "400" : {
              "description" : "If the referral order is not given. And if the given order is for outbound e-referral."
            },
            "404" : {
              "description" : "Referral order not found"
            },
            "500" : {
              "description" : "Timezone not set in Accuro."
            }
          },
          "security" : [ {
            "oauth2" : [ "LETTER_WRITE" ]
          } ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider..",
            "type" : "EMR"
          }
        }
      },
      "/v1/provider-portal/scheduler/appointments/{appointmentId}/schedule-rooms" : {
        "get" : {
          "tags" : [ "ScheduleRoom Endpoint" ],
          "summary" : "Retrieves the schedule rooms of the appointment",
          "description" : "Gets the active schedule room by the give appointment id.",
          "operationId" : "getByAppointmentId",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "appointmentId",
            "in" : "path",
            "description" : "The appointment room id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ScheduleRoomDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY OR TRAFFIC_MANAGER with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/scheduler/schedule-rooms/{id}" : {
        "get" : {
          "tags" : [ "ScheduleRoom Endpoint" ],
          "summary" : "Retrieves the active schedule room",
          "description" : "Gets the active schedule room by the give room id.",
          "operationId" : "getById_16",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The schedule room id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "Not found"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ScheduleRoomDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY OR TRAFFIC_MANAGER with access level: READ_ONLY" ]
        }
      },
      "/v1/provider-portal/scheduler/reasons" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment reasons",
          "description" : "Gets a list of appointment reasons.",
          "operationId" : "getAppointmentReasons_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentReasonDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to appointment reasons in offices that contain a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/scheduler/types" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment types",
          "description" : "Gets a list of appointment types.",
          "operationId" : "getAppointmentTypes_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/AppointmentTypeDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/scheduler/priorities" : {
        "get" : {
          "tags" : [ "Schedule Endpoints- Public" ],
          "summary" : "Retrieves appointment priorities",
          "description" : "Gets a list of appointment priorities.",
          "operationId" : "getPriorities_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PriorityDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "SCHEDULING_READ", "SCHEDULING_WRITE" ]
          } ],
          "x-accuroRoles" : [ "SCHEDULING with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/roles" : {
        "get" : {
          "tags" : [ "Role Endpoints" ],
          "summary" : "Retrieves all existing active roles",
          "description" : "Gets a set of all existing active roles.",
          "operationId" : "getAll_5",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/RoleDto"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/v1/provider-portal/roles/{id}" : {
        "get" : {
          "tags" : [ "Role Endpoints" ],
          "summary" : "Retrieves a single role",
          "description" : "Gets the role by the given role id.",
          "operationId" : "getById_17",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The role id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/RoleDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not found"
            }
          }
        }
      },
      "/v1/provider-portal/waitlist-surgical-priorities" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Priority Endpoints" ],
          "summary" : "Retrieves all surgical priorities.",
          "description" : "Retrieves all available waitlist surgical priorities.",
          "operationId" : "getAll_6",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SurgicalPriorityDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-surgical-priorities/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Priority Endpoints" ],
          "summary" : "Retrieves surgical priority by ID.",
          "description" : "Retrieves the waitlist surgical priority corresponding to the given ID.",
          "operationId" : "getById_18",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Surgical priority ID",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SurgicalPriorityDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Surgical priority not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-surgical-statuses" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Status Endpoints" ],
          "summary" : "Retrieves all surgical statuses.",
          "description" : "Retrieves all available waitlist surgical statuses.",
          "operationId" : "getAll_7",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SurgicalStatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-surgical-statuses/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Status Endpoints" ],
          "summary" : "Retrieves surgical status by ID.",
          "description" : "Retrieves the waitlist surgical status corresponding to the given ID.",
          "operationId" : "getById_19",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Surgical status ID",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SurgicalStatusDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Surgical status not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-consult-sites" : {
        "get" : {
          "tags" : [ "Waitlist Consult Site Endpoints" ],
          "summary" : "Retrieves all consult sites.",
          "description" : "Retrieves all available waitlist consult sites.",
          "operationId" : "getAll_8",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SiteListDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-surgical-sites" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Site Endpoints" ],
          "summary" : "Retrieves all surgical sites.",
          "description" : "Retrieves all available waitlist surgical sites.",
          "operationId" : "getAll_9",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/SurgicalSiteDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-surgical-sites/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Surgical Site Endpoints" ],
          "summary" : "Retrieves surgical site by ID.",
          "description" : "Retrieves the waitlist surgical site corresponding to the given ID.",
          "operationId" : "getById_20",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Surgical site ID",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SurgicalSiteDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Surgical site not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlists/{waitlistId}/attachments" : {
        "post" : {
          "tags" : [ "WaitlistAttachment Endpoints" ],
          "summary" : "Saves all the attachments for the given waitlist id.",
          "description" : "Saves all the attachments for the given waitlist id. Refer to the attachments object documentation to see what goes in each field. ",
          "operationId" : "create_18",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "waitlistId",
            "in" : "path",
            "description" : "The waitlist id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "The list of attachments objects which needs to be linked to the waitlist request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WaitlistAttachmentDto"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Success but no content"
            },
            "400" : {
              "description" : "The given input is invalid"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/waitlist-procedures" : {
        "get" : {
          "tags" : [ "Waitlist Procedures Endpoints" ],
          "summary" : "Get all waitlist procedures which are active",
          "operationId" : "getAllProcedures",
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Successfully retrieved",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ProcedureListDto"
                    }
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal server error"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-request-procedures" : {
        "get" : {
          "tags" : [ "Waitlist Request Procedures Endpoints" ],
          "summary" : "Retrieves all request procedures by wait list request ID",
          "description" : "Retrieves all request procedures by wait list request ID",
          "operationId" : "getRequestProcedures",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Client or provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "requestId",
            "in" : "query",
            "description" : "Waitlist request Id",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitlistRequestProcedureDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        },
        "post" : {
          "tags" : [ "Waitlist Request Procedures Endpoints" ],
          "summary" : "Create a waitlist request and procedure link.",
          "operationId" : "create_19",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WaitlistRequestProcedureDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "201" : {
              "description" : "Procedure created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitlistRequestProcedureDto"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid input, or procedure fields invalid"
            },
            "500" : {
              "description" : "Internal server error"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/waitlist-request-procedures/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Request Procedures Endpoints" ],
          "summary" : "Get waitlist request procedure by ID",
          "operationId" : "getProcedure",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Successfully retrieved",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitlistRequestProcedureDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Waitlist request Procedure not found"
            },
            "500" : {
              "description" : "Internal server error"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/tasks/{taskId}/roles" : {
        "post" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Adds roles to the task",
          "description" : "Assigns roles to the task.",
          "operationId" : "addRolesToTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "Task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "RoleIds to assign to a task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the resource is not found"
            },
            "409" : {
              "description" : "If try to add an already assigned role"
            },
            "204" : {
              "description" : "Successfully added roles"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.update" ]
          } ]
        }
      },
      "/v1/provider-portal/tasks/{taskId}/users" : {
        "post" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Adds users to the task",
          "description" : "Assigns users to the task.",
          "operationId" : "addUsersToTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "Task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "UserIds to assign to a task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the resource is not found"
            },
            "409" : {
              "description" : "If try to add an already assigned user"
            },
            "204" : {
              "description" : "Successfully added users"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.update" ]
          } ]
        }
      },
      "/v1/provider-portal/tasks" : {
        "get" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Retrieves all tasks for the logged in user",
          "description" : "Gets all tasks for the logged in user.The logged in user can only access the tasks assigned to the user,  OR created by the user, OR the user has the roles the tasks assigned to for the office(assigned to). Except createdStartDate and createdEndDate  all other filters are optional and if provided, they will be combined with AND operator on top of the user accessible tasks. Difference between createdStartDate and createdEndDate should not be more than 30 days.",
          "operationId" : "getTasks_1",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider credentials bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "query",
            "description" : "The patient id. If this field is provided, the user tasks will be filtered by patient id.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "reason",
            "in" : "query",
            "description" : "The task reason. If this field is provided, the user tasks will be filtered by the given reason.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "includeCompleted",
            "in" : "query",
            "description" : "Include completed tasks or not. Set to TRUE in order to include completed tasks. By default the result will not include completed tasks.",
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "taskDueDate",
            "in" : "query",
            "description" : "Task due date. If provided, tasks which are due on that day will be returned.",
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "createdStartDate",
            "in" : "query",
            "description" : "The created startDate. This field is mandatory, the user tasks will be filtered by createdStartDate.",
            "required" : true,
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "createdEndDate",
            "in" : "query",
            "description" : "The created endDate.This field is mandatory,the user tasks will be filtered by createdEndDate. The max date allowed is '9999-12-30' ",
            "required" : true,
            "schema" : {
              "type" : "string"
            },
            "example" : "2020-10-30"
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request)It is same as the **taskId** of the last records of the previous results. The max date allowed is '9999-12-30' ",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/UserTaskDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.read" ]
          } ]
        },
        "post" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Creates a new task",
          "description" : "Creates a new user task. Creating task requires at least one user or one role to be passed as assignedUserIds or assignedRoleIds field. The fields of createdBy, createdById, and createdDate are not expected as they will be set by default corresponding to logged in user and the application date. The required fields are - at least one user or one role to assign, officeIdAssignedTo, officeIdAssignedFrom, reason and taskDueDate. The fields related to complete a task which include completed, completedBy, completedDate will be set to default and are not respected for this create endpoint as the task needs to be created first. The field 'priority' will be set to 'Normal' if not provided.",
          "operationId" : "createTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "New Task for the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTaskDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If any required field is missing or not valid"
            },
            "201" : {
              "description" : "Created",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "description" : "Returns task id",
                    "example" : 1001
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.create" ]
          } ]
        }
      },
      "/v1/provider-portal/tasks/{taskId}" : {
        "get" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Retrieves a user task by task id",
          "description" : "Gets a user task by task id.The logged in user can only access the tasks assigned to the user, OR created by the user, OR the user has the roles the tasks assigned to for the office(assigned to).",
          "operationId" : "getTaskById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider credential bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the task does not exist"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/UserTaskDto"
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.read" ]
          } ]
        },
        "put" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Updates a user task",
          "description" : "Updates a user task. The fields of createdBy, createdById, and createdDate should not be changed. And the fields related to complete a task including completed, completedBy, completedDate will be set to default values corresponding to logged in user and application time. The field 'priority' is set to 'Normal' if not provided. The assignedUserIds and assignedRoleIds will replace all existing ids if different ids were provided.",
          "operationId" : "updateTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "Task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Update task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTaskDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If any required field is missing"
            },
            "204" : {
              "description" : "Updated successfully"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.update" ]
          } ]
        },
        "delete" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Deletes a user task",
          "description" : "Deletes a user task.",
          "operationId" : "deleteTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "Task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "404" : {
              "description" : "If the resource is not found "
            },
            "204" : {
              "description" : "Deleted successfully"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.delete" ]
          } ]
        },
        "patch" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Patches a user task",
          "description" : "Partial updates a task. This endpoint allows partial update, i.e., update only those fields which need to be updated instead of updating entire UserTask object. If there are any invalid fields in the request, they will be ignored and the valid ones will be updated. For update just task the field of 'completed', the related fields completedBy and completedDate will be set to the default value.",
          "operationId" : "patchTask",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "taskId",
            "in" : "path",
            "description" : "Task id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "requestBody" : {
            "description" : "Updated task fields",
            "content" : {
              "application/merge-patch+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonNode"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "400" : {
              "description" : "If any required field is missing"
            },
            "204" : {
              "description" : "Updated successfully"
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.update" ]
          } ]
        }
      },
      "/v1/provider-portal/tasks/reasons" : {
        "get" : {
          "tags" : [ "User Task Endpoints" ],
          "summary" : "Retrieves task reasons",
          "description" : "Gets task reasons. Office id is an optional filter. If not provided, all reasons for all the offices will be returned.",
          "operationId" : "getTaskReasonsForOffice",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider credentials bearer token",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "officeId",
            "in" : "query",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/TaskReasonDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "user/provider.Task.read" ]
          } ]
        }
      },
      "/v1/provider-portal/waitlist-consult-priorities" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves consult priorities",
          "description" : "Gets all waitlist consult priorities.",
          "operationId" : "getAllPriorities",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ConsultPriorityDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-consult-priorities/{priorityId}" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves the single consult priority by id",
          "description" : "Gets the single priority by the given priority id.",
          "operationId" : "getPriorityById",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "priorityId",
            "in" : "path",
            "description" : "Priority id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConsultPriorityDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Consult priority not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-consult-statuses" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves all the waitlist consult statuses.",
          "description" : "Retrieves all the available waitlist consult statuses.",
          "operationId" : "getAll_10",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized."
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ConsultStatusDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-consult-statuses/{statusId}" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves waitlist consult status belonging to given id.",
          "description" : "Retrieves waitlist consult status belonging to given id.",
          "operationId" : "getById_21",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "statusId",
            "in" : "path",
            "description" : "status id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized."
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ConsultStatusDto"
                    }
                  }
                }
              }
            },
            "404" : {
              "description" : "Waitlist consult status not found."
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-complaints" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves all the complaints available for waitlist.",
          "description" : "Gets all the waitlist complaints available.",
          "operationId" : "getComplaints",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Consumer unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-consult-types" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves all the consult type available for waitlist.",
          "description" : "Gets all the waitlist consult types available.",
          "operationId" : "getConsultTypes",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Consumer unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-providers" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves all the waitlist providers",
          "description" : "Gets all the providers registered for waitlist.",
          "operationId" : "getAll_11",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WaitlistProviderDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-providers/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves waitlist provider with the given id",
          "description" : "Gets the waitlist provider belonging to the given id.",
          "operationId" : "getById_22",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Waitlist provider id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "User unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WaitlistProviderDto"
                    }
                  }
                }
              }
            },
            "404" : {
              "description" : "Waitlist provider not found."
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlists" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves all the waitlist requests based on the specified filters.",
          "description" : "Gets a list of waitlist requests. All parameters are optional.The result will be given in a paginated form.  To request the next page, specify the startingId the same as  **EnvelopeDto.lastId** of the previous page.Last id is the **id** of the last record in the page.All existing requests will be returned if none of the params are provided. If multiple filters are provided, they will be combined with AND operator.",
          "operationId" : "getWaitlistRequests",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "waitlistProviderId",
            "in" : "query",
            "description" : "Waitlist provider id, can only be numbers",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "patientId",
            "in" : "query",
            "description" : "Patient id, can only be numbers",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "consultStatus",
            "in" : "query",
            "description" : "Waitlist consult status",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The size of the pages with default value 25 and maximum value 50. If the page size is not provided or less than 1,  the page size will be set to default value 25. If page size provided is more than maximum value,  the page size will be set to the default maximum value 50.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "startingId",
            "in" : "query",
            "description" : "This id is **EnvelopeDto.lastId** of the previous page(request). It is the same as the **id** (waitlist request id) of the last record of the previous results.",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WaitlistRequestDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to waitlist requests with a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        },
        "post" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Saves the waitlist.",
          "description" : "Saves the waitlist.",
          "operationId" : "create_20",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WaitlistRequestDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            },
            "400" : {
              "description" : "If the given input is invalid"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access if the user has this permission for any provider.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/waitlists/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Retrieves the waitlist request based on the given id.",
          "description" : "Gets the waitlist request based on given id.",
          "operationId" : "getById_23",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Waitlist request id.",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitlistRequestDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found."
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ],
          "x-accuroProviderPermissions" : {
            "level" : "ReadOnly",
            "logicalOperator" : "",
            "description" : "Allows access to waitlist requests with a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/waitlists/{requestId}/consult-sites" : {
        "get" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Gets waitlist request consult sites.",
          "description" : "Gets the waitlist request consult sites.",
          "operationId" : "getConsultSites",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "requestId",
            "in" : "path",
            "description" : "Waitlist request id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "For success or no data",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ConsultSiteDto"
                    }
                  }
                }
              }
            },
            "404" : {
              "description" : "If waitlist request of the given id doesn't exist."
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        },
        "put" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Updates the waitlist request consult sites.",
          "description" : "Updates the waitlist request consult sites. To add consult site, add only consultSiteName. Consult site id and waitlist request id will be ignored in the request body objects. If all consult sites need to be removed, just pass the empty collection in the request body. ",
          "operationId" : "updateConsultSites",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "requestId",
            "in" : "path",
            "description" : "Waitlist request id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConsultSiteDto"
                  }
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "Successful. No Content"
            },
            "400" : {
              "description" : "If the given input is invalid"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_WRITE " ]
        }
      },
      "/v1/provider-portal/waitlists/{waitlistId}" : {
        "put" : {
          "tags" : [ "Waitlist Endpoints" ],
          "summary" : "Updates the waitlist.",
          "description" : "Updates the waitlist.\n\nThe following surgical-related fields cannot be updated through this endpoint; any values passed for them will be ignored and overwritten with existing data:\n<ul>\n  <li><b>surgicalPriority</b></li>\n  <li><b>surgicalSiteId</b></li>\n  <li><b>surgicalStatus</b></li>\n  <li><b>surgicalType</b></li>\n  <li><b>surgicalRefusedReason</b></li>\n  <li><b>availableForCancellation</b></li>\n</ul>\n",
          "operationId" : "update_9",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "waitlistId",
            "in" : "path",
            "description" : "Waitlist id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WaitlistRequestDto"
                }
              }
            }
          },
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "204" : {
              "description" : "No Content"
            },
            "400" : {
              "description" : "If the given input is invalid"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_WRITE " ],
          "x-accuroProviderPermissions" : {
            "level" : "Full",
            "logicalOperator" : "",
            "description" : "Allows access to waitlist entries with a provider the user has this permission for.",
            "type" : "Scheduling"
          }
        }
      },
      "/v1/provider-portal/waitlist-patient-unavailabilites/{id}" : {
        "get" : {
          "tags" : [ "Waitlist Request Patient Unavailability Endpoints" ],
          "summary" : "Retrieves Patient's Unavailability for Waitlist Request by Id",
          "operationId" : "getById_24",
          "parameters" : [ {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "patient unavailability id",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WaitlistRequestPatientUnAvailabilityDto"
                  }
                }
              }
            },
            "404" : {
              "description" : "Resource not found"
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      },
      "/v1/provider-portal/waitlist-patient-unavailabilites" : {
        "get" : {
          "tags" : [ "Waitlist Request Patient Unavailability Endpoints" ],
          "summary" : "Retrieves Patient's Unavailability for Waitlist Request by requestId",
          "description" : "Gets list of all patient's unavailability for waitlist request by request id",
          "operationId" : "getByRequestId",
          "parameters" : [ {
            "name" : "requestId",
            "in" : "query",
            "description" : "Waitlist request id, can only be numbers",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "authorization",
            "in" : "header",
            "description" : "Provider level authorization grant",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "requestId",
            "in" : "query",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          } ],
          "responses" : {
            "401" : {
              "description" : "Unauthorized"
            },
            "403" : {
              "description" : "Access Denied"
            },
            "200" : {
              "description" : "Success",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WaitlistRequestPatientUnAvailabilityDto"
                    }
                  }
                }
              }
            }
          },
          "security" : [ {
            "oauth2" : [ "WAITLIST_WRITE", "WAITLIST_READ" ]
          } ],
          "x-accuroRoles" : [ "WAITLIST with access level: READ_ONLY " ]
        }
      }
    },
    "components" : {
      "schemas" : {
        "AccuroSettingsDto" : {
          "type" : "object",
          "properties" : {
            "mode" : {
              "type" : "string",
              "description" : "The Mode Accuro is running in.",
              "example" : "Full"
            },
            "timeZone" : {
              "type" : "string",
              "description" : "Time zone settings for Accuro",
              "example" : "Canada/Eastern"
            },
            "province" : {
              "type" : "string",
              "description" : "The province the Accuro instance is configured for.",
              "example" : "ON"
            }
          },
          "description" : "Data Transfer Object for Accuro Settings"
        },
        "AccuroUserDto" : {
          "type" : "object",
          "properties" : {
            "userId" : {
              "type" : "integer",
              "description" : "The unique id of an accuro user.",
              "format" : "int32",
              "example" : 1
            },
            "providerId" : {
              "type" : "integer",
              "description" : "The provider id if the user is a provider.",
              "format" : "int32",
              "example" : 25892
            },
            "supervisorUserId" : {
              "type" : "integer",
              "description" : "The supervisor user id.",
              "format" : "int32",
              "example" : 12114
            },
            "username" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name of the user.",
              "example" : "Shaunwright22"
            },
            "displayName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The display name of the user.",
              "example" : "Shaun"
            },
            "activeDirectoryUser" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "The value of the active directory user.",
              "example" : "UAQ01"
            },
            "systemAdmin" : {
              "type" : "boolean",
              "description" : "Indicate if the user is a system admin."
            },
            "note" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "A note.",
              "example" : "This is a service user."
            },
            "lockedDate" : {
              "type" : "string",
              "description" : "The locked date.",
              "example" : "2020-02-10T00:00:00.000"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indicate if the user is active or de active."
            },
            "firstName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The first name of the user.",
              "example" : "Shaun"
            },
            "lastName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The last name of the user.",
              "example" : "Wright"
            },
            "homePhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "cellPhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "workPhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailDto"
            },
            "address" : {
              "$ref" : "#/components/schemas/AddressDto"
            }
          },
          "description" : "The paginated results of the query"
        },
        "AddressDto" : {
          "type" : "object",
          "properties" : {
            "street" : {
              "type" : "string",
              "description" : "Street of the address",
              "example" : "102 Maple Street"
            },
            "city" : {
              "type" : "string",
              "description" : "City name of the address",
              "example" : "Vancouver"
            },
            "postalZip" : {
              "type" : "string",
              "description" : "Postal or zip code of the Address",
              "example" : "A1A2B2"
            },
            "locationId" : {
              "type" : "integer",
              "description" : "Unique location identifier of the Address",
              "format" : "int32",
              "example" : 10
            },
            "note" : {
              "type" : "string",
              "description" : "Note of the Address",
              "example" : "A quick note"
            },
            "type" : {
              "type" : "string",
              "description" : "The address type",
              "example" : "Civil"
            },
            "start" : {
              "type" : "string",
              "description" : "Effective start date of the address",
              "example" : "2019-03-06"
            },
            "end" : {
              "type" : "string",
              "description" : "Effective end date of the address",
              "example" : "2020-03-31"
            },
            "masks" : {
              "type" : "array",
              "description" : "The collection of masks on address",
              "items" : {
                "$ref" : "#/components/schemas/MaskDto"
              }
            }
          },
          "description" : "Address data transfer object model. In any of these fields - note, type, start or end - are null, they will not be shown in the response object.Example shown here is the ideal scenario where all the fields are not null.",
          "nullable" : true
        },
        "EmailDto" : {
          "required" : [ "order" ],
          "type" : "object",
          "properties" : {
            "emailId" : {
              "type" : "integer",
              "description" : "The id of the email",
              "format" : "int32",
              "example" : 1
            },
            "type" : {
              "type" : "string",
              "description" : "The type of the email",
              "example" : "Business"
            },
            "address" : {
              "type" : "string",
              "description" : "The email address",
              "format" : "email",
              "example" : "contact@doctor.com"
            },
            "order" : {
              "type" : "integer",
              "description" : "The order of the email",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Email data transfer object model. If emailId and type field is null,  it will not be shown in the response."
        },
        "MaskAuthorizationDto" : {
          "required" : [ "maskId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Mask authorization id",
              "format" : "int32",
              "example" : 32
            },
            "maskId" : {
              "type" : "integer",
              "description" : "Mask id",
              "format" : "int32",
              "example" : 22
            },
            "untilDate" : {
              "type" : "string",
              "description" : "Until date",
              "example" : "2022-12-31T23:59:00.000"
            },
            "Role id" : {
              "type" : "integer",
              "description" : "Role ID",
              "format" : "int32",
              "example" : 2
            },
            "userId" : {
              "type" : "integer",
              "description" : "User ID",
              "format" : "int32",
              "example" : 6
            }
          },
          "description" : "List of authorized users and roles to whom mask is accessible. This is read only field."
        },
        "MaskDto" : {
          "required" : [ "maskId" ],
          "type" : "object",
          "properties" : {
            "maskId" : {
              "type" : "integer",
              "description" : "The id of the mask",
              "format" : "int32",
              "example" : 1
            },
            "userId" : {
              "type" : "integer",
              "description" : "User id of the creator of mask",
              "format" : "int32",
              "example" : 24
            },
            "masked" : {
              "type" : "boolean",
              "description" : "The status of the mask if it is active or not.",
              "example" : true
            },
            "maskedDate" : {
              "type" : "string",
              "description" : "Date time when the resource was masked.",
              "example" : "2020-02-13T00:00:00.000"
            },
            "lastModified" : {
              "type" : "string",
              "description" : "Date time when the mask of last modified.",
              "example" : "2020-02-13T00:00:00.000"
            },
            "notes" : {
              "maxLength" : 2000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Mask notes"
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id.",
              "format" : "int32",
              "example" : 45
            },
            "fieldName" : {
              "maxLength" : 150,
              "minLength" : 0,
              "type" : "string",
              "description" : "A field name on which mask is applied. Example: STREET1 refers to mask on street field of primary address, STREET2 refers to mask on Street field of secondary address and so on. Appointment masks have this field as blank.",
              "example" : "STREET1"
            },
            "maskAuthorizations" : {
              "type" : "array",
              "description" : "List of authorized users and roles to whom mask is accessible. This is read only field.",
              "items" : {
                "$ref" : "#/components/schemas/MaskAuthorizationDto"
              }
            }
          },
          "description" : "Mask data transfer object model."
        },
        "PhoneDto" : {
          "type" : "object",
          "properties" : {
            "phoneId" : {
              "type" : "integer",
              "description" : "The id of the phone",
              "format" : "int32",
              "example" : 1
            },
            "number" : {
              "pattern" : "(^[(]{0,1}[0-9]{3}[)]{0,1}[\\s]{0,1}[\\d]{3}[-]{0,1}[\\d]{4})$|^$",
              "type" : "string",
              "description" : "The phone number For e.g (123) 456-7890 or 1234567890",
              "example" : "(123) 456-7890"
            },
            "ext" : {
              "type" : "string",
              "description" : "The phone extension number",
              "example" : "112"
            },
            "equipType" : {
              "type" : "string",
              "description" : "The equipment type of the phone",
              "example" : "Cell"
            },
            "usage" : {
              "type" : "string",
              "description" : "The phones usage"
            },
            "notes" : {
              "type" : "string",
              "description" : "Notes for the phone",
              "example" : "Only available between 8am and noon."
            },
            "order" : {
              "type" : "integer",
              "description" : "The order of the phone",
              "format" : "int32",
              "example" : 1
            },
            "contactType" : {
              "type" : "string",
              "description" : "The ContactType enum. Defines the contact type for a phone number.",
              "example" : "WorkPhone",
              "enum" : [ "HomePhone", "WorkPhone", "CellPhone", "FaxPhone", "OfficePhone", "Email" ]
            }
          },
          "description" : "Phone object model. Except **number** field, if any other field is null, it will not be shown in the response object. The example shown here is the ideal scenariowhere all the fields are not null."
        },
        "ContactDto" : {
          "required" : [ "AddressContactType", "aliases", "altPhoneNumber", "contactName", "email", "faxNumber", "longDistance", "mainContact", "note", "phoneNumber", "postalCode", "street" ],
          "type" : "object",
          "properties" : {
            "contactId" : {
              "type" : "integer",
              "description" : "Identity of the contact",
              "format" : "int32",
              "example" : 12
            },
            "contactName" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the contact",
              "example" : "Water Front Pharmacy"
            },
            "faxNumber" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Fax number of the contact",
              "example" : "(250)321-9876"
            },
            "phoneNumber" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Phone number of the contact",
              "example" : "(250)321-9877"
            },
            "altPhoneNumber" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Alternate phone number of the contact",
              "example" : "(250)321-9878"
            },
            "phoneExt" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Extension number of the phone",
              "example" : "1001"
            },
            "altPhoneExt" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Extension number of the alternate phone",
              "example" : "1002"
            },
            "email" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Email of the contact",
              "example" : "abc@mycontact.com"
            },
            "mainContact" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Main contact",
              "example" : "John"
            },
            "city" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "City name of the contact",
              "example" : "Toronto"
            },
            "street" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Street of the contact",
              "example" : "1500 Queen St"
            },
            "postalCode" : {
              "maxLength" : 12,
              "minLength" : 0,
              "type" : "string",
              "description" : "Post code of the contact",
              "example" : "A1A2B2"
            },
            "note" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Note about the contact",
              "example" : "Available till 5PM"
            },
            "contactLocation" : {
              "$ref" : "#/components/schemas/LocationDto"
            },
            "locationId" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The contact identifier",
              "example" : "100"
            },
            "longDistance" : {
              "type" : "boolean",
              "description" : "Indicates if the contact is long distance",
              "example" : true
            },
            "eRx" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The e-Prescribing of the contact",
              "example" : "Tolazamide 100MG for injection"
            },
            "AddressContactType" : {
              "type" : "string",
              "description" : "The address contact type",
              "example" : "Pharmacy",
              "enum" : [ "Contact", "Pharmacy" ]
            },
            "aliases" : {
              "type" : "array",
              "description" : "Aliases of the contact. All NULL and EMPTY values will be removed from list.",
              "example" : [ "Doctora", "Experta", "Central Pharm" ],
              "items" : {
                "type" : "string",
                "description" : "Aliases of the contact. All NULL and EMPTY values will be removed from list.",
                "example" : "[\"Doctora\",\"Experta\",\"Central Pharm\"]"
              }
            },
            "healthmailAddress" : {
              "$ref" : "#/components/schemas/HealthmailAddressDto"
            }
          },
          "description" : "Contact data transfer object model"
        },
        "HealthmailAddressDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Identity of the healthmail address",
              "format" : "int32",
              "example" : 12
            },
            "address" : {
              "type" : "string",
              "description" : "Healthmail address. Should not be more than 64 characters and should have pattern as shown in the example.",
              "example" : "Name1#Name2#Name3"
            }
          },
          "description" : "HealthmailAddress data transfer object model"
        },
        "LocationDto" : {
          "type" : "object",
          "properties" : {
            "locationId" : {
              "type" : "integer",
              "description" : "Unique identifier for the location",
              "format" : "int32",
              "example" : 2
            },
            "province" : {
              "type" : "string",
              "description" : "Province or state abbreviation for the location",
              "example" : "BC"
            },
            "country" : {
              "type" : "string",
              "description" : "Country name for the location",
              "example" : "Canada"
            },
            "description" : {
              "type" : "string",
              "description" : "Description of locations province or state",
              "example" : "British Columbia"
            }
          },
          "description" : "Location data transfer object model"
        },
        "ExternalContactIdentifierDto" : {
          "type" : "object",
          "properties" : {
            "contactId" : {
              "type" : "integer",
              "description" : "Identity of the contact",
              "format" : "int32",
              "example" : 12
            },
            "externalSystemIdentifier" : {
              "type" : "string",
              "description" : "System identifier of the external system",
              "example" : "healthcare_directory"
            },
            "value" : {
              "maxLength" : 64,
              "minLength" : 0,
              "type" : "string",
              "description" : "external identifier value",
              "example" : "200127586"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Date external identifier was added to database. Date time in UTC",
              "example" : "2012-02-15T07:44:59.000"
            },
            "lastUpdatedDate" : {
              "type" : "string",
              "description" : "Date last updated. Date time in UTC",
              "example" : "2012-02-15T07:44:59.000"
            }
          },
          "description" : "Contact data transfer object model"
        },
        "EnvelopeDtoContactDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/ContactDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "Details" : {
          "type" : "object",
          "properties" : {
            "userName" : {
              "type" : "string",
              "description" : "User name",
              "example" : "John"
            },
            "officeNames" : {
              "type" : "array",
              "description" : "List of office names",
              "example" : [ "Eastern Office", "Head Office" ],
              "items" : {
                "type" : "string",
                "description" : "List of office names",
                "example" : "[\"Eastern Office\",\"Head Office\"]"
              }
            },
            "scopes" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "List of scopes",
              "example" : [ "LABS_WRITE", "LABS_READ" ],
              "items" : {
                "type" : "string",
                "description" : "List of scopes",
                "example" : "[\"LABS_WRITE\",\"LABS_READ\"]"
              }
            },
            "grantType" : {
              "type" : "string",
              "description" : "Type of grant",
              "example" : "password"
            },
            "currentOffice" : {
              "$ref" : "#/components/schemas/OfficeDto"
            }
          },
          "description" : "Details about an Accuro user authenticated via API"
        },
        "OfficeDto" : {
          "type" : "object",
          "properties" : {
            "officeId" : {
              "type" : "integer",
              "description" : "Unique Accuro office identifier",
              "format" : "int32",
              "example" : 12
            },
            "name" : {
              "type" : "string",
              "description" : "Name of the Accuro office",
              "example" : "Test Office"
            },
            "address" : {
              "$ref" : "#/components/schemas/AddressDto"
            },
            "officePhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "fax" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailDto"
            },
            "website" : {
              "type" : "string",
              "description" : "Website URL for the Accuro office",
              "example" : "https://google.com/"
            },
            "facilityNumber" : {
              "type" : "string",
              "description" : "Facility number for the Accuro office",
              "example" : "132"
            },
            "abbreviation" : {
              "type" : "string",
              "description" : "Abbreviation for the Accuro office",
              "example" : "ABBRV"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication of whether the Accuro office is active or not",
              "example" : true
            }
          },
          "description" : "Accuro Office model object"
        },
        "EnvelopeDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "type" : "object",
                "description" : "The paginated results of the query"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "EnvelopeMapDtoIntegerSetFeatureType" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "object",
              "additionalProperties" : {
                "uniqueItems" : true,
                "type" : "array",
                "description" : "The paginated results of the query",
                "items" : {
                  "type" : "string",
                  "description" : "The paginated results of the query",
                  "enum" : [ "Review Documents", "Review Labs", "Scheduler - Apply/Remove Templates", "Scheduler Management - Apply/Remove Templates", "Scheduler Management - Manage Templates", "Scheduler Management - Priorities/Reasons/Statuses", "Scheduler Management - Settings", "Scheduler Management - Types", "Scheduler Management - Suggestions", "Configure Medeo Booking Options", "Configure Medeo Booking Requests Responses", "Configure Cancelled Medeo Booking Request Reasons", "Launch Medeo Administration Tool", "Medeo Secure Messaging", "Scheduler Management - Manage Suggestion Groups", "Override Priority Templates", "Manage Rooms", "Manage Programs", "Manage Appointment Reason Descriptions", "Manage Appointment Cancellation Reasons", "Manage Cancellation List Reasons", "Manage Sites", "Delete Appointment", "Set Office Provider", "Modify Status", "Remove Status", "Modify Flags", "Merge Patients", "Delete Patient", "Manage Task Types", "Manage Custom Patient Fields", "Manage Address Notes", "Manage Relation Types", "Manage Relationship Statuses", "Manage Patient ID Types", "Set Referring Physician", "Manage Patient Folders", "Form Editor", "Edit CDM Forms", "Configure CDM Mapping", "Template Wizard", "Diagnosis Linking", "Lock & Review Clinical Notes", "Lock Forms", "Delete Clinical Notes", "Delete Forms", "Delete Documents", "Delete Labs", "Delete Faxes", "Manage Lab Tests", "Manage Lab Linking", "Manage Medical History Items", "Manage Prescription Status Reasons", "Track INR Values", "Create Lab Requisition", "Manage Unlock Chart Reasons", "Chart Search", "Virtual Chart Edit Document", "Virtual Chart Edit Clinical Note", "View Lab Activity Log", "Initiate MB eReferral", "Medication Administration", "Manage Allergies", "Manage Global Macros", "Manage Office Macros", "Manage Insurers", "Manage Procedure Codes", "Manage Procedure Code Pricing", "Manage Procedure Categories", "Manage Diagnosis Codes", "Manage Service Code Accounts", "Manage Billing Numbers", "Manage Billing Rules", "Manage Submissions", "Apply Insurer Payments", "Access A/R by Insurer", "Write-Off / Adjust to Paid", "Submit Claims", "Enter Any Business Arrangement # On Bill", "Manage Claim Tracking", "Archive Appointment", "Manage Accounts", "Manage Submitter Prefix Passwords", "Manage Payment Period Date", "Manage Providers", "Manage Completions", "Manage Lists", "Mass Status Update", "Delete Booking Requests", "Manage Shared Views", "Allow the Migration of Consult Requests", "Manage Alerts(Query Builder)", "Run Alerts(Query Builder)", "Create & Modify Masks", "Manage Address Book Contacts and Pharmacies", "Label Wizard", "Label Paper", "Mass Transfer Chart Data", "Update Health Service Codes", "Update MSP Codes", "Update Tariff Rates", "Update MSI Fee Schedule", "Update OHIP Fee Schedule", "Update Billing Codes", "Provider Lookup", "Update Auto-Complete List", "Update RVG Codes", "Update BCMA Price List", "Update WCB body part and nature of injury codes", "Update Dictionary", "Update Growth Chart Tables", "Access Automated Batch Chart Sheet Tool", "Update ICD9/10", "Update Lists", "CPCSSN IndiGO", "Manage Fax Queue", "Manage Letter Queue", "Create Backups", "Manage Care Teams", "Manage Vaccines", "Manage Immunization Schedules", "Manage Patient Immunization Schedules", "Manage Diagnosis Condition Mappings", "Ungroup Virtual Chart Labs", "Reassess Claims", "Archive Patient", "Manage Global CDS Links", "Accuro Registry Access", "View Activity Log", "Edit Office Providers", "Configure Office Providers", "Import Physician Registry", "Merge Providers", "Manage Global/Office Logins", "View SK QIP CDM Worksheet Export Activity", "User Demographics Dialog", "Manage Titles", "Manitoba Primary Care Data Extract", "CDS Diabetes Export", "CDS CIHI Export", "CDS Data Export", "CDS Data Import", "Pharmaceutical Information Program (PIP)", "Alberta Bone and Joint Exports", "McKesson RelayHealth Interface", "EMR-to-EMR Data Transfer & Conversion", "RMA Location Manager", "Chat with Users", "Broadcast Message", "Advanced Reporting", "View OMD Dashboards", "Manage OMD Dashboards", "Care Team Reports", "Create Ad Hoc Reports", "Advanced Reporting Admin", "View and Export UUIDs", "Accuro Debugging", "MB Billing Config", "SK Interoperability Export List", "Manually Submit CII/CPAR Panels" ]
                }
              },
              "description" : "The paginated results of the query"
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "GenderDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique identifier for the gender",
              "format" : "int32",
              "example" : 11
            },
            "name" : {
              "type" : "string",
              "description" : "The name for the gender",
              "example" : "Female"
            },
            "builtIn" : {
              "type" : "boolean",
              "description" : "Boolean indication if the gender is built-in or custom",
              "example" : true
            },
            "shortName" : {
              "type" : "string",
              "description" : "The abbreviation for the gender",
              "example" : "F"
            },
            "simplifiesToMale" : {
              "type" : "boolean",
              "description" : "Indication if the gender can be simplified to male",
              "example" : true
            }
          },
          "description" : "Gender data transfer object model"
        },
        "LabResultDto" : {
          "type" : "object",
          "properties" : {
            "resultId" : {
              "type" : "integer",
              "description" : "Unique identifier for this lab result",
              "format" : "int32",
              "example" : 42
            },
            "resultName" : {
              "type" : "string",
              "description" : "User defined name for this lab result",
              "example" : "BP - Diastolic"
            },
            "dataType" : {
              "type" : "string",
              "description" : "Lab data type enum",
              "example" : "Numeric",
              "enum" : [ "Unidentified", "Numeric", "Text" ]
            },
            "units" : {
              "type" : "string",
              "description" : "Unit used for the lab result",
              "example" : "mmHG"
            },
            "sourceId" : {
              "type" : "integer",
              "description" : "Identifier of the external lab source for this lab result",
              "format" : "int32",
              "example" : 5
            },
            "imperial" : {
              "type" : "boolean",
              "description" : "Identifies whether this lab result uses imperial measurements",
              "example" : false
            },
            "description" : {
              "type" : "string",
              "description" : "User defined description for the lab result",
              "example" : "Arterial pressure between heart beats"
            },
            "referenceRange" : {
              "type" : "string",
              "description" : "Reference range for the lab result",
              "example" : "< 80"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Active state for this lab result",
              "example" : true
            }
          },
          "description" : "Lab result data transfer object model"
        },
        "LabTestDto" : {
          "type" : "object",
          "properties" : {
            "testId" : {
              "type" : "integer",
              "description" : "Unique identifier for the lab test",
              "format" : "int32",
              "example" : 42
            },
            "testName" : {
              "type" : "string",
              "description" : "Name of the lab test",
              "example" : "CHOL Panel"
            },
            "sourceId" : {
              "type" : "integer",
              "description" : "Id of the lab source for this lab test",
              "format" : "int32",
              "example" : 5
            },
            "active" : {
              "type" : "boolean",
              "description" : "The active state of this lab test",
              "example" : true
            }
          },
          "description" : "Lab test data transfer object model"
        },
        "OfficialLanguageDto" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "string",
              "description" : "The code ",
              "example" : "eng"
            },
            "description" : {
              "type" : "string",
              "description" : "The code description",
              "example" : "English"
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indication if the language was deleted or not",
              "example" : false
            }
          }
        },
        "SpokenLanguageDto" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "string",
              "description" : "The code ",
              "example" : "ita"
            },
            "description" : {
              "type" : "string",
              "description" : "The code description",
              "example" : "Italian"
            },
            "codeOrder" : {
              "type" : "integer",
              "description" : "The code order of same category",
              "format" : "int32",
              "example" : 1
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indication if the language was deleted or not",
              "example" : false
            }
          }
        },
        "MedeoProviderLinkDto" : {
          "type" : "object",
          "properties" : {
            "medeoId" : {
              "type" : "integer",
              "description" : "medeoId",
              "format" : "int64",
              "example" : 1
            },
            "medeoOrganizationId" : {
              "type" : "integer",
              "description" : "medeo organization id",
              "format" : "int64",
              "example" : 1
            },
            "accuroProviderId" : {
              "type" : "integer",
              "description" : "accuro provider id",
              "format" : "int32",
              "example" : 1
            },
            "medeoUserId" : {
              "type" : "integer",
              "description" : "medeo user id",
              "format" : "int64",
              "example" : 1
            },
            "accuroOfficeId" : {
              "type" : "integer",
              "description" : "accuro office id linked to medeo org",
              "format" : "int32",
              "example" : 1
            },
            "medeoOrganizationUuid" : {
              "type" : "string",
              "description" : "medeo organization uuid",
              "format" : "uuid",
              "example" : "651fa4d6-bc46-42be-ac70-6f3a8c8cecda"
            }
          },
          "description" : "Medeo provider links for medeo practitioners"
        },
        "PhysicianLabIdDto" : {
          "required" : [ "labId" ],
          "type" : "object",
          "properties" : {
            "physicianId" : {
              "type" : "integer",
              "description" : "The provider id",
              "format" : "int32",
              "example" : 42
            },
            "sourceId" : {
              "type" : "integer",
              "description" : "Id of the lab source",
              "format" : "int32",
              "example" : 5
            },
            "exactMatch" : {
              "type" : "boolean",
              "description" : "Indication of exact match.",
              "example" : true
            },
            "labId" : {
              "type" : "string",
              "description" : "The lab id",
              "example" : "labId"
            }
          },
          "description" : "physician lab id's transfer object model"
        },
        "MasterNumberDto" : {
          "type" : "object",
          "properties" : {
            "masterNumber" : {
              "type" : "integer",
              "description" : "Master number",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "Master number name",
              "example" : "NURSING HOME - ONTARIO - GENERIC #"
            },
            "type" : {
              "type" : "string",
              "description" : "Master number type",
              "example" : "IN"
            },
            "location" : {
              "type" : "string",
              "description" : "Master number location",
              "example" : "TORONTO"
            },
            "lhinCode" : {
              "type" : "integer",
              "description" : "Master number lhinCode",
              "format" : "int32",
              "example" : 7
            },
            "facilityNumber" : {
              "type" : "integer",
              "description" : "Master number facilityNumber",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Master number details. Valid in Ontario province only."
        },
        "EmailV2Dto" : {
          "required" : [ "order" ],
          "type" : "object",
          "properties" : {
            "emailId" : {
              "type" : "integer",
              "description" : "The id of the email",
              "format" : "int32",
              "example" : 1
            },
            "type" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The type of the email",
              "example" : "Business"
            },
            "address" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The email address",
              "format" : "email",
              "example" : "contact@doctor.com"
            },
            "order" : {
              "type" : "integer",
              "description" : "The order of the email",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Email data transfer object model. If emailId and type field is null,  it will not be shown in the response."
        },
        "PhoneV2Dto" : {
          "required" : [ "contactType" ],
          "type" : "object",
          "properties" : {
            "phoneId" : {
              "type" : "integer",
              "description" : "The id of the phone",
              "format" : "int32",
              "example" : 1
            },
            "number" : {
              "pattern" : "(^[(]{0,1}[0-9]{3}[)]{0,1}[\\s]{0,1}[\\d]{3}[-]{0,1}[\\d]{4})$|^$",
              "type" : "string",
              "description" : "The phone number For e.g (123) 456-7890 or 1234567890",
              "example" : "(123) 456-7890"
            },
            "ext" : {
              "type" : "string",
              "description" : "The phone extension number",
              "example" : "112"
            },
            "equipType" : {
              "type" : "string",
              "description" : "The equipment type of the phone",
              "example" : "Cell"
            },
            "usage" : {
              "type" : "string",
              "description" : "The phones usage"
            },
            "notes" : {
              "type" : "string",
              "description" : "Notes for the phone",
              "example" : "Only available between 8am and noon."
            },
            "order" : {
              "type" : "string",
              "description" : "The order of the phone",
              "example" : "1"
            },
            "contactType" : {
              "type" : "string",
              "description" : "The ContactType enum. Defines the contact type for a phone number.",
              "example" : "WorkPhone"
            }
          },
          "description" : "Phone object model. Except **number** field, if any other field is null, it will not be shown in the response object. The example shown here is the ideal scenariowhere all the fields are not null.",
          "nullable" : true
        },
        "ProviderAddressDto" : {
          "type" : "object",
          "properties" : {
            "street" : {
              "maxLength" : 60,
              "minLength" : 0,
              "type" : "string",
              "description" : "Street of the address",
              "example" : "102 Maple Street"
            },
            "city" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "City name of the address",
              "example" : "Vancouver"
            },
            "postalZip" : {
              "maxLength" : 50,
              "minLength" : 0,
              "pattern" : "^[A-Za-z]\\d[A-Za-z][\\s]{0,1}\\d[A-Za-z]\\d$|^$",
              "type" : "string",
              "description" : "Postal or zip code of the Address",
              "example" : "A1A 2B2"
            },
            "locationId" : {
              "type" : "integer",
              "description" : "Unique location identifier of the Address",
              "format" : "int32",
              "example" : 10
            },
            "masks" : {
              "type" : "array",
              "description" : "The collection of masks on address. Read-only field.",
              "items" : {
                "$ref" : "#/components/schemas/MaskDto"
              }
            }
          },
          "description" : "Address data transfer object model.",
          "example" : "221B Baker St"
        },
        "ProviderDto" : {
          "required" : [ "firstName", "lastName", "typeId" ],
          "type" : "object",
          "properties" : {
            "providerId" : {
              "type" : "integer",
              "description" : "Unique id of the provider",
              "format" : "int32",
              "example" : 1
            },
            "statusId" : {
              "type" : "integer",
              "description" : "Status id of the provider",
              "format" : "int32",
              "example" : 1
            },
            "typeId" : {
              "type" : "integer",
              "description" : "Type id of the provider",
              "format" : "int32",
              "example" : 1
            },
            "title" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's title",
              "example" : "Sir"
            },
            "firstName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's first name",
              "example" : "Arthur"
            },
            "middleName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's middle name",
              "example" : "Conan"
            },
            "lastName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's last name",
              "example" : "Doyle"
            },
            "suffix" : {
              "maxLength" : 10,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's suffix",
              "example" : "Sr."
            },
            "address" : {
              "$ref" : "#/components/schemas/ProviderAddressDto"
            },
            "phones" : {
              "type" : "array",
              "description" : "A list of provider phone numbers",
              "items" : {
                "$ref" : "#/components/schemas/PhoneV2Dto"
              }
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailV2Dto"
            },
            "specialty" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's specialty",
              "example" : "Family Practice"
            },
            "defaultOffice" : {
              "type" : "integer",
              "description" : "The default office id",
              "format" : "int32",
              "example" : 17766
            },
            "cpsoNumber" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "The physician's cpso number",
              "example" : "1442456"
            },
            "practitionerNumber" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "The provider's practitioner number",
              "example" : "12345"
            }
          },
          "description" : "The provider data transfer object."
        },
        "ProviderIdentifierDto" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "description" : "Provider identifier type",
              "example" : "PractitionerNumber",
              "enum" : [ "PractitionerNumber", "BCPayee", "BCUnincorporatedPayee", "ABBusinessArrangement", "ABBusinessArrangement2", "ABLocumArrangement", "ABPractitionerNumber", "SKDoctorNumber", "SKDoctorBillingNumber", "MBPractitionerNumber", "ONPractitionerNumber", "NSBusinessArrangement", "NSBusinessArrangement2", "NSLocumArrangement", "NSServiceProviderNumber", "ONCPSO", "PROVIDER_LICENSE_NUMBER" ]
            },
            "value" : {
              "type" : "string",
              "description" : "Provider identifier value",
              "example" : "11122"
            }
          },
          "description" : "The provider identifier data transfer object."
        },
        "ProviderTypeDto" : {
          "type" : "object",
          "properties" : {
            "typeId" : {
              "type" : "integer",
              "description" : "The unique provider type id",
              "format" : "int32",
              "example" : 1
            },
            "parentTypeId" : {
              "type" : "integer",
              "description" : "The unique parent type id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The provider name",
              "example" : "General Surgery"
            },
            "cambianName" : {
              "type" : "string",
              "description" : "The cambian name",
              "example" : "GENERAL_SURGERY"
            },
            "selectable" : {
              "type" : "boolean",
              "description" : "Indication if the provider type is selectable or not",
              "example" : true
            },
            "physician" : {
              "type" : "boolean",
              "description" : "Indication if the provider type is associated with the physician",
              "example" : true
            }
          },
          "description" : "Provider Type data transfer object model"
        },
        "EnvelopeDtoProviderDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/ProviderDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "RelationshipStatusDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The status identity",
              "format" : "int32",
              "example" : 10
            },
            "name" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The status name",
              "example" : "Married"
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indication if the relationship status was deleted or not",
              "example" : false
            }
          },
          "description" : "The Relationship status transfer model object."
        },
        "AppointmentReasonDto" : {
          "type" : "object",
          "properties" : {
            "reasonId" : {
              "type" : "integer",
              "description" : "The unique appointment reason id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the appointment reason",
              "example" : "Checkup"
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "The unique id for the physician associated with this reason. Non-provider specific reasons will have this field set to null.",
              "format" : "int32",
              "example" : 10025
            },
            "shared" : {
              "type" : "boolean",
              "description" : "Indicates if the reason object is shared between all offices",
              "example" : false
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The unique id of the office associated with the reason",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "The appointment reason data transfer object"
        },
        "StatusDto" : {
          "required" : [ "statusAbbreviation", "statusName" ],
          "type" : "object",
          "properties" : {
            "statusId" : {
              "type" : "integer",
              "description" : "The unique status id",
              "format" : "int32",
              "example" : 1
            },
            "statusName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name for the status",
              "example" : "No Show"
            },
            "statusAbbreviation" : {
              "maxLength" : 2,
              "minLength" : 0,
              "type" : "string",
              "description" : "The one or 2 character abbreviation for the status name",
              "example" : "NS"
            },
            "shape" : {
              "type" : "string",
              "description" : "The shape value for the appointment status",
              "enum" : [ "NONE", "CIRCLE", "TRIANGLE", "SQUARE" ]
            },
            "color" : {
              "type" : "object",
              "properties" : {
                "red" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "green" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "blue" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "alpha" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "rgb" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "colorSpace" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "numComponents" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "cs_sRGB" : {
                      "type" : "boolean"
                    }
                  }
                },
                "transparency" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "description" : "The color for the appointment status",
              "example" : "#33CCFF"
            }
          },
          "description" : "The appointment status data transfer object"
        },
        "AppointmentTypeDto" : {
          "type" : "object",
          "properties" : {
            "typeId" : {
              "type" : "integer",
              "description" : "The appointment type id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The appointment type name",
              "example" : "Walk-In"
            },
            "color" : {
              "type" : "object",
              "properties" : {
                "red" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "green" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "blue" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "alpha" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "rgb" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "colorSpace" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "numComponents" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "cs_sRGB" : {
                      "type" : "boolean"
                    }
                  }
                },
                "transparency" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "description" : "Indicated color of the appointment type"
            },
            "shared" : {
              "type" : "boolean",
              "description" : "Indicates if the appointment type object is shared between multiple offices",
              "example" : true
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The office id",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "The appointment type model"
        },
        "PriorityDto" : {
          "type" : "object",
          "properties" : {
            "priorityId" : {
              "type" : "integer",
              "description" : "The unique id for the priority",
              "format" : "int32",
              "example" : 1
            },
            "priorityName" : {
              "type" : "string",
              "description" : "The name for the priority",
              "example" : "Urgent"
            }
          },
          "description" : "Appointment Priority data transfer object model"
        },
        "SiteDto" : {
          "type" : "object",
          "properties" : {
            "siteId" : {
              "type" : "integer",
              "description" : "The site id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The appointment site name",
              "example" : "Examination Room 1"
            },
            "abbreviation" : {
              "type" : "string",
              "description" : "The appointment site abbreviation",
              "example" : "EX1"
            },
            "shortName" : {
              "type" : "string",
              "description" : "The appointment site short name",
              "example" : "Exam 1"
            },
            "siteOfficeId" : {
              "type" : "integer",
              "description" : "The office id for the appointment site",
              "format" : "int32",
              "example" : 1
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication of the appointment site is active or not",
              "example" : true
            }
          },
          "description" : "The appointment site transfer model object."
        },
        "AuthGrantTypeDetail" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "The user name",
              "example" : "DavidDoctor"
            },
            "userId" : {
              "type" : "integer",
              "description" : "The user ID",
              "format" : "int32",
              "example" : 1
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Physician ID",
              "format" : "int32",
              "example" : 25863
            },
            "name" : {
              "type" : "string",
              "description" : "FirstName + LastName",
              "example" : "David Doctor"
            },
            "phones" : {
              "type" : "array",
              "description" : "The person's listed phone numbers",
              "items" : {
                "$ref" : "#/components/schemas/Phone"
              }
            },
            "addresses" : {
              "type" : "array",
              "description" : "The person's listed addresses. Addresses are ordered as follows:\n\n1.Primary Address.\n\n2.Secondary Address\n\n3.All subsequent addresses.\n\nFor the primary and secondary addresses, the location id of the address can be null. However, for all subsequent addresses the location id must be set and valid.",
              "items" : {
                "$ref" : "#/components/schemas/UserInfoAddressDto"
              }
            },
            "email" : {
              "type" : "string",
              "description" : "Email address",
              "example" : "david@me.com"
            },
            "officeRoles" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "Office Roles",
              "items" : {
                "$ref" : "#/components/schemas/OfficeRoleDto"
              }
            }
          }
        },
        "OfficeRoleDto" : {
          "type" : "object",
          "properties" : {
            "officeId" : {
              "type" : "integer",
              "description" : "The office id",
              "format" : "int32"
            },
            "roleIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "The role ids",
              "items" : {
                "type" : "integer",
                "description" : "The role ids",
                "format" : "int32"
              }
            }
          },
          "description" : "Office Roles"
        },
        "PatientCredentialDetail" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "FirstName + LastName",
              "example" : "David Doctor"
            },
            "insurer" : {
              "type" : "string",
              "description" : "The associated insurer"
            },
            "referringProvider" : {
              "type" : "string",
              "description" : "The referring provider"
            },
            "familyProvider" : {
              "type" : "string",
              "description" : "The family provider"
            },
            "enrolledProvider" : {
              "type" : "string",
              "description" : "The enrolled provider"
            },
            "officeProvider" : {
              "type" : "string",
              "description" : "The office provider"
            },
            "occupation" : {
              "type" : "string",
              "description" : "The occupation"
            },
            "phones" : {
              "type" : "array",
              "description" : "The person's listed phone numbers",
              "items" : {
                "$ref" : "#/components/schemas/Phone"
              }
            },
            "addresses" : {
              "type" : "array",
              "description" : "The person's listed addresses. Addresses are ordered as follows:\n\n1.Primary Address.\n\n2.Secondary Address\n\n3.All subsequent addresses.\n\nFor the primary and secondary addresses, the location id of the address can be null. However, for all subsequent addresses the location id must be set and valid.",
              "items" : {
                "$ref" : "#/components/schemas/UserInfoAddressDto"
              }
            },
            "email" : {
              "type" : "string",
              "description" : "Email address",
              "example" : "david@me.com"
            }
          }
        },
        "Phone" : {
          "type" : "object",
          "properties" : {
            "phoneId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "number" : {
              "type" : "string"
            },
            "ext" : {
              "type" : "string"
            },
            "equipType" : {
              "type" : "string"
            },
            "usage" : {
              "type" : "string"
            },
            "notes" : {
              "type" : "string"
            },
            "order" : {
              "type" : "integer",
              "format" : "int32"
            },
            "contactType" : {
              "type" : "string",
              "enum" : [ "Home Phone", "Work Phone", "Cell Phone", "Fax Phone", "Office Phone", "Email" ]
            }
          },
          "description" : "The person's listed phone numbers"
        },
        "UserInfoAddressDto" : {
          "type" : "object",
          "properties" : {
            "address" : {
              "type" : "string",
              "description" : "Address",
              "example" : "1212 Main Street"
            },
            "city" : {
              "type" : "string",
              "description" : "The city name",
              "example" : "Vancouver"
            },
            "postalCode" : {
              "type" : "string",
              "description" : "The postal code",
              "example" : "V5X4B3"
            },
            "province" : {
              "type" : "string",
              "description" : "Province",
              "example" : "BC"
            },
            "country" : {
              "type" : "string",
              "description" : "Country",
              "example" : "Canada"
            }
          },
          "description" : "The person's listed addresses. Addresses are ordered as follows:\n\n1.Primary Address.\n\n2.Secondary Address\n\n3.All subsequent addresses.\n\nFor the primary and secondary addresses, the location id of the address can be null. However, for all subsequent addresses the location id must be set and valid."
        },
        "UserInfoDto" : {
          "type" : "object",
          "properties" : {
            "patientCredentialDetail" : {
              "$ref" : "#/components/schemas/PatientCredentialDetail"
            },
            "authGrantTypeDetail" : {
              "$ref" : "#/components/schemas/AuthGrantTypeDetail"
            },
            "oauthClientId" : {
              "type" : "string",
              "description" : "OAuth Client ID"
            },
            "scopes" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "Scopes",
              "items" : {
                "type" : "string",
                "description" : "Scopes"
              }
            },
            "grantType" : {
              "type" : "string",
              "description" : "Grant Type"
            },
            "tenant" : {
              "type" : "string",
              "description" : "Tenant"
            },
            "province" : {
              "type" : "string",
              "description" : "Province"
            }
          },
          "description" : "Data Transfer Object for user information"
        },
        "EnvelopeDtoOfficeDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/OfficeDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "UserTaskDto" : {
          "required" : [ "officeIdAssignedFrom", "officeIdAssignedTo", "reason", "taskDueDate" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The task identity",
              "format" : "int32",
              "example" : 10
            },
            "assignedToUserIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "All users assigned to  task",
              "example" : [ 1, 2, 3 ],
              "items" : {
                "type" : "integer",
                "description" : "All users assigned to  task",
                "format" : "int32"
              }
            },
            "assignedToRoleIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "All roles assigned to  task",
              "example" : [ 1, 2, 3 ],
              "items" : {
                "type" : "integer",
                "description" : "All roles assigned to  task",
                "format" : "int32"
              }
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient assigned to  task",
              "format" : "int32"
            },
            "reason" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The task reason",
              "example" : "daily task"
            },
            "notes" : {
              "maxLength" : 2048,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task notes",
              "example" : "Finish up prior to patient next visit"
            },
            "priority" : {
              "type" : "string",
              "description" : "Task priority level",
              "example" : "Urgent",
              "enum" : [ "Normal", "Urgent", "Very_Urgent" ]
            },
            "completed" : {
              "type" : "boolean",
              "description" : "Whether task completed",
              "example" : true
            },
            "completedDate" : {
              "type" : "string",
              "description" : "Task completed date",
              "example" : "2020-10-10T16:55:38.027"
            },
            "completedBy" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task completed by username",
              "example" : "Super user"
            },
            "createdBy" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task created by username",
              "example" : "Super user"
            },
            "createdById" : {
              "type" : "integer",
              "description" : "Task created by identity",
              "format" : "int32",
              "example" : 101
            },
            "createdOn" : {
              "type" : "string",
              "description" : "Task created date",
              "example" : "2020-10-10T15:41:56.453"
            },
            "officeIdAssignedTo" : {
              "type" : "integer",
              "description" : "Task assigned to users or roles under which office",
              "format" : "int32"
            },
            "officeIdAssignedFrom" : {
              "type" : "integer",
              "description" : "Task assigned from which office",
              "format" : "int32"
            },
            "taskDueDate" : {
              "type" : "string",
              "description" : "Task due date",
              "format" : "date",
              "example" : "2020-10-10"
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Whether task deleted",
              "example" : true
            }
          },
          "description" : "Data Transfer Object for user task"
        },
        "EnvelopeDtoUserTaskDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/UserTaskDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "EnvelopeDtoAccuroUserDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/AccuroUserDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "AuthorizedClientDto" : {
          "required" : [ "clientId", "clientName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "clientUuid" : {
              "type" : "string",
              "format" : "uuid"
            },
            "clientId" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string"
            },
            "clientName" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string"
            },
            "serviceUserId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "createdDateTimeUtc" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        },
        "EnvelopeDtoAuthorizedClientDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/AuthorizedClientDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "SpecialServiceFeeDto" : {
          "required" : [ "correlationId", "description", "editableFlag", "emergencySend", "feeCode", "feeType", "id", "linkToRxFlag", "province", "quantity", "specialServiceFeeActive", "specialServiceFeeType", "storeEnabledForCash", "useUcFeeFlag" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the special service fee. No size validation added because column length is not same in all provinces",
              "format" : "int32",
              "example" : 12
            },
            "feeCode" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Code of the fee",
              "example" : "THN"
            },
            "province" : {
              "maxLength" : 2,
              "minLength" : 0,
              "type" : "string",
              "description" : "Province where the fee is applicable",
              "example" : "ON"
            },
            "description" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Description of the special service fee",
              "example" : "NALOXONE"
            },
            "thirdPartyInstanceId" : {
              "type" : "integer",
              "description" : "ID of the third party instance, nullable",
              "format" : "int32",
              "nullable" : true,
              "example" : 12
            },
            "thirdPartyInstanceName" : {
              "maxLength" : 70,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the third party instance, nullable",
              "nullable" : true,
              "example" : "telus"
            },
            "specialServiceFeeType" : {
              "maxLength" : 4,
              "minLength" : 0,
              "type" : "string",
              "description" : "Type of the fee",
              "example" : "$"
            },
            "updatedDatetimeUtc" : {
              "type" : "string",
              "description" : "UTC datetime of the last update if its null it will be set to current utc timestamp",
              "example" : "2024-12-30T20:20:20"
            },
            "emergencySend" : {
              "type" : "boolean",
              "description" : "Flag indicating whether this is an emergency send. Default value is false",
              "example" : false
            },
            "correlationId" : {
              "maxLength" : 36,
              "minLength" : 0,
              "type" : "string",
              "description" : "Correlation ID for tracking",
              "example" : "guid"
            },
            "specialServiceFeeActive" : {
              "maxLength" : 1,
              "minLength" : 0,
              "type" : "string",
              "description" : "Status of SSF (tpsf_id)",
              "example" : "A"
            },
            "thirdPartyType" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Third Party Type",
              "example" : "PRIVT"
            },
            "thirdPartyCode" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Third Party Code",
              "example" : "GS"
            },
            "thirdPartyFeeCode" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Fee Codes values are driven by the Third Party agreements",
              "example" : "1"
            },
            "feeAmount" : {
              "type" : "number",
              "description" : "Fee Amount",
              "example" : 1.25
            },
            "formulaId" : {
              "type" : "integer",
              "description" : "Formula ID FK with Formula Table in HealthWATCH",
              "format" : "int32",
              "example" : 3079
            },
            "specialServiceFeeDisposition" : {
              "maxLength" : 4,
              "minLength" : 0,
              "type" : "string",
              "description" : "Special Service Fee Disposition",
              "example" : "SSF"
            },
            "timeRequired" : {
              "type" : "integer",
              "description" : "Time Required",
              "format" : "int32",
              "example" : 10
            },
            "pseudoDin" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "Pseudo DIN 8-digit numeric value",
              "example" : "22222222"
            },
            "quantity" : {
              "type" : "number",
              "description" : "Quantity",
              "example" : 1.0
            },
            "catalogNumber" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "Catalog Number",
              "example" : "12345678"
            },
            "autoAddFlag" : {
              "type" : "boolean",
              "description" : "Auto Add Flag",
              "example" : false
            },
            "editableFlag" : {
              "type" : "boolean",
              "description" : "Editable Flag",
              "example" : false
            },
            "linkToRxFlag" : {
              "type" : "boolean",
              "description" : "Link to Rx Flag",
              "example" : false
            },
            "useUcFeeFlag" : {
              "type" : "boolean",
              "description" : "Use U&C Fee Flag",
              "example" : false
            },
            "storeEnabledForCash" : {
              "type" : "boolean",
              "description" : "Store Enabled for Cash Flag (Indicates if the Cash Special Service Fee is enabled in HealthWATCH)",
              "example" : true
            },
            "drugUpcId" : {
              "type" : "integer",
              "description" : "Drug UPC ID",
              "format" : "int32",
              "example" : 1
            },
            "dispensedQuantity" : {
              "type" : "number",
              "description" : "Dispensed Quantity"
            },
            "formulaName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Formula name",
              "example" : "abc"
            },
            "feeType" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "FeeType",
              "example" : "F"
            }
          },
          "description" : "Data Transfer Object for special service fee"
        },
        "ExternalIdentitySystemDto" : {
          "required" : [ "name", "vendorName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "External identity System id",
              "format" : "int64",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "External identity System name",
              "example" : "SQUID"
            },
            "vendorName" : {
              "type" : "string",
              "description" : "Vendor name and please see Vendor object",
              "example" : "QHR"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date on UTC(read-only)",
              "example" : "2020-06-09T23:39:59.500"
            }
          }
        },
        "ExternalUserIdentityDto" : {
          "required" : [ "identifier" ],
          "type" : "object",
          "properties" : {
            "accuroUserId" : {
              "type" : "integer",
              "description" : "Accuro user id",
              "format" : "int32",
              "example" : 1
            },
            "externalIdSystemId" : {
              "type" : "integer",
              "description" : "External identity system id",
              "format" : "int64",
              "example" : 1
            },
            "identifier" : {
              "type" : "string",
              "description" : "Unique External user identity id.",
              "example" : "3ae75011-1d20-4333-9691-xxxxxxxxxx"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date on UTC(read-only)",
              "example" : "2020-06-09T23:39:59.500"
            },
            "version" : {
              "type" : "string",
              "description" : "Version",
              "example" : "1"
            },
            "validFromDateUtc" : {
              "type" : "string",
              "description" : "Valid from the date on UTC",
              "example" : "2020-06-09T23:39:59.500"
            },
            "validToDateUtc" : {
              "type" : "string",
              "description" : "Valid to the date on UTC",
              "example" : "2020-06-10T23:39:59.500"
            }
          },
          "description" : "External User Identity data transfer object"
        },
        "Attr" : {
          "type" : "object",
          "properties" : {
            "schemaTypeInfo" : {
              "$ref" : "#/components/schemas/TypeInfo"
            },
            "specified" : {
              "type" : "boolean"
            },
            "ownerElement" : {
              "$ref" : "#/components/schemas/Element"
            },
            "id" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string"
            },
            "value" : {
              "type" : "string"
            },
            "nodeValue" : {
              "type" : "string"
            },
            "nodeType" : {
              "type" : "integer",
              "format" : "int32"
            },
            "parentNode" : {
              "$ref" : "#/components/schemas/Node"
            },
            "firstChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "lastChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "previousSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "nextSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "ownerDocument" : {
              "$ref" : "#/components/schemas/Document"
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "localName" : {
              "type" : "string"
            },
            "baseURI" : {
              "type" : "string"
            },
            "textContent" : {
              "type" : "string"
            },
            "attributes" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "prefix" : {
              "type" : "string"
            },
            "childNodes" : {
              "$ref" : "#/components/schemas/NodeList"
            },
            "nodeName" : {
              "type" : "string"
            }
          }
        },
        "DOMConfiguration" : {
          "type" : "object",
          "properties" : {
            "parameterNames" : {
              "$ref" : "#/components/schemas/DOMStringList"
            }
          }
        },
        "DOMImplementation" : {
          "type" : "object"
        },
        "DOMStringList" : {
          "type" : "object",
          "properties" : {
            "length" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "Document" : {
          "type" : "object",
          "properties" : {
            "doctype" : {
              "$ref" : "#/components/schemas/DocumentType"
            },
            "documentElement" : {
              "$ref" : "#/components/schemas/Element"
            },
            "xmlStandalone" : {
              "type" : "boolean"
            },
            "xmlVersion" : {
              "type" : "string"
            },
            "strictErrorChecking" : {
              "type" : "boolean"
            },
            "documentURI" : {
              "type" : "string"
            },
            "domConfig" : {
              "$ref" : "#/components/schemas/DOMConfiguration"
            },
            "xmlEncoding" : {
              "type" : "string"
            },
            "inputEncoding" : {
              "type" : "string"
            },
            "implementation" : {
              "$ref" : "#/components/schemas/DOMImplementation"
            },
            "nodeValue" : {
              "type" : "string"
            },
            "nodeType" : {
              "type" : "integer",
              "format" : "int32"
            },
            "parentNode" : {
              "$ref" : "#/components/schemas/Node"
            },
            "firstChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "lastChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "previousSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "nextSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "ownerDocument" : {
              "$ref" : "#/components/schemas/Document"
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "localName" : {
              "type" : "string"
            },
            "baseURI" : {
              "type" : "string"
            },
            "textContent" : {
              "type" : "string"
            },
            "attributes" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "prefix" : {
              "type" : "string"
            },
            "childNodes" : {
              "$ref" : "#/components/schemas/NodeList"
            },
            "nodeName" : {
              "type" : "string"
            }
          }
        },
        "DocumentType" : {
          "type" : "object",
          "properties" : {
            "entities" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "notations" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "publicId" : {
              "type" : "string"
            },
            "internalSubset" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "systemId" : {
              "type" : "string"
            },
            "nodeValue" : {
              "type" : "string"
            },
            "nodeType" : {
              "type" : "integer",
              "format" : "int32"
            },
            "parentNode" : {
              "$ref" : "#/components/schemas/Node"
            },
            "firstChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "lastChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "previousSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "nextSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "ownerDocument" : {
              "$ref" : "#/components/schemas/Document"
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "localName" : {
              "type" : "string"
            },
            "baseURI" : {
              "type" : "string"
            },
            "textContent" : {
              "type" : "string"
            },
            "attributes" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "prefix" : {
              "type" : "string"
            },
            "childNodes" : {
              "$ref" : "#/components/schemas/NodeList"
            },
            "nodeName" : {
              "type" : "string"
            }
          }
        },
        "Element" : {
          "type" : "object",
          "properties" : {
            "tagName" : {
              "type" : "string"
            },
            "attributeNode" : {
              "$ref" : "#/components/schemas/Attr"
            },
            "attributeNodeNS" : {
              "$ref" : "#/components/schemas/Attr"
            },
            "schemaTypeInfo" : {
              "$ref" : "#/components/schemas/TypeInfo"
            },
            "nodeValue" : {
              "type" : "string"
            },
            "nodeType" : {
              "type" : "integer",
              "format" : "int32"
            },
            "parentNode" : {
              "$ref" : "#/components/schemas/Node"
            },
            "firstChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "lastChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "previousSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "nextSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "ownerDocument" : {
              "$ref" : "#/components/schemas/Document"
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "localName" : {
              "type" : "string"
            },
            "baseURI" : {
              "type" : "string"
            },
            "textContent" : {
              "type" : "string"
            },
            "attributes" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "prefix" : {
              "type" : "string"
            },
            "childNodes" : {
              "$ref" : "#/components/schemas/NodeList"
            },
            "nodeName" : {
              "type" : "string"
            }
          }
        },
        "Entitlement" : {
          "type" : "object",
          "properties" : {
            "entitlementId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "entitlementTypeId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "entitlementType" : {
              "type" : "string"
            },
            "enforcement" : {
              "type" : "boolean"
            },
            "maxQuantity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "acronLevel" : {
              "type" : "boolean"
            },
            "loggableView" : {
              "$ref" : "#/components/schemas/XMLElement"
            }
          }
        },
        "NamedNodeMap" : {
          "type" : "object",
          "properties" : {
            "namedItem" : {
              "$ref" : "#/components/schemas/Node"
            },
            "namedItemNS" : {
              "$ref" : "#/components/schemas/Node"
            },
            "length" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "Node" : {
          "type" : "object",
          "properties" : {
            "nodeValue" : {
              "type" : "string"
            },
            "nodeType" : {
              "type" : "integer",
              "format" : "int32"
            },
            "parentNode" : {
              "$ref" : "#/components/schemas/Node"
            },
            "firstChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "lastChild" : {
              "$ref" : "#/components/schemas/Node"
            },
            "previousSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "nextSibling" : {
              "$ref" : "#/components/schemas/Node"
            },
            "ownerDocument" : {
              "$ref" : "#/components/schemas/Document"
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "localName" : {
              "type" : "string"
            },
            "baseURI" : {
              "type" : "string"
            },
            "textContent" : {
              "type" : "string"
            },
            "attributes" : {
              "$ref" : "#/components/schemas/NamedNodeMap"
            },
            "prefix" : {
              "type" : "string"
            },
            "childNodes" : {
              "$ref" : "#/components/schemas/NodeList"
            },
            "nodeName" : {
              "type" : "string"
            }
          }
        },
        "NodeList" : {
          "type" : "object",
          "properties" : {
            "length" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "TypeInfo" : {
          "type" : "object",
          "properties" : {
            "typeNamespace" : {
              "type" : "string"
            },
            "typeName" : {
              "type" : "string"
            }
          }
        },
        "XMLElement" : {
          "type" : "object",
          "properties" : {
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/XMLElement"
              }
            },
            "text" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "attributes" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "namespaceURI" : {
              "type" : "string"
            },
            "namespacePrefix" : {
              "type" : "string"
            },
            "document" : {
              "$ref" : "#/components/schemas/Document"
            },
            "loggableView" : {
              "$ref" : "#/components/schemas/XMLElement"
            }
          }
        },
        "EntitlementDto" : {
          "required" : [ "enforcement", "id", "isAcronLevel", "maxQuantity", "type" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the entitlement.",
              "format" : "int32",
              "example" : 1
            },
            "type" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "entitlement type. if it does not exist, it will be created in db",
              "example" : "ACCURO_LOGIN"
            },
            "enforcement" : {
              "type" : "boolean",
              "description" : "Enforcement",
              "example" : false
            },
            "maxQuantity" : {
              "type" : "integer",
              "description" : "max quantity of entitlement",
              "format" : "int32",
              "example" : 10
            },
            "isAcronLevel" : {
              "type" : "boolean",
              "description" : "Acron entitlement. True means the entitlement is not tied to a license",
              "example" : false
            }
          },
          "description" : "Data Transfer Object for Entitlement"
        },
        "EnvelopeDtoEntitlementDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/EntitlementDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "LicenseDataDto" : {
          "required" : [ "entitlements", "id", "maxQuantity", "name", "userIds", "uuid" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the license",
              "format" : "int32",
              "example" : 1
            },
            "uuid" : {
              "type" : "string",
              "description" : "UUID of the license",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "name" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the license",
              "example" : "Standard License"
            },
            "maxQuantity" : {
              "type" : "integer",
              "description" : "Maximum quantity of the license",
              "format" : "int32",
              "example" : 10
            },
            "userIds" : {
              "type" : "array",
              "description" : "List of user IDs",
              "items" : {
                "type" : "integer",
                "description" : "List of user IDs",
                "format" : "int32"
              }
            },
            "entitlements" : {
              "type" : "array",
              "description" : "List of entitlements",
              "items" : {
                "$ref" : "#/components/schemas/EntitlementDto"
              }
            }
          },
          "description" : "Data Transfer Object for LicenseData"
        },
        "EnvelopeDtoLicenseDataDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/LicenseDataDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "AccuroUserProviderClaimDaysDto" : {
          "type" : "object",
          "properties" : {
            "accuroUserProviderReference" : {
              "$ref" : "#/components/schemas/AccuroUserProviderReferenceDto"
            },
            "daysWithEligibleClaims" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DayWithClaimsDto"
              }
            }
          },
          "description" : "Data Transfer Object for AccuroUserProviderClaimDays"
        },
        "AccuroUserProviderReferenceDto" : {
          "type" : "object",
          "properties" : {
            "accuroUserId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "providerId" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "description" : "Data Transfer Object for AccuroUserProviderReference"
        },
        "DayWithClaimsDto" : {
          "type" : "object",
          "properties" : {
            "date" : {
              "type" : "string",
              "format" : "date"
            },
            "hasSubmittedClaims" : {
              "type" : "boolean"
            }
          },
          "description" : "Data Transfer Object for DayWithClaims"
        },
        "LicensingUsageTrackingDto" : {
          "type" : "object",
          "properties" : {
            "licensingUsageTrackingId" : {
              "type" : "integer",
              "description" : "Id of the license usage",
              "format" : "int32",
              "example" : 1
            },
            "userId" : {
              "type" : "integer",
              "description" : "Id of the User",
              "format" : "int32",
              "example" : 1
            },
            "licenseUuid" : {
              "type" : "string",
              "description" : "UUID of the license",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "entitlementType" : {
              "type" : "string",
              "description" : "Type of the entitlement",
              "example" : "ACCURO_LOGIN"
            },
            "activityDate" : {
              "type" : "string",
              "description" : "Date of the activity",
              "example" : "2025-04-13T00:00:00.000"
            }
          },
          "description" : "Data Transfer Object for LicensingUsageTrackingDto"
        },
        "EnvelopeDtoMaskDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/MaskDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "AlbertaDetailsDto" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "maxLength" : 4,
              "type" : "string",
              "description" : "The person type. Person type codes are as follows:<ul>\n<li>PYST - Payee</li>\n<li>RECP - Service Recipient</li>\n<li>RFRC - Out of Province Referring Service Provider</li>\n</ul>",
              "example" : "PYST",
              "enum" : [ "PYST", "RECP", "RFRC" ]
            },
            "newBornCode" : {
              "maxLength" : 4,
              "type" : "string",
              "description" : "New born code. Now born codes are as follows:\n<ul>\n<li>ADOP - Adoption</li>\n<li>LVBR - Live Birth</li>\n<li>MULT - Multiple Birth</li>\n<li>STBN - Still Born</li>\n</ul>",
              "example" : "ADOP",
              "enum" : [ "ADOP", "LVBR", "MULT", "STBN" ]
            },
            "guardianUli" : {
              "maxLength" : 9,
              "type" : "string",
              "description" : "Guardian ULI (PHN)",
              "example" : "234-123-564"
            },
            "guardianRegistration" : {
              "maxLength" : 12,
              "type" : "string",
              "description" : "Guardian Registration",
              "example" : "123"
            },
            "uli2" : {
              "$ref" : "#/components/schemas/PersonalHealthCardDto"
            }
          },
          "description" : "Alberta specific patient details."
        },
        "AppointmentHistoryDto" : {
          "type" : "object",
          "properties" : {
            "history_id" : {
              "type" : "integer",
              "description" : "Unique appointment history id",
              "format" : "int32",
              "example" : 1
            },
            "appointment_id" : {
              "type" : "integer",
              "description" : "ID of the appointment",
              "format" : "int32",
              "example" : 1
            },
            "patient_id" : {
              "type" : "integer",
              "description" : "ID of the patient associated with the appointment this point in the history",
              "format" : "int32",
              "example" : 1
            },
            "appointment_date" : {
              "type" : "string",
              "description" : "Date of the appointment at this point in the history",
              "example" : "2017-11-29"
            },
            "start_time" : {
              "type" : "string",
              "description" : "Start time, in 12 hour time, of the appointment at this point in the history",
              "example" : "8:00am"
            },
            "provider_name" : {
              "type" : "string",
              "description" : "Scheduling Provider of the appointment at this point in the history",
              "example" : "Doe, Jane"
            },
            "billing_provider_name" : {
              "type" : "string",
              "description" : "Billing Provider of the appointment at this point in the history",
              "example" : "Smith, John"
            },
            "username" : {
              "type" : "string",
              "description" : "User who initiated the state change of the appointment",
              "example" : "daviddoctor"
            },
            "timestamp" : {
              "type" : "string",
              "description" : "Date time of the appointment at this point in the history",
              "example" : "2012-02-15T07:44:59.000"
            },
            "action_type" : {
              "type" : "string",
              "description" : "Appointment Action Type enum",
              "example" : "MedeoBookingRequestCreated",
              "enum" : [ "NotSet", "Created", "Edited", "Copied", "Moved", "Cancelled", "Deleted", "Confirmed", "Unconfirmed", "Arrived", "PatientArrived", "PatientLeft", "CustomStatusRemoved", "CustomStatusAdded", "Restored", "PatientCancelled", "MedeoBookingRequestCreated", "MedeoBookingRequestAccepted", "MedeoBookingRequestRejected" ]
            },
            "action_reason" : {
              "type" : "string",
              "description" : "Description of the state change that occurred",
              "example" : "Request created"
            },
            "appointment_type" : {
              "type" : "string",
              "description" : "Appointment type at this point in the history",
              "example" : "Checkup"
            },
            "appointment_reason" : {
              "type" : "string",
              "description" : "Appointment reason at this point in the history",
              "example" : "Health concerns"
            }
          },
          "description" : "AppointmentHistory data transfer object model."
        },
        "AppointmentMaterialsDto" : {
          "type" : "object",
          "properties" : {
            "roomIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "ID of the room(s) in which appointment is scheduled",
              "example" : [ 100, 102 ],
              "items" : {
                "type" : "integer",
                "description" : "ID of the room(s) in which appointment is scheduled",
                "format" : "int32"
              }
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "Unique identifier for this appointment",
              "format" : "int32",
              "example" : 18911
            },
            "date" : {
              "type" : "string",
              "description" : "Appointment date",
              "example" : "2017-11-29"
            },
            "startTime" : {
              "type" : "integer",
              "description" : "The appointment start time in 24 hour time as an integer",
              "format" : "int32",
              "example" : 1300
            },
            "endTime" : {
              "type" : "integer",
              "description" : "The appointment end time in 24 hour time as an integer",
              "format" : "int32",
              "example" : 1315
            },
            "subColumn" : {
              "type" : "integer",
              "description" : "Sub column of the appointment. Appointments with overlapping times cannot have the same sub-column, otherwise they conflict. Sub columns start at zero.",
              "format" : "int32",
              "example" : 1
            },
            "appointmentPatients" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of patients who are scheduled on the appointment",
              "items" : {
                "$ref" : "#/components/schemas/AppointmentPatientDto"
              }
            },
            "appointmentHistory" : {
              "type" : "array",
              "description" : "The state history of this appointment (created, updated, cancelled, arrived, etc)",
              "items" : {
                "$ref" : "#/components/schemas/AppointmentHistoryDto"
              }
            },
            "resourceId" : {
              "type" : "integer",
              "description" : "The id of the resource associated with the appointment.Should be null if provider scheduling is used.",
              "format" : "int32",
              "example" : 34
            },
            "provider" : {
              "$ref" : "#/components/schemas/ProviderDto"
            },
            "office" : {
              "$ref" : "#/components/schemas/OfficeDto"
            },
            "site" : {
              "$ref" : "#/components/schemas/SiteDto"
            },
            "groupAppointmentId" : {
              "type" : "integer",
              "description" : "The id of the associated group appointment record. Will be null if the appointment is not a group appointment.",
              "format" : "int32",
              "example" : 34
            },
            "groupAppointment" : {
              "type" : "boolean",
              "description" : "Indicates if appointment is associated to group appointments for not",
              "example" : true
            },
            "notes" : {
              "type" : "string",
              "description" : "Note that will display in the appointment view in Accuro",
              "example" : "Patient would like to discuss flu vaccines"
            },
            "appointmentReason" : {
              "$ref" : "#/components/schemas/AppointmentReasonDto"
            },
            "appointmentType" : {
              "$ref" : "#/components/schemas/AppointmentTypeDto"
            },
            "location" : {
              "$ref" : "#/components/schemas/LocationDto"
            },
            "statuses" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of custom statuses set to this appointment",
              "items" : {
                "$ref" : "#/components/schemas/StatusDto"
              }
            },
            "alerts" : {
              "type" : "string",
              "description" : "Pop-up note, It will be displayed when clicked on the appointment",
              "example" : "Ask for updated phone number on arrival"
            },
            "rowVersion" : {
              "type" : "integer",
              "description" : "The current version of the appointment record. The value of the number only has meaning when compared to other rowversions.",
              "format" : "int64",
              "example" : 218147251623
            },
            "billOnly" : {
              "type" : "boolean"
            },
            "cancelled" : {
              "type" : "boolean"
            },
            "accessionNumber" : {
              "type" : "string",
              "description" : "Accession number associated with the appointment.",
              "readOnly" : true,
              "example" : "2020-00-022244"
            }
          },
          "description" : "AppointmentMaterials object including various models related tothe  appointments"
        },
        "AppointmentPatientDto" : {
          "type" : "object",
          "properties" : {
            "patient" : {
              "$ref" : "#/components/schemas/PatientDto"
            },
            "arrived" : {
              "type" : "boolean",
              "description" : "Arrived status for this patient",
              "example" : true
            },
            "confirmed" : {
              "type" : "boolean",
              "description" : "Confirmed status for this patient",
              "example" : true
            },
            "noShow" : {
              "type" : "boolean",
              "description" : "No show status for this patient",
              "example" : true
            },
            "customProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string",
                "description" : "Custom properties for this patient"
              },
              "description" : "Custom properties for this patient"
            }
          },
          "description" : "A set of patients who are scheduled on the appointment"
        },
        "DemographicsDto" : {
          "required" : [ "firstName", "genderId", "lastName" ],
          "type" : "object",
          "properties" : {
            "firstName" : {
              "maxLength" : 100,
              "type" : "string",
              "description" : "The person's first name",
              "example" : "John"
            },
            "lastName" : {
              "maxLength" : 100,
              "type" : "string",
              "description" : "The person's last name",
              "example" : "Doe"
            },
            "middleName" : {
              "maxLength" : 100,
              "type" : "string",
              "description" : "The person's middle name",
              "nullable" : true,
              "example" : "Smith"
            },
            "title" : {
              "maxLength" : 50,
              "type" : "string",
              "description" : "The person's honorific (Mrs., Dr., etc.)",
              "nullable" : true,
              "example" : "Mr."
            },
            "suffix" : {
              "maxLength" : 10,
              "type" : "string",
              "description" : "The person's name suffix (Jr., Sr., etc.)",
              "nullable" : true,
              "example" : "Sr."
            },
            "birthday" : {
              "type" : "string",
              "description" : "The person's date of birth",
              "example" : "1959-02-16T00:00:00.000-0800"
            },
            "genderId" : {
              "type" : "integer",
              "description" : "The person's gender",
              "format" : "int32",
              "example" : 1
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailDto"
            },
            "phones" : {
              "type" : "array",
              "description" : "The person's listed phone numbers",
              "nullable" : true,
              "items" : {
                "$ref" : "#/components/schemas/PhoneDto"
              }
            },
            "addresses" : {
              "type" : "array",
              "description" : "The person's listed addresses. Addresses are ordered as follows:\n\n1.Primary Address.\n\n2.Secondary Address\n\n3.All subsequent addresses.\n\nFor the primary and secondary addresses, the location id of the address can be null. However, for all subsequent addresses the location id must be set and valid.",
              "nullable" : true,
              "items" : {
                "$ref" : "#/components/schemas/AddressDto"
              }
            },
            "healthCard" : {
              "$ref" : "#/components/schemas/PersonalHealthCardDto"
            },
            "preferredContactType" : {
              "type" : "string",
              "description" : "The ContactType enum. Defines the contact type for a phone number.",
              "nullable" : true,
              "example" : "WorkPhone",
              "enum" : [ "HomePhone", "WorkPhone", "CellPhone", "FaxPhone", "OfficePhone", "Email" ]
            },
            "nextKinName" : {
              "maxLength" : 50,
              "type" : "string",
              "description" : "The persons's listed next of kin",
              "nullable" : true,
              "example" : "Jane Doe"
            },
            "nextKinPhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "officialLanguageCode" : {
              "type" : "string",
              "description" : "ISO_639-2 Language Code representing the official language of the person",
              "nullable" : true,
              "example" : "eng"
            },
            "spokenLanguageCode" : {
              "type" : "string",
              "description" : "ISO_639-2 language Code representing the person's primary spoken language",
              "nullable" : true,
              "example" : "bul"
            },
            "relationshipStatusId" : {
              "type" : "integer",
              "description" : "The person's relationship status. Built in statuses are as follows:\n\n1.Single\n\n2.Married\n\n3.Widow\n\n4.Widower\n\n5.Separated\n\n6.Unknown\n\n",
              "format" : "int32",
              "nullable" : true,
              "example" : 2
            }
          },
          "description" : "Demographics of a person associated with Accuro, e.g. patient."
        },
        "ManitobaDetailsDto" : {
          "type" : "object",
          "properties" : {
            "healthRegistrationNumber" : {
              "maxLength" : 3,
              "type" : "string",
              "description" : "The health registration number",
              "example" : "123"
            }
          },
          "description" : "Manitoba specific patient details."
        },
        "NovaScotiaDetailsDto" : {
          "type" : "object",
          "properties" : {
            "guardianHcn" : {
              "type" : "string",
              "description" : "The patients guardian health card number",
              "example" : "123-234-123"
            },
            "secondaryHealthCard" : {
              "$ref" : "#/components/schemas/PersonalHealthCardDto"
            },
            "lastUpdatedDatetime" : {
              "type" : "string",
              "description" : "The last updated date time",
              "example" : "2000-05-31T00:00:00.000-0800"
            }
          },
          "description" : "Nova Scotia specific patient details."
        },
        "OntarioDetailsDto" : {
          "type" : "object",
          "properties" : {
            "limitedUseCode" : {
              "type" : "integer",
              "description" : "Limited use code",
              "format" : "int32",
              "example" : 481
            }
          },
          "description" : "Ontario specific details"
        },
        "PatientDto" : {
          "required" : [ "demographics", "insurerId", "patientStatusId" ],
          "type" : "object",
          "properties" : {
            "enrolledProvideTerminationReason" : {
              "type" : "string",
              "enum" : [ "PATIENT_DECEASED", "PATIENT_MOVED", "PATIENT_LEFT_PROVINCE", "PATIENT_ERROR", "PATIENT_LEFT_PRIMARY_CARE", "CLINIC_PROVIDER_REQUEST", "PATIENT_REQUEST", "OTHER", "ENDED_BY_MOH_HN_ERROR", "ENDED_BY_MOH_DECEASED", "ADDED_IN_ERROR", "ENDED_BY_MOH_CHANGED_RED_WHITE", "ENDED_BY_MOH_CHANGED_PHOTO", "ENDED_BY_MOH_CLASSIFIED", "ROSTER_TRANSFER", "REENROLLED", "ENTERED_LTC", "LEFT_LTC", "ASSIGNED_MEMBER_ENDED", "MEMBER_DECEASED", "ENDED_BY_MOH_CRITERIA_REASSIGNED", "ENTERED_LTC_PHYSICIAN", "ENDED_BY_PHYSICIAN", "ENDED_BY_TIME_LIMITED_TRANSFER", "ENDED_BY_MOH_CRITERIA", "ENDED_BY_PHYSICIAN_PATIENT_MOVED", "ENDED_BY_PHYSICIAN_PATIENT_MOVED_PROV", "ENDED_BY_PHYSICIAN_PATIENT_REQUEST", "ENDED_BY_MOH_PATIENT_REQUEST", "ENDED_BY_MOH_OUT_OF_AREA", "ENDED_BY_MOH_NOT_ELIGIBLE", "GEO_ACTIVATED", "GEO_DEACTIVATED", "ENDED_BY_MOH_NOT_ELIGABLE2", "ENDED_BY_MOH_NOT_ELIGABLE3", "ENDED_BY_ROSTER_TRANSFER", "NO_CONFIRMATION", "ENDED_BY_MOH_CLASSIFIED2", "ENDED_BY_MOH_CLASSIFIED3", "ENDED_BY_MOH_CLASSIFIED4" ]
            },
            "enrolledProviderTerminationReason" : {
              "type" : "string",
              "description" : "The termination reason of the patient's enrolled provider",
              "enum" : [ "PATIENT_DECEASED", "PATIENT_MOVED", "PATIENT_LEFT_PROVINCE", "PATIENT_ERROR", "PATIENT_LEFT_PRIMARY_CARE", "CLINIC_PROVIDER_REQUEST", "PATIENT_REQUEST", "OTHER", "ENDED_BY_MOH_HN_ERROR", "ENDED_BY_MOH_DECEASED", "ADDED_IN_ERROR", "ENDED_BY_MOH_CHANGED_RED_WHITE", "ENDED_BY_MOH_CHANGED_PHOTO", "ENDED_BY_MOH_CLASSIFIED", "ROSTER_TRANSFER", "REENROLLED", "ENTERED_LTC", "LEFT_LTC", "ASSIGNED_MEMBER_ENDED", "MEMBER_DECEASED", "ENDED_BY_MOH_CRITERIA_REASSIGNED", "ENTERED_LTC_PHYSICIAN", "ENDED_BY_PHYSICIAN", "ENDED_BY_TIME_LIMITED_TRANSFER", "ENDED_BY_MOH_CRITERIA", "ENDED_BY_PHYSICIAN_PATIENT_MOVED", "ENDED_BY_PHYSICIAN_PATIENT_MOVED_PROV", "ENDED_BY_PHYSICIAN_PATIENT_REQUEST", "ENDED_BY_MOH_PATIENT_REQUEST", "ENDED_BY_MOH_OUT_OF_AREA", "ENDED_BY_MOH_NOT_ELIGIBLE", "GEO_ACTIVATED", "GEO_DEACTIVATED", "ENDED_BY_MOH_NOT_ELIGABLE2", "ENDED_BY_MOH_NOT_ELIGABLE3", "ENDED_BY_ROSTER_TRANSFER", "NO_CONFIRMATION", "ENDED_BY_MOH_CLASSIFIED2", "ENDED_BY_MOH_CLASSIFIED3", "ENDED_BY_MOH_CLASSIFIED4" ]
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Unique id of a patient",
              "format" : "int32",
              "example" : 18911
            },
            "demographics" : {
              "$ref" : "#/components/schemas/DemographicsDto"
            },
            "familyProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients family provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "enrolledProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients enrolled provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "officeProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients office provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 2
            },
            "referringProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients referring provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "insurerId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id for the patients insurer",
              "format" : "int32",
              "example" : 2
            },
            "fileNumber" : {
              "maxLength" : 30,
              "type" : "string",
              "description" : " The patients file number",
              "nullable" : true,
              "example" : "22-12345"
            },
            "uuid" : {
              "type" : "string",
              "description" : "The mapped uuid for the patient id. Read only.",
              "readOnly" : true,
              "example" : "dca20596-e35e-325f-56a4-3190281a020f"
            },
            "registrationNumber" : {
              "maxLength" : 20,
              "type" : "string",
              "description" : "The patient registration number",
              "nullable" : true,
              "example" : "123"
            },
            "paperChartNote" : {
              "maxLength" : 255,
              "type" : "string",
              "description" : "A note for the patients paper chart",
              "nullable" : true,
              "example" : " A note"
            },
            "paperChart" : {
              "type" : "boolean",
              "description" : "Indication if the patient has a paper chart",
              "example" : false
            },
            "patientStatusId" : {
              "type" : "integer",
              "description" : "The patients status id",
              "format" : "int32",
              "example" : 1
            },
            "gestationAge" : {
              "type" : "string",
              "description" : "The patients gestation age",
              "example" : "2017-11-08T00:00:00.000-0800"
            },
            "employerContactId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The employer contact id",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "pharmacyContactId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The pharmacy contact id",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "referredDate" : {
              "type" : "string",
              "description" : "Patient referred date",
              "example" : "2017-11-08T00:00:00.000-0800"
            },
            "onSocialAssistance" : {
              "type" : "boolean",
              "description" : "Indication if the patient is on social assistance",
              "example" : false
            },
            "hasArchivedRecords" : {
              "type" : "boolean",
              "description" : "Indication if the patient has archived records",
              "example" : false
            },
            "deceased" : {
              "type" : "boolean",
              "description" : "Indication if the patient is deceased",
              "example" : false
            },
            "deceasedDate" : {
              "type" : "string",
              "description" : "Patient deceased date",
              "example" : "2017-11-08T00:00:00.000-0800"
            },
            "occupation" : {
              "maxLength" : 50,
              "type" : "string",
              "description" : "Patient occupation",
              "nullable" : true,
              "example" : "Lawyer"
            },
            "alert" : {
              "$ref" : "#/components/schemas/PatientFlagDto"
            },
            "albertaDetails" : {
              "$ref" : "#/components/schemas/AlbertaDetailsDto"
            },
            "ontarioDetails" : {
              "$ref" : "#/components/schemas/OntarioDetailsDto"
            },
            "novaScotiaDetails" : {
              "$ref" : "#/components/schemas/NovaScotiaDetailsDto"
            },
            "manitobaDetails" : {
              "$ref" : "#/components/schemas/ManitobaDetailsDto"
            }
          },
          "description" : "Patient V1 object"
        },
        "PatientFlagDto" : {
          "type" : "object",
          "properties" : {
            "message" : {
              "type" : "string",
              "description" : "A message",
              "example" : "A message"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "Date of last update",
              "example" : "2016-02-16T00:00:00.000-0800"
            },
            "flagUser" : {
              "type" : "integer",
              "description" : "Flag user represents who created/updated the global message.",
              "format" : "int32",
              "example" : 12
            }
          },
          "description" : "A representation of a message, either global, personal or based on a role that is shown when a patient is viewed. This message has an associated time."
        },
        "PersonalHealthCardDto" : {
          "type" : "object",
          "properties" : {
            "phn" : {
              "type" : "string",
              "description" : "A personal health card number",
              "example" : "123133"
            },
            "locationId" : {
              "type" : "integer",
              "description" : "A unique location id for the personal health card",
              "format" : "int32",
              "example" : 1
            },
            "expiry" : {
              "type" : "string",
              "description" : "The expiry date for the personal health card number",
              "example" : "2017-11-29T19:43:40.013-0800"
            }
          },
          "description" : "The personal health card data object."
        },
        "EnvelopeDtoAppointmentMaterialsDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/AppointmentMaterialsDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "CustomFieldDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "Custom field name",
              "example" : "Custom Field"
            },
            "type" : {
              "type" : "string",
              "description" : "Type is either TEXT or DROPDOWN",
              "example" : "TEXT",
              "enum" : [ "TEXT", "DROPDOWN" ]
            },
            "order" : {
              "type" : "integer",
              "description" : "Custom field order",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Custom fields which can used for the patients."
        },
        "FolderDto" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the folder",
              "format" : "int32",
              "example" : 2
            },
            "name" : {
              "type" : "string",
              "description" : "Name of the folder",
              "example" : "Document"
            },
            "subFolders" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of sub folders",
              "example" : [ {
                "id" : 1,
                "name" : "Document"
              }, {
                "id" : 2,
                "name" : "Family History"
              } ],
              "items" : {
                "$ref" : "#/components/schemas/SubFolderDto"
              }
            }
          },
          "description" : "Folder data transfer object model"
        },
        "SubFolderDto" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Sub folder id",
              "format" : "int32",
              "example" : 2
            },
            "name" : {
              "type" : "string",
              "description" : "Sub folder name",
              "example" : "Family History"
            }
          },
          "description" : "Sub folder data transfer object model",
          "example" : [ {
            "id" : 1,
            "name" : "Document"
          }, {
            "id" : 2,
            "name" : "Family History"
          } ]
        },
        "GeneratedLetterDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique identifier of the generated letter",
              "format" : "int32",
              "example" : 1
            },
            "letterId" : {
              "type" : "integer",
              "description" : "The id from which the generated letter is generated",
              "format" : "int32",
              "example" : 1
            },
            "referralOrderId" : {
              "type" : "integer",
              "description" : "The eReferral order id associated with this generated letter. Null if no eReferral order id associated",
              "format" : "int32",
              "example" : 12
            },
            "letterVersion" : {
              "type" : "integer",
              "description" : "The version of the letter",
              "format" : "int32",
              "example" : 2
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "The physician id",
              "format" : "int32",
              "example" : 15002
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The office id",
              "format" : "int32",
              "example" : 10
            },
            "userId" : {
              "type" : "integer",
              "description" : "The id of accuro user who creates the generated letter",
              "format" : "int32",
              "example" : 9
            },
            "targetId" : {
              "type" : "integer",
              "description" : "The target id for the generated letter",
              "format" : "int32",
              "example" : 8
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "The appointment id",
              "format" : "int32",
              "example" : 11
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The patient id",
              "format" : "int32",
              "example" : 10
            },
            "cc" : {
              "type" : "integer",
              "description" : "The flag indicating if the letter is copied to the target",
              "format" : "int32",
              "example" : 1
            },
            "withCoverSheet" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is with a cover sheet",
              "example" : true
            },
            "finalized" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is finalized",
              "example" : false
            },
            "withAttachments" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is with attachments",
              "example" : true
            },
            "queue" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is queued",
              "example" : true
            },
            "status" : {
              "type" : "string",
              "description" : "Referral status of the generated letter",
              "example" : "NO_FILE",
              "enum" : [ "NO_FILE", "FILE_READY", "FILE_RETRIEVED" ]
            },
            "targetType" : {
              "type" : "string",
              "description" : "The type of the target",
              "example" : "Physician"
            },
            "title" : {
              "type" : "string",
              "description" : "The title of the generated letter"
            },
            "generateTo" : {
              "type" : "string",
              "description" : "The recipient name of the generated letter",
              "example" : "Doctor David"
            },
            "generatedTime" : {
              "type" : "string",
              "description" : "The timestamp of the generated Letter",
              "example" : "2018-06-27T00:00:00.000"
            },
            "username" : {
              "type" : "string",
              "description" : "The user name of the generated letter",
              "example" : "Doctor Bob"
            },
            "extension" : {
              "type" : "string",
              "description" : "The extension of the generated letter",
              "example" : "pdf"
            }
          },
          "description" : "Generated letter data transfer object model"
        },
        "EnvelopeDtoGeneratedLetterDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/GeneratedLetterDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "InsurerDto" : {
          "type" : "object",
          "properties" : {
            "insurerId" : {
              "type" : "integer",
              "description" : "Unique insurer id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "Name of insurer",
              "example" : "ICBC"
            },
            "officePhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "faxPhone" : {
              "$ref" : "#/components/schemas/PhoneDto"
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailDto"
            },
            "address" : {
              "$ref" : "#/components/schemas/AddressDto"
            },
            "private" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider if private or not",
              "example" : false
            },
            "taxExempt" : {
              "type" : "boolean",
              "description" : "Indication if the insurer is tax exempt",
              "example" : true
            },
            "externalId" : {
              "type" : "string",
              "description" : "The insurance provider's external id",
              "example" : "1"
            },
            "zeroBillAmount" : {
              "type" : "boolean",
              "description" : "Indication if zero bill amount applies to the insurance provider",
              "example" : true
            },
            "forAllPatients" : {
              "type" : "boolean",
              "description" : "Indication if the insurer can be applied to all patients",
              "example" : false
            },
            "isIcbc" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider belongs to ICBC or not",
              "example" : true
            },
            "isWcb" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider belongs to WCB or not",
              "example" : false
            },
            "isMsp" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider belongs to MSP or not",
              "example" : false
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider is active or not",
              "example" : true
            },
            "displayName" : {
              "type" : "string",
              "description" : "The insurance provider's display name",
              "example" : "ICBC"
            },
            "groupCode" : {
              "type" : "string",
              "description" : "The insurer's group code",
              "example" : "1"
            },
            "priceListId" : {
              "type" : "integer",
              "description" : "Price list id",
              "format" : "int32",
              "example" : 1
            },
            "immediatePaymentRequired" : {
              "type" : "boolean",
              "description" : "Indication if immediate payment is required for this insurer",
              "example" : true
            },
            "sortPriority" : {
              "type" : "integer",
              "description" : "Insurer's sort priority",
              "format" : "int32",
              "example" : 2
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indication if the insurance provider has been deleted or not",
              "example" : false
            },
            "regionalMedicalAssociates" : {
              "type" : "boolean",
              "description" : "Indication if the insurer is a regional medical associate",
              "example" : false
            }
          },
          "description" : "Insurer data transfer object model"
        },
        "LabLinkGroupReadOnlyDto" : {
          "type" : "object",
          "properties" : {
            "linkGroupId" : {
              "type" : "integer",
              "description" : "Unique id for lab link group.",
              "format" : "int32",
              "example" : 34
            },
            "primaryResultId" : {
              "type" : "integer",
              "description" : "Id of the primary lab result.",
              "format" : "int32",
              "example" : 3
            },
            "linkedLabResults" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "Set of all the lab results linked to the group.",
              "items" : {
                "$ref" : "#/components/schemas/LabResultDto"
              }
            }
          },
          "description" : "Lab link group data transfer object model"
        },
        "NewPatientLetterDto" : {
          "type" : "object",
          "properties" : {
            "typeId" : {
              "type" : "integer",
              "description" : "Type id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id",
              "format" : "int32",
              "example" : 1
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider id",
              "format" : "int32",
              "example" : 1
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "Appointment id",
              "format" : "int32",
              "example" : 1
            },
            "title" : {
              "type" : "string",
              "description" : "Title of the letter. The title must be set when creating a letter.",
              "example" : "CAGE - Alcohol Screening Questionnaire"
            },
            "content" : {
              "type" : "string",
              "description" : "Content of the letter of any plain or RTF text. The Content must not be null."
            }
          },
          "description" : "PatientLetter data transfer object model"
        },
        "LetterTypeDto" : {
          "type" : "object",
          "properties" : {
            "typeId" : {
              "type" : "integer",
              "description" : "Unique letter type id",
              "format" : "int32",
              "example" : 1
            },
            "typeName" : {
              "type" : "string",
              "description" : "Letter type name",
              "example" : "Clinical Note"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication if the letter type is currently active",
              "example" : true
            },
            "abbreviation" : {
              "type" : "string",
              "description" : "Letter type abbreviation",
              "example" : "CN"
            }
          },
          "description" : "Letter type data transfer object model"
        },
        "EnvelopeDtoLetterDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/LetterDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "LetterDto" : {
          "type" : "object",
          "properties" : {
            "goal" : {
              "type" : "boolean"
            },
            "xml" : {
              "type" : "boolean"
            },
            "id" : {
              "type" : "integer",
              "description" : "The id of the letter",
              "format" : "int32"
            },
            "letterId" : {
              "type" : "integer",
              "description" : "The letter id of the letter",
              "format" : "int32"
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "The physician id of the letter",
              "format" : "int32"
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The patient id of the letter",
              "format" : "int32"
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "The appointment id of the letter",
              "format" : "int32"
            },
            "content" : {
              "type" : "string",
              "description" : "The text content of the letter"
            },
            "title" : {
              "type" : "string",
              "description" : "The title of the letter"
            },
            "created" : {
              "type" : "string",
              "description" : "The timestamp of the Letter created",
              "example" : "2025-02-27T16:05:10.000"
            },
            "modified" : {
              "type" : "string",
              "description" : "The timestamp of the Letter updated",
              "example" : "2025-02-27T16:05:10.000"
            },
            "version" : {
              "type" : "integer",
              "description" : "The version of the letter",
              "format" : "int32",
              "example" : 2
            },
            "userId" : {
              "type" : "integer",
              "description" : "User id of the letter",
              "format" : "int32",
              "example" : 8
            },
            "reviewed" : {
              "type" : "string",
              "description" : "The timestamp of the Letter reviewed",
              "example" : "2025-02-27T16:05:10.000"
            },
            "reviewedBy" : {
              "type" : "integer",
              "description" : "The reviewer's user id of the letter",
              "format" : "int32",
              "example" : 6
            },
            "locked" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is locked",
              "example" : false
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is deleted",
              "example" : false
            },
            "maskId" : {
              "type" : "integer",
              "description" : "The mask id of the letter",
              "format" : "int32",
              "example" : 5
            },
            "creator" : {
              "type" : "integer",
              "description" : "The creator's user id of the letter",
              "format" : "int32",
              "example" : 8
            },
            "isGoal" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is goal",
              "example" : true
            },
            "goalSuccessful" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is goal successful",
              "example" : true
            },
            "goalDate" : {
              "type" : "string",
              "description" : "The timestamp of the goal of the Letter",
              "example" : "2025-02-27T16:05:10.000"
            },
            "activeVersion" : {
              "type" : "boolean",
              "description" : "Indicates if this version of letter is active",
              "example" : true
            },
            "typeId" : {
              "type" : "integer",
              "description" : "The type id of the letter",
              "format" : "int32",
              "example" : 2
            },
            "inInbox" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is inbox",
              "example" : true
            },
            "transcribedDate" : {
              "type" : "string",
              "description" : "The timestamp of the Letter transcribed",
              "example" : "2025-02-27T16:05:10.000"
            },
            "isXml" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is in xml format",
              "example" : false
            },
            "archived" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is archived",
              "example" : false
            },
            "letterRead" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is read",
              "example" : true
            },
            "subType" : {
              "type" : "string",
              "description" : "Sub type of the letter"
            },
            "autosaved" : {
              "type" : "boolean",
              "description" : "Indicates if the letter is auto saved",
              "example" : true
            }
          },
          "description" : "Letter data transfer object model"
        },
        "LimitedUseCodeDto" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "integer",
              "description" : "Limited use code",
              "format" : "int32",
              "example" : 236
            },
            "description" : {
              "type" : "string",
              "description" : "Description of the limited use code",
              "example" : "For the treatment of Paget's disease. LU Authorization Period: Indefinite"
            }
          },
          "description" : "LimitedUseCode data transfer model"
        },
        "PatientAlertFlagDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Patient flag id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the patient flag",
              "example" : "Critical Attn Needed"
            }
          },
          "description" : "Patient Flag data transfer object model"
        },
        "PatientChartLockDto" : {
          "required" : [ "patientId" ],
          "type" : "object",
          "properties" : {
            "patientChartLockId" : {
              "type" : "integer",
              "description" : "The patient chart lock id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The patient id",
              "format" : "int32",
              "example" : 1
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "The physician id. Read-only field and its value would be set as the physician Id associated to the Accuro user.",
              "format" : "int32",
              "example" : 1
            },
            "allProviders" : {
              "type" : "boolean",
              "description" : "If the chart lock is for all providers or not. Default value is false. Note: allProviders and hasExceptions cannot be true at the same time.",
              "example" : true
            },
            "hasExceptions" : {
              "type" : "boolean",
              "description" : "If the patient chart lock has exception users for access. Read-only field and it would be set to true or false by the system depending upon the user IDs passed in the patient chart lock exception object. ",
              "example" : true
            },
            "exceptions" : {
              "type" : "array",
              "description" : "List of patient chart lock exception DTO",
              "items" : {
                "$ref" : "#/components/schemas/PatientChartLockExceptionDto"
              }
            }
          },
          "description" : "Patient chart lock Data transfer object"
        },
        "PatientChartLockExceptionDto" : {
          "required" : [ "userId" ],
          "type" : "object",
          "properties" : {
            "exceptionId" : {
              "type" : "integer",
              "description" : "The patient chart lock exception id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id. Read-only field.",
              "format" : "int32",
              "example" : 1
            },
            "userId" : {
              "type" : "integer",
              "description" : "User id",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Patient chart lock exception Data transfer object"
        },
        "AliasDto" : {
          "required" : [ "aliasType", "firstName", "lastName" ],
          "type" : "object",
          "properties" : {
            "aliasId" : {
              "type" : "integer",
              "description" : "Patient alias ID",
              "format" : "int32",
              "example" : 1
            },
            "firstName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "First name",
              "example" : "Jonathan"
            },
            "lastName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Last name",
              "example" : "Doe"
            },
            "aliasType" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The type of alias. This is a dynamic variable defined in Accuro.",
              "example" : "AliasType"
            }
          },
          "description" : "Alias model object. The Patient Alias is an alternative name that the patient may be known by."
        },
        "JsonNode" : {
          "type" : "object"
        },
        "Attachment" : {
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "object" : {
              "type" : "object"
            },
            "contentType" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string"
                },
                "subtype" : {
                  "type" : "string"
                },
                "parameters" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                },
                "wildcardType" : {
                  "type" : "boolean"
                },
                "wildcardSubtype" : {
                  "type" : "boolean"
                }
              }
            },
            "contentDisposition" : {
              "$ref" : "#/components/schemas/ContentDisposition"
            },
            "contentId" : {
              "type" : "string"
            },
            "dataHandler" : {
              "type" : "object",
              "properties" : {
                "dataSource" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "inputStream" : {
                      "type" : "object"
                    },
                    "contentType" : {
                      "type" : "string"
                    },
                    "outputStream" : {
                      "type" : "object"
                    }
                  }
                },
                "name" : {
                  "type" : "string"
                },
                "inputStream" : {
                  "type" : "object"
                },
                "content" : {
                  "type" : "object"
                },
                "contentType" : {
                  "type" : "string"
                },
                "outputStream" : {
                  "type" : "object"
                },
                "commandMap" : {
                  "type" : "object",
                  "properties" : {
                    "mimeTypes" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "writeOnly" : true
                },
                "transferDataFlavors" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "mimeType" : {
                        "type" : "string"
                      },
                      "humanPresentableName" : {
                        "type" : "string"
                      },
                      "representationClassInputStream" : {
                        "type" : "boolean"
                      },
                      "representationClassByteBuffer" : {
                        "type" : "boolean"
                      },
                      "flavorTextType" : {
                        "type" : "boolean"
                      },
                      "representationClassReader" : {
                        "type" : "boolean"
                      },
                      "representationClassCharBuffer" : {
                        "type" : "boolean"
                      },
                      "representationClassSerializable" : {
                        "type" : "boolean"
                      },
                      "representationClassRemote" : {
                        "type" : "boolean"
                      },
                      "mimeTypeSerializedObject" : {
                        "type" : "boolean"
                      },
                      "defaultRepresentationClassAsString" : {
                        "type" : "string"
                      },
                      "flavorSerializedObjectType" : {
                        "type" : "boolean"
                      },
                      "flavorRemoteObjectType" : {
                        "type" : "boolean"
                      },
                      "flavorJavaFileListType" : {
                        "type" : "boolean"
                      },
                      "subType" : {
                        "type" : "string"
                      },
                      "primaryType" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "preferredCommands" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "commandName" : {
                        "type" : "string"
                      },
                      "commandClass" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "allCommands" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "commandName" : {
                        "type" : "string"
                      },
                      "commandClass" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "description" : "File binary",
          "format" : "binary"
        },
        "ContentDisposition" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string"
            },
            "parameters" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "filename" : {
              "type" : "string"
            }
          }
        },
        "PictureMultipartDefinition" : {
          "type" : "object",
          "properties" : {
            "profilePicture" : {
              "$ref" : "#/components/schemas/Attachment"
            }
          }
        },
        "AddressV2Dto" : {
          "type" : "object",
          "properties" : {
            "street" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Street of the address",
              "example" : "102 Maple Street"
            },
            "city" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "City name of the address",
              "example" : "Vancouver"
            },
            "postalZip" : {
              "type" : "string",
              "description" : "Postal or zip code of the Address",
              "example" : "A1A2B2"
            },
            "locationId" : {
              "type" : "integer",
              "description" : "Unique location identifier of the Address",
              "format" : "int32",
              "example" : 10
            },
            "note" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Note of the Address",
              "example" : "A quick note"
            },
            "type" : {
              "maxLength" : 10,
              "minLength" : 0,
              "type" : "string",
              "description" : "The address type",
              "example" : "Civil"
            },
            "start" : {
              "type" : "string",
              "description" : "Effective start date of the address",
              "example" : "2019-03-06T00:00:00.000"
            },
            "end" : {
              "type" : "string",
              "description" : "Effective end date of the address",
              "example" : "2020-03-31T00:00:00.000"
            },
            "masks" : {
              "type" : "array",
              "description" : "The collection of masks on address",
              "items" : {
                "$ref" : "#/components/schemas/MaskDto"
              }
            }
          },
          "description" : "Address data transfer object model. In any of these fields - note, type, start or end - are null, they will not be shown in the response object.Example shown here is the ideal scenario where all the fields are not null.",
          "nullable" : true
        },
        "AlbertaDetailsV2Dto" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "pattern" : "(^$|PYST|RECP|RFRC)",
              "type" : "string",
              "description" : "The person type. Person type codes are as follows:<ul>\n<li>PYST - Payee</li>\n<li>RECP - Service Recipient</li>\n<li>RFRC - Out of Province Referring Service Provider</li>\n</ul>",
              "example" : "PYST",
              "enum" : [ "PYST", "RECP", "RFRC" ]
            },
            "newBornCode" : {
              "pattern" : "(^$|ADOP|LVBR|MULT|STBN)",
              "type" : "string",
              "description" : "New born code. Now born codes are as follows:\n<ul>\n<li>ADOP - Adoption</li>\n<li>LVBR - Live Birth</li>\n<li>MULT - Multiple Birth</li>\n<li>STBN - Still Born</li>\n</ul>",
              "example" : "ADOP",
              "enum" : [ "ADOP", "LVBR", "MULT", "STBN" ]
            },
            "guardianUli" : {
              "maxLength" : 9,
              "minLength" : 0,
              "type" : "string",
              "description" : "Guardian ULI (PHN)",
              "example" : "234-123-564"
            },
            "guardianRegistration" : {
              "maxLength" : 12,
              "minLength" : 0,
              "type" : "string",
              "description" : "Guardian Registration",
              "example" : "123"
            },
            "uli2" : {
              "$ref" : "#/components/schemas/PersonalHealthCardV2Dto"
            }
          },
          "description" : "Alberta specific patient details."
        },
        "DemographicsV2Dto" : {
          "required" : [ "firstName", "genderId", "lastName" ],
          "type" : "object",
          "properties" : {
            "firstName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The person's first name",
              "example" : "John"
            },
            "lastName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The person's last name",
              "example" : "Doe"
            },
            "middleName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The person's middle name",
              "nullable" : true,
              "example" : "Smith"
            },
            "title" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The person's honorific (Mrs., Dr., etc.)",
              "nullable" : true,
              "example" : "Mr."
            },
            "suffix" : {
              "maxLength" : 10,
              "minLength" : 0,
              "type" : "string",
              "description" : "The person's name suffix (Jr., Sr., etc.)",
              "nullable" : true,
              "example" : "Sr."
            },
            "birthday" : {
              "type" : "string",
              "description" : "The person's date of birth. Note: this field is required for create patient if the preference setting in Accuro is set to required.",
              "example" : "1959-02-16"
            },
            "genderId" : {
              "type" : "integer",
              "description" : "The person's gender",
              "format" : "int32",
              "example" : 1
            },
            "email" : {
              "$ref" : "#/components/schemas/EmailV2Dto"
            },
            "phones" : {
              "type" : "array",
              "description" : "The person's listed phone numbers",
              "nullable" : true,
              "items" : {
                "$ref" : "#/components/schemas/PhoneV2Dto"
              }
            },
            "addresses" : {
              "type" : "array",
              "description" : "The person's listed addresses. Addresses are ordered as follows:\n\n1.Primary Address.\n\n2.Secondary Address\n\n3.All subsequent addresses.\n\nFor the primary and secondary addresses, the location id of the address can be null. However, for all subsequent addresses the location id must be set and valid.",
              "nullable" : true,
              "items" : {
                "$ref" : "#/components/schemas/AddressV2Dto"
              }
            },
            "healthCard" : {
              "$ref" : "#/components/schemas/PersonalHealthCardV2Dto"
            },
            "preferredContactType" : {
              "type" : "string",
              "description" : "The ContactType enum. Defines the contact type for a phone number.",
              "nullable" : true,
              "example" : "WorkPhone",
              "enum" : [ "HomePhone", "WorkPhone", "CellPhone", "FaxPhone", "OfficePhone", "Email" ]
            },
            "nextKinName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The persons's listed next of kin",
              "nullable" : true,
              "example" : "Jane Doe"
            },
            "nextKinPhone" : {
              "$ref" : "#/components/schemas/PhoneV2Dto"
            },
            "officialLanguageCode" : {
              "maxLength" : 3,
              "minLength" : 0,
              "type" : "string",
              "description" : "ISO_639-2 Language Code representing the official language of the person",
              "nullable" : true,
              "example" : "eng"
            },
            "spokenLanguageCode" : {
              "maxLength" : 3,
              "minLength" : 0,
              "type" : "string",
              "description" : "ISO_639-2 language Code representing the person's primary spoken language",
              "nullable" : true,
              "example" : "bul"
            },
            "relationshipStatusId" : {
              "type" : "integer",
              "description" : "The person's relationship status. Built in statuses are as follows:\n\n1.Single\n\n2.Married\n\n3.Widow\n\n4.Widower\n\n5.Separated\n\n6.Unknown\n\n",
              "format" : "int32",
              "nullable" : true,
              "example" : 2
            }
          },
          "description" : "Demographics of a person associated with Accurodecd, e.g. patient."
        },
        "ManitobaDetailsV2Dto" : {
          "type" : "object",
          "properties" : {
            "healthRegistrationNumber" : {
              "maxLength" : 6,
              "minLength" : 0,
              "type" : "string",
              "description" : "The health registration number",
              "example" : "123"
            }
          },
          "description" : "Manitoba specific patient details."
        },
        "MedeoPatientIdDto" : {
          "type" : "object",
          "properties" : {
            "medeoId" : {
              "type" : "integer",
              "description" : "The id of the Medeo patient. This field is read only.",
              "format" : "int32",
              "readOnly" : true,
              "example" : 18911
            },
            "medeoPatientUuid" : {
              "type" : "string",
              "description" : "The UUID of the Medeo patient. This field is read only.",
              "format" : "uuid",
              "readOnly" : true,
              "example" : "dca20596-e35e-325f-56a4-3190281a020f"
            },
            "medeoUserUuid" : {
              "type" : "string",
              "description" : "The UUID of the Medeo user. This field is read only.",
              "format" : "uuid",
              "readOnly" : true,
              "example" : "dca20596-e35e-325f-56a4-3190281a020f"
            }
          },
          "description" : "Medeo Patient Identifiers"
        },
        "NovaScotiaDetailsV2Dto" : {
          "type" : "object",
          "properties" : {
            "guardianHcn" : {
              "maxLength" : 9,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patients guardian health card number",
              "example" : "123-234-123"
            },
            "secondaryHealthCard" : {
              "$ref" : "#/components/schemas/PersonalHealthCardV2Dto"
            },
            "lastUpdatedDatetime" : {
              "type" : "string",
              "description" : "The last updated date time",
              "example" : "2000-05-31T00:00:00.000"
            }
          },
          "description" : "Nova Scotia specific patient details."
        },
        "OntarioDetailsV2Dto" : {
          "type" : "object",
          "properties" : {
            "validationStatus" : {
              "type" : "boolean",
              "description" : "The valid flag",
              "example" : true
            },
            "validationMessage" : {
              "maxLength" : 150,
              "minLength" : 0,
              "type" : "string",
              "description" : "The validation message",
              "example" : "valid"
            },
            "admissionDate" : {
              "type" : "string",
              "description" : "The admission date",
              "format" : "date",
              "example" : "2000-05-31"
            },
            "dischargeDate" : {
              "type" : "string",
              "description" : "The discharge date",
              "format" : "date",
              "example" : "2000-05-31"
            },
            "masterNumber" : {
              "type" : "integer",
              "description" : "The master number",
              "format" : "int32",
              "example" : 123
            }
          },
          "description" : "Ontario specific patient details."
        },
        "PatientFlagV2Dto" : {
          "type" : "object",
          "properties" : {
            "message" : {
              "maxLength" : 400,
              "minLength" : 0,
              "type" : "string",
              "description" : "A message",
              "example" : "A message"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "Date of last update",
              "example" : "2016-02-16T00:00:00.000"
            },
            "flagUser" : {
              "type" : "integer",
              "description" : "Flag user represents who created/updated the global message.",
              "format" : "int32",
              "example" : 12
            }
          },
          "description" : "A representation of a message, either global, personal or based on a role that is shown when a patient is viewed. This message has an associated time.",
          "nullable" : true
        },
        "PatientV2Dto" : {
          "required" : [ "patientStatusId" ],
          "type" : "object",
          "properties" : {
            "enrolledProvideTerminationReason" : {
              "type" : "string",
              "enum" : [ "PATIENT_DECEASED", "PATIENT_MOVED", "PATIENT_LEFT_PROVINCE", "PATIENT_ERROR", "PATIENT_LEFT_PRIMARY_CARE", "CLINIC_PROVIDER_REQUEST", "PATIENT_REQUEST", "OTHER", "ENDED_BY_MOH_HN_ERROR", "ENDED_BY_MOH_DECEASED", "ADDED_IN_ERROR", "ENDED_BY_MOH_CHANGED_RED_WHITE", "ENDED_BY_MOH_CHANGED_PHOTO", "ENDED_BY_MOH_CLASSIFIED", "ROSTER_TRANSFER", "REENROLLED", "ENTERED_LTC", "LEFT_LTC", "ASSIGNED_MEMBER_ENDED", "MEMBER_DECEASED", "ENDED_BY_MOH_CRITERIA_REASSIGNED", "ENTERED_LTC_PHYSICIAN", "ENDED_BY_PHYSICIAN", "ENDED_BY_TIME_LIMITED_TRANSFER", "ENDED_BY_MOH_CRITERIA", "ENDED_BY_PHYSICIAN_PATIENT_MOVED", "ENDED_BY_PHYSICIAN_PATIENT_MOVED_PROV", "ENDED_BY_PHYSICIAN_PATIENT_REQUEST", "ENDED_BY_MOH_PATIENT_REQUEST", "ENDED_BY_MOH_OUT_OF_AREA", "ENDED_BY_MOH_NOT_ELIGIBLE", "GEO_ACTIVATED", "GEO_DEACTIVATED", "ENDED_BY_MOH_NOT_ELIGABLE2", "ENDED_BY_MOH_NOT_ELIGABLE3", "ENDED_BY_ROSTER_TRANSFER", "NO_CONFIRMATION", "ENDED_BY_MOH_CLASSIFIED2", "ENDED_BY_MOH_CLASSIFIED3", "ENDED_BY_MOH_CLASSIFIED4" ]
            },
            "enrolledProviderTerminationReason" : {
              "type" : "string",
              "description" : "The termination reason of the patient's enrolled provider",
              "enum" : [ "PATIENT_DECEASED", "PATIENT_MOVED", "PATIENT_LEFT_PROVINCE", "PATIENT_ERROR", "PATIENT_LEFT_PRIMARY_CARE", "CLINIC_PROVIDER_REQUEST", "PATIENT_REQUEST", "OTHER", "ENDED_BY_MOH_HN_ERROR", "ENDED_BY_MOH_DECEASED", "ADDED_IN_ERROR", "ENDED_BY_MOH_CHANGED_RED_WHITE", "ENDED_BY_MOH_CHANGED_PHOTO", "ENDED_BY_MOH_CLASSIFIED", "ROSTER_TRANSFER", "REENROLLED", "ENTERED_LTC", "LEFT_LTC", "ASSIGNED_MEMBER_ENDED", "MEMBER_DECEASED", "ENDED_BY_MOH_CRITERIA_REASSIGNED", "ENTERED_LTC_PHYSICIAN", "ENDED_BY_PHYSICIAN", "ENDED_BY_TIME_LIMITED_TRANSFER", "ENDED_BY_MOH_CRITERIA", "ENDED_BY_PHYSICIAN_PATIENT_MOVED", "ENDED_BY_PHYSICIAN_PATIENT_MOVED_PROV", "ENDED_BY_PHYSICIAN_PATIENT_REQUEST", "ENDED_BY_MOH_PATIENT_REQUEST", "ENDED_BY_MOH_OUT_OF_AREA", "ENDED_BY_MOH_NOT_ELIGIBLE", "GEO_ACTIVATED", "GEO_DEACTIVATED", "ENDED_BY_MOH_NOT_ELIGABLE2", "ENDED_BY_MOH_NOT_ELIGABLE3", "ENDED_BY_ROSTER_TRANSFER", "NO_CONFIRMATION", "ENDED_BY_MOH_CLASSIFIED2", "ENDED_BY_MOH_CLASSIFIED3", "ENDED_BY_MOH_CLASSIFIED4" ]
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Unique id of a patient",
              "format" : "int32",
              "example" : 18911
            },
            "demographics" : {
              "$ref" : "#/components/schemas/DemographicsV2Dto"
            },
            "familyProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients family provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "enrolledProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients enrolled provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "officeProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients office provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 2
            },
            "referringProviderId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id of the patients referring provider",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "insurerId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The id for the patients insurer",
              "format" : "int32",
              "example" : 2
            },
            "fileNumber" : {
              "maxLength" : 30,
              "minLength" : 0,
              "type" : "string",
              "description" : " The patients file number",
              "nullable" : true,
              "example" : "22-12345"
            },
            "uuid" : {
              "type" : "string",
              "description" : "The mapped uuid for the patient id",
              "readOnly" : true,
              "example" : "dca20596-e35e-325f-56a4-3190281a020f"
            },
            "registrationNumber" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patient registration number",
              "nullable" : true,
              "example" : "123"
            },
            "paperChartNote" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "A note for the patients paper chart",
              "nullable" : true,
              "example" : " A note"
            },
            "paperChart" : {
              "type" : "boolean",
              "description" : "Indication if the patient has a paper chart",
              "example" : false
            },
            "patientStatusId" : {
              "type" : "integer",
              "description" : "The patients status id",
              "format" : "int32",
              "example" : 1
            },
            "gestationAge" : {
              "type" : "string",
              "description" : "The patients gestation age",
              "format" : "date",
              "example" : "2017-11-08"
            },
            "employerContactId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The employer contact id",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "pharmacyContactId" : {
              "maximum" : 999999999,
              "type" : "integer",
              "description" : "The pharmacy contact id",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "referredDate" : {
              "type" : "string",
              "description" : "Date of being referred",
              "format" : "date",
              "example" : "2020-09-10"
            },
            "onSocialAssistance" : {
              "type" : "boolean",
              "description" : "Indication if the patient is on social assistance",
              "example" : false
            },
            "hasArchivedRecords" : {
              "type" : "boolean",
              "description" : "Indication if the patient has archived records",
              "example" : false
            },
            "deceased" : {
              "type" : "boolean",
              "description" : "Indication if the patient is deceased",
              "example" : false
            },
            "deceasedDate" : {
              "type" : "string",
              "description" : "Patient deceased date",
              "example" : "2017-11-08T00:00:00.000"
            },
            "occupation" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient occupation",
              "nullable" : true,
              "example" : "Lawyer"
            },
            "alert" : {
              "$ref" : "#/components/schemas/PatientFlagV2Dto"
            },
            "albertaDetails" : {
              "$ref" : "#/components/schemas/AlbertaDetailsV2Dto"
            },
            "ontarioDetails" : {
              "$ref" : "#/components/schemas/OntarioDetailsV2Dto"
            },
            "novaScotiaDetails" : {
              "$ref" : "#/components/schemas/NovaScotiaDetailsV2Dto"
            },
            "manitobaDetails" : {
              "$ref" : "#/components/schemas/ManitobaDetailsV2Dto"
            },
            "medeoPatientIdDto" : {
              "$ref" : "#/components/schemas/MedeoPatientIdDto"
            }
          },
          "description" : "Patient V2 object"
        },
        "PersonalHealthCardV2Dto" : {
          "type" : "object",
          "properties" : {
            "phn" : {
              "type" : "string",
              "description" : "A personal health card number. Note: this field is required for create patient if the preference setting in Accuro is set to required.",
              "example" : "123133"
            },
            "locationId" : {
              "type" : "integer",
              "description" : "A unique location id for the personal health card",
              "format" : "int32",
              "example" : 1
            },
            "expiry" : {
              "type" : "string",
              "description" : "The expiry date for the personal health card number",
              "format" : "date",
              "example" : "2016-02-16"
            }
          },
          "description" : "The personal health card data object."
        },
        "EnvelopeDtoPatientV2Dto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/PatientV2Dto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "PatientUserRoleFlagIdDto" : {
          "type" : "object",
          "properties" : {
            "patientId" : {
              "type" : "integer",
              "description" : "Patient Id",
              "format" : "int32",
              "example" : 1
            },
            "flagId" : {
              "type" : "integer",
              "description" : "RoleId or UserId",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "This object represents PatientId and flagId, flagId can be userId when userFlags are created or roleId when roleFlags are created"
        },
        "PatientRoleFlagDto" : {
          "type" : "object",
          "properties" : {
            "roleId" : {
              "type" : "integer",
              "description" : "Role Id",
              "format" : "int32",
              "example" : 1
            },
            "message" : {
              "type" : "string",
              "description" : "A patient role flag",
              "example" : "A message"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "Date of last update",
              "example" : "2020-01-03T15:27:27.310"
            }
          },
          "description" : "A representation of a message, based on a role that is shown when a patient is viewed. This message has an associated time"
        },
        "PatientUserFlagDto" : {
          "type" : "object",
          "properties" : {
            "userId" : {
              "type" : "integer",
              "description" : "User Id",
              "format" : "int32",
              "example" : 1
            },
            "message" : {
              "type" : "string",
              "description" : "A patient user flag",
              "example" : "A message"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "Date of last update",
              "example" : "2020-01-03T15:27:27.310"
            }
          },
          "description" : "A representation of a personal message that is shown when a patient is viewed. This message has an associated time"
        },
        "LabObservationDto" : {
          "type" : "object",
          "properties" : {
            "observationId" : {
              "type" : "integer",
              "description" : "Unique lab observation ID",
              "format" : "int32",
              "example" : 1
            },
            "observationDate" : {
              "type" : "string",
              "description" : "Lab observation date",
              "example" : "1999-12-11T18:11:25.340"
            },
            "observationNote" : {
              "type" : "string",
              "description" : "Lab observation note",
              "example" : "Example note"
            },
            "observationFlag" : {
              "type" : "string",
              "description" : "Lab observation flag. See the lab_abnormal_flags table for more information on lab observation flags.",
              "example" : "L"
            },
            "observationValue" : {
              "type" : "string",
              "description" : "String value of the lab observation.\n\nThis value is always set, regardless of the data type of the observation.",
              "example" : "13.71"
            },
            "observationNumber" : {
              "type" : "number",
              "description" : "Floating point value of the lab observation\n\nThis value is only set when the data type of the observation is numeric.",
              "example" : 13.70999
            },
            "observationUnits" : {
              "type" : "string",
              "description" : "Unit of measurement for the lab observation",
              "example" : "mg/L"
            },
            "label" : {
              "type" : "string",
              "description" : "The lab observation label.\n\nTypically the same as the name of the result the observation is associated with.",
              "example" : "ACETAMINOPHEN (serum)"
            },
            "resultId" : {
              "type" : "string",
              "description" : "Unique ID for the lab result associated with the lab observation.",
              "example" : "1"
            },
            "observationRange" : {
              "type" : "string",
              "description" : "The reference range for the lab observation.",
              "example" : "10 - 25"
            }
          },
          "description" : "Lab observation data transfer object model"
        },
        "LabGroupDto" : {
          "type" : "object",
          "properties" : {
            "groupId" : {
              "type" : "integer",
              "description" : "The unique identifier of the lab group",
              "format" : "int32",
              "example" : 42
            },
            "baseGroupId" : {
              "type" : "integer",
              "description" : "The base group to which this lab group belongs to.\n\n Lab groups are never updated. Rather, when their state changes a new lab group is created.\n\n The new lab group becomes the next in a series of lab groups called the base group. The id of the initial lab group becomes the base group id.",
              "format" : "int32",
              "example" : 512
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Id of the Accuro patient the lab is associated with",
              "format" : "int32",
              "example" : 15
            },
            "testId" : {
              "type" : "integer",
              "description" : "Id of the lab test this observation group is associated with",
              "format" : "int32",
              "example" : 20
            },
            "sourceId" : {
              "type" : "integer",
              "description" : "Id of the lab source for this Lab",
              "format" : "int32",
              "example" : 5
            },
            "orderingProviderId" : {
              "type" : "integer",
              "description" : "Id of the Accuro provider ordering this lab",
              "format" : "int32",
              "example" : 9
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication if this is the active lab group in the base Group.\n\nThe latest lab group in a series is the current state of the lab group. This is marked by the active flag.\n\n Only one lab group in a base group will be active.",
              "example" : true
            },
            "internalNote" : {
              "type" : "string",
              "description" : "The internal note used for display purposes in Accuro",
              "example" : "An example note"
            },
            "externalNote" : {
              "type" : "string",
              "description" : "The external note for the lab",
              "example" : "An example note"
            },
            "collectionDate" : {
              "type" : "string",
              "description" : "The date, the lab group was collected. Date of collection.",
              "example" : "1999-12-11T18:11:25.340"
            },
            "transactionDate" : {
              "type" : "string",
              "description" : "Date of lab group transaction",
              "example" : "2017-12-07T13:38:00.000"
            },
            "observationDate" : {
              "type" : "string",
              "description" : "Date of lab group observation",
              "example" : "2017-12-07T13:38:00.000"
            },
            "versionDate" : {
              "type" : "string",
              "description" : "Date of lab group version",
              "example" : "2017-12-07T13:38:00.000"
            },
            "reviewWithPatient" : {
              "type" : "boolean",
              "description" : "Indication of the lab will be reviewed with the patient",
              "example" : true
            },
            "observations" : {
              "type" : "array",
              "description" : "A list of lab observation DTOs",
              "items" : {
                "$ref" : "#/components/schemas/LabObservationDto"
              }
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string",
                "description" : "The map of lab group metadata"
              },
              "description" : "The map of lab group metadata"
            }
          },
          "description" : "Lab group data transfer object model"
        },
        "AllergiesDto" : {
          "type" : "object",
          "properties" : {
            "noKnownAllergies" : {
              "type" : "array",
              "description" : "Patient allergies not known.",
              "items" : {
                "$ref" : "#/components/schemas/NoKnownAllergySummaryDto"
              }
            },
            "patientAllergies" : {
              "type" : "array",
              "description" : "Patient allergies.",
              "items" : {
                "$ref" : "#/components/schemas/PatientAllergySummaryDto"
              }
            }
          },
          "description" : "Patient allergy history transfer model"
        },
        "AllergyReactionDto" : {
          "type" : "object",
          "properties" : {
            "reactionId" : {
              "type" : "integer",
              "description" : "The id of the allergic reaction",
              "format" : "int32",
              "example" : 1
            },
            "patientAllergyId" : {
              "type" : "integer",
              "description" : "The id of the patient allergy",
              "format" : "int32",
              "example" : 2
            },
            "reactionCode" : {
              "type" : "string",
              "description" : "The code of the allergic reaction",
              "enum" : [ "RashHives", "RashMaculopapular", "RashLocalContact", "RashOther", "Anaphylaxis", "Angiodema", "MalignantHyperthermia", "SerumSickness", "StevensJohnson", "Rash", "Other" ]
            },
            "severityCode" : {
              "type" : "string",
              "description" : "The severity code",
              "enum" : [ "Unknown", "Severe", "Moderate", "Mild" ]
            },
            "description" : {
              "type" : "string",
              "description" : "The description of the allergic reaction",
              "example" : "some description"
            }
          },
          "description" : "Allergy reaction data transfer object model"
        },
        "AlternativeHealthProductSummaryDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The unique name of the alternative health product",
              "example" : "QHR SAMPLE PRODUCT 1MG"
            },
            "description" : {
              "type" : "string",
              "description" : "The description about the alternative health product",
              "example" : "THIS IS A SAMPLE PRODUCT"
            },
            "category" : {
              "type" : "string",
              "description" : "The category of the alternative health product",
              "example" : "TEMPORARY"
            }
          },
          "description" : "The alternative health product transfer model"
        },
        "CustomCompoundSummaryDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The custom compound name",
              "example" : "CUSTOM COMPOUND"
            },
            "description" : {
              "type" : "string",
              "description" : "The description of the compound",
              "example" : "THIS IS A CUSTOM COMPOUND"
            },
            "includedIngredients" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A Set of ingredients included in the compound",
              "items" : {
                "$ref" : "#/components/schemas/IngredientSummaryDto"
              }
            },
            "excludedIngredients" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A Set of ingredients excluded in the compound",
              "items" : {
                "$ref" : "#/components/schemas/IngredientSummaryDto"
              }
            }
          },
          "description" : "The custom compound transfer model"
        },
        "DiagnosisDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique patient diagnosis summary id",
              "format" : "int32",
              "example" : 1
            },
            "diagnosisDisplayText" : {
              "type" : "string",
              "description" : "Displays top-level summary for the diagnosis.",
              "example" : "BENZEL SPOT-ON ACNE 2.5% GEL"
            },
            "codeTable" : {
              "type" : "string",
              "description" : "Code table name of the diagnosis",
              "example" : "ICD9"
            },
            "code" : {
              "type" : "string",
              "description" : "Diagnosis code",
              "example" : "7641"
            },
            "description" : {
              "type" : "string",
              "description" : "Description of the diagnosis",
              "example" : "'LIGHT-FOR-DATES' WITH SIGNS OF FETAL MALNUTRITION"
            },
            "notes" : {
              "type" : "string",
              "description" : "Notes of the patient diagnosis",
              "example" : "Extra attention is needed"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Date when diagnosis is created",
              "example" : "2018-07-13T00:00:00.000"
            },
            "dateOfDiagnosis" : {
              "type" : "string",
              "description" : "Date of the diagnosis",
              "example" : "2018-07-13"
            },
            "onsetDate" : {
              "type" : "string",
              "description" : "Date of diagnosis when the symptom first appeared",
              "example" : "2018-07-13"
            },
            "recoveryDate" : {
              "type" : "string",
              "description" : "The diagnosis recovery date",
              "example" : "2018-07-13"
            },
            "negative" : {
              "type" : "boolean",
              "description" : "Flag indicating if the diagnosis is negative",
              "example" : true
            },
            "diagnosisStatus" : {
              "$ref" : "#/components/schemas/DiagnosisStatusDto"
            },
            "symptomCodeTable" : {
              "type" : "string",
              "description" : "Symptom code table name",
              "example" : "ICD9"
            },
            "symptomCode" : {
              "type" : "string",
              "description" : "Symptom code",
              "example" : "E91"
            },
            "symptomDescription" : {
              "type" : "string",
              "description" : "Diagnosis symptom description",
              "example" : "INJURY TO INTERNAL ORGAN"
            },
            "lifeStage" : {
              "type" : "string",
              "description" : "Life stage of the patient diagnosis",
              "example" : "Newborn, Newborn: Birth - 28 days",
              "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
            },
            "problemDescription" : {
              "type" : "string",
              "description" : "Diagnosis problem description",
              "example" : "ATTENTION"
            }
          },
          "description" : "The diagnosis summary transfer model"
        },
        "DiagnosisStatusDto" : {
          "type" : "object",
          "properties" : {
            "statusId" : {
              "type" : "integer",
              "description" : "ID of the diagnosis status",
              "format" : "int32",
              "example" : 1
            },
            "statusName" : {
              "type" : "string",
              "description" : "Name of the diagnosis status",
              "example" : "Active"
            }
          },
          "description" : "DiagnosisStatus data transfer object model"
        },
        "DosageDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The dosage unique id",
              "format" : "int32",
              "example" : 1
            },
            "min" : {
              "type" : "number",
              "description" : "The minimum dosage",
              "format" : "float",
              "example" : 1
            },
            "max" : {
              "type" : "number",
              "description" : "The maximum dosage",
              "format" : "float",
              "example" : 1
            },
            "unit" : {
              "type" : "string",
              "description" : "The dosage unit",
              "example" : "TAB"
            },
            "durationAmount" : {
              "type" : "number",
              "description" : "The duration amount",
              "format" : "float",
              "example" : 1
            },
            "durationUnit" : {
              "type" : "string",
              "description" : "The duration unit",
              "example" : "Day"
            },
            "intervalTime" : {
              "type" : "string",
              "description" : "The interval time",
              "example" : "QD"
            },
            "startDate" : {
              "type" : "string",
              "description" : "The start date of the dosage",
              "example" : "2018-07-13T00:00:00.000"
            },
            "proReNata" : {
              "type" : "boolean",
              "description" : "The flag indicating if the dosage is Pro re nata",
              "example" : true
            },
            "concurrent" : {
              "type" : "boolean",
              "description" : "The flag indicating if the dosage is concurrent",
              "example" : true
            },
            "eyeCode" : {
              "type" : "string",
              "description" : "Represents eye locations for diagnoses, history items, symptoms, etc",
              "example" : "OS",
              "enum" : [ "LEFT_EYE", "RIGHT_EYE", "BOTH_EYES", "NO_EYES" ]
            }
          },
          "description" : "Dosage data transfer object model"
        },
        "DrugIdentifier" : {
          "type" : "object",
          "properties" : {
            "codeSystem" : {
              "type" : "string",
              "description" : "Drug type",
              "example" : "AIG/DIN/GCN"
            },
            "value" : {
              "type" : "string",
              "description" : "The unique drug identification number",
              "example" : "00000001"
            }
          },
          "description" : "The drug identifier"
        },
        "FormulationSummaryDto" : {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/DrugIdentifier"
            },
            "name" : {
              "type" : "string",
              "description" : "The formulation name",
              "example" : "250 mg Oral Capsule"
            },
            "strengthDescription" : {
              "type" : "string",
              "description" : "The strength description",
              "example" : "2 mg/mL"
            }
          },
          "description" : "The formulation transfer model"
        },
        "GenericDrugDto" : {
          "type" : "object",
          "properties" : {
            "genericId" : {
              "type" : "integer",
              "description" : "The unique generic drug id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The name of a generic drug",
              "example" : "caffeine/dextrose"
            },
            "ingredientCount" : {
              "type" : "string",
              "description" : "The count of ingredients in the generic drug",
              "example" : "1"
            },
            "activeIngredientCode" : {
              "type" : "string",
              "description" : "The number of the active ingredient as known as AIG",
              "example" : "0000000001"
            },
            "triplicate" : {
              "type" : "boolean",
              "description" : "The flag if a generic drug is triplicate",
              "example" : true
            },
            "asDirected" : {
              "type" : "boolean",
              "description" : "The flag if a generic drug is as directed",
              "example" : true
            }
          },
          "description" : "The generic drug transfer model"
        },
        "IngredientSummaryDto" : {
          "type" : "object",
          "properties" : {
            "codeSystem" : {
              "type" : "string",
              "description" : "Drug type",
              "example" : "AIG/DIN/HIC"
            },
            "drugId" : {
              "type" : "string",
              "description" : "The ingredient id",
              "example" : "1"
            },
            "componentAmount" : {
              "type" : "integer",
              "description" : "The component amount",
              "format" : "int32",
              "example" : 1
            },
            "componentUnit" : {
              "type" : "string",
              "description" : "The component unit",
              "example" : "mg"
            },
            "componentNote" : {
              "type" : "string",
              "description" : "The component note",
              "example" : "THIS IS THE SAMPLE COMPONENT"
            }
          },
          "description" : "The ingredient summary transfer model"
        },
        "ManufacturedDrugSummaryDto" : {
          "type" : "object",
          "properties" : {
            "identifier" : {
              "$ref" : "#/components/schemas/DrugIdentifier"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the manufactured drug",
              "example" : "QHR SAMPLE 1MG TABLET"
            },
            "manufacturer" : {
              "type" : "string",
              "description" : "The manufacturer of the manufactured drug",
              "example" : "QHR PHARMA"
            },
            "activeIngredientIdentifier" : {
              "$ref" : "#/components/schemas/DrugIdentifier"
            }
          },
          "description" : "Manufactured drug details."
        },
        "MedicationDetails" : {
          "type" : "object",
          "properties" : {
            "manufacturedDrug" : {
              "$ref" : "#/components/schemas/ManufacturedDrugSummaryDto"
            },
            "genericDrug" : {
              "$ref" : "#/components/schemas/GenericDrugDto"
            },
            "formulation" : {
              "$ref" : "#/components/schemas/FormulationSummaryDto"
            },
            "naturalHealthProduct" : {
              "$ref" : "#/components/schemas/NaturalHealthProductSummaryDto"
            },
            "alternativeHealthProduct" : {
              "$ref" : "#/components/schemas/AlternativeHealthProductSummaryDto"
            },
            "customCompound" : {
              "$ref" : "#/components/schemas/CustomCompoundSummaryDto"
            }
          },
          "description" : "Medication details."
        },
        "NaturalHealthProductSummaryDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The name of the natural health product",
              "example" : "Melatonin"
            },
            "identifier" : {
              "$ref" : "#/components/schemas/DrugIdentifier"
            }
          },
          "description" : "Natural health product details."
        },
        "NoKnownAllergySummaryDto" : {
          "type" : "object",
          "properties" : {
            "noKnownAllergyId" : {
              "type" : "integer",
              "description" : "The unique id",
              "format" : "int32",
              "example" : 1
            },
            "createdDate" : {
              "type" : "string",
              "description" : "The created date of the no known allergy",
              "example" : "2017-11-29T00:00:00.000"
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "The modified date of the no known allergy",
              "example" : "2017-11-29T00:00:00.000"
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider id who diagnoses the allergy to the patient",
              "format" : "int32",
              "example" : 1500
            },
            "allergyType" : {
              "type" : "string",
              "description" : "The type of the allergy",
              "example" : "DRUG_INTOLERANCE",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            }
          },
          "description" : "No known allergy data transfer object model"
        },
        "PatientAllergySummaryDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique patient allergy id",
              "format" : "int32",
              "example" : 1
            },
            "allergyDisplayText" : {
              "type" : "string",
              "description" : "The top-level summary for allergy",
              "example" : "Status: Suspect - Group: Salicylates - Name: ADVIL COLD & FLU 200-38 MG TAB - Severity: Moderate - Reactions: Rash - local contact, Rash - other"
            },
            "allergyName" : {
              "type" : "string",
              "description" : "The name of the allergy",
              "example" : "Tylenol"
            },
            "allergyGroupName" : {
              "type" : "string",
              "description" : "The name of the allergen group",
              "example" : "Clebopride"
            },
            "clinicalStatus" : {
              "type" : "string",
              "description" : "The clinical status of the allergy",
              "example" : "DoubtRaised",
              "enum" : [ "ConfirmedOrVerified", "DoubtRaised", "Erroneous", "ConfirmedButInactive", "Pending", "Reputed", "TerminatedAndReclassified", "Suspect" ]
            },
            "diagnosedAge" : {
              "type" : "string",
              "description" : "The age that the allergy was diagnosed",
              "example" : "59 Yr"
            },
            "lifeStageType" : {
              "type" : "string",
              "description" : "The life stage type of the patient allergy",
              "example" : "Child",
              "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
            },
            "severityCode" : {
              "type" : "string",
              "description" : "The severity code of the allergy",
              "example" : "Moderate",
              "enum" : [ "Unknown", "Severe", "Moderate", "Mild" ]
            },
            "reactions" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "The allergic reactions after exposure to the allergen",
              "example" : "RashHives",
              "items" : {
                "$ref" : "#/components/schemas/AllergyReactionDto"
              }
            },
            "allergyType" : {
              "type" : "string",
              "description" : "The type of the allergy",
              "example" : "DRUG_INTOLERANCE",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            },
            "reportedDate" : {
              "type" : "string",
              "description" : "The date when the allergy was reported",
              "example" : "2017-11-29"
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "The date when this entry was last modified",
              "example" : "2017-11-29T00:00:00.000"
            },
            "authorizingProvider" : {
              "type" : "string",
              "description" : "The id of the authorizing provider",
              "example" : "25862"
            },
            "drugIdentifier" : {
              "$ref" : "#/components/schemas/DrugIdentifier"
            },
            "providerId" : {
              "type" : "string",
              "description" : "The provider id",
              "example" : "18230"
            }
          },
          "description" : "Patient allergy data transfer object model representing an allergy which has been applied to a specific patient"
        },
        "PatientMedicalSummaryDto" : {
          "type" : "object",
          "properties" : {
            "prescriptions" : {
              "type" : "array",
              "description" : "Prescriptions for a patient",
              "items" : {
                "$ref" : "#/components/schemas/PrescriptionDto"
              }
            },
            "diagnosis" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "Diagnosis for a patient",
              "items" : {
                "$ref" : "#/components/schemas/DiagnosisDto"
              }
            },
            "allergies" : {
              "$ref" : "#/components/schemas/AllergiesDto"
            }
          },
          "description" : "Patient medical summary model object"
        },
        "PrescriptionDto" : {
          "type" : "object",
          "properties" : {
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The unique prescription id.",
              "format" : "int32",
              "example" : 1
            },
            "medicationDisplayText" : {
              "type" : "string",
              "description" : "Displays top-level summary for the prescription.",
              "example" : "BENZEL SPOT-ON ACNE 2.5% GEL"
            },
            "instructionsDisplayText" : {
              "type" : "string",
              "description" : "Displays top-level instruction for dosage.",
              "example" : "1 Application(s) Two times daily * 1 Mth30 with 1 refills."
            },
            "prescribingProvider" : {
              "type" : "integer",
              "description" : "The provider id of the provider prescribing.",
              "format" : "int32",
              "example" : 1
            },
            "authorizingProvider" : {
              "type" : "integer",
              "description" : "The authorizing provider id.",
              "format" : "int32"
            },
            "form" : {
              "type" : "string",
              "description" : "The dosage form",
              "example" : "TAB"
            },
            "external" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is an external prescription",
              "example" : true
            },
            "sigInstructions" : {
              "type" : "string",
              "description" : "The sig instructions which is labeled in prescription",
              "example" : "TAKE 1 PILL, BY MOUTH, AT BEDTIME"
            },
            "route" : {
              "type" : "string",
              "description" : "The route to take the medication",
              "example" : "Oral"
            },
            "status" : {
              "type" : "string",
              "description" : "Status of the prescription",
              "example" : "Recently Active",
              "enum" : [ "Active", "Recently Active", "Inactive" ]
            },
            "typeOfUse" : {
              "type" : "string",
              "description" : "The drug use on Accuro",
              "example" : "One Time"
            },
            "note" : {
              "type" : "string",
              "description" : "The note",
              "example" : "TAKE 2 PILLS AT ONCE"
            },
            "writtenDate" : {
              "type" : "string",
              "description" : "The written date of the prescription",
              "example" : "2017-11-29T00:00:00.000"
            },
            "expiryDate" : {
              "type" : "string",
              "description" : "The expired date of the prescription",
              "example" : "2017-11-29"
            },
            "effectiveDate" : {
              "type" : "string",
              "description" : "The effective date of the prescription",
              "example" : "2017-11-29"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "The created date of the prescription",
              "example" : "2017-11-29T00:00:00.000"
            },
            "lastModified" : {
              "type" : "string",
              "description" : "The last modified date of the prescription",
              "example" : "2017-11-29T00:00:00.000"
            },
            "medicationDetails" : {
              "$ref" : "#/components/schemas/MedicationDetails"
            },
            "dosages" : {
              "type" : "array",
              "description" : "A set of dosages",
              "items" : {
                "$ref" : "#/components/schemas/DosageDto"
              }
            }
          },
          "description" : "Prescriptions for a patient"
        },
        "PatientStatusDto" : {
          "required" : [ "statusName" ],
          "type" : "object",
          "properties" : {
            "statusId" : {
              "type" : "integer",
              "description" : "Unique id of a patient status",
              "format" : "int32",
              "example" : 18911
            },
            "statusName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Status name",
              "example" : "Active"
            },
            "statusOrder" : {
              "type" : "integer",
              "description" : "Order of a status",
              "format" : "int32",
              "example" : 2
            },
            "statusColor" : {
              "type" : "integer",
              "description" : "Status colour code",
              "format" : "int32",
              "example" : -65536
            },
            "coreStatus" : {
              "type" : "boolean",
              "description" : "Indicate if its a core status",
              "example" : true
            }
          },
          "description" : "Patient status Data transfer object"
        },
        "PatientRepliformReportableDto" : {
          "type" : "object",
          "properties" : {
            "patientFormId" : {
              "type" : "integer",
              "description" : "patientFormId",
              "format" : "int32",
              "example" : 12
            },
            "dateOfService" : {
              "type" : "string",
              "description" : "dateOfService",
              "example" : "2020-02-10T00:00:00.000"
            },
            "repliformDataList" : {
              "type" : "array",
              "description" : "repliformDataList",
              "items" : {
                "$ref" : "#/components/schemas/RepliformDataDto"
              }
            }
          }
        },
        "RepliformDataDto" : {
          "required" : [ "fieldName", "textValue" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "fieldName" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Field Name",
              "example" : "Health Card No."
            },
            "tagName" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Tag Name",
              "example" : "Health Card No"
            },
            "textValue" : {
              "maxLength" : 200,
              "minLength" : 0,
              "type" : "string",
              "description" : "Text Value",
              "example" : "Referral Team"
            },
            "numericValue" : {
              "type" : "string",
              "description" : "Numeric Value",
              "example" : "22.00001"
            },
            "dateValue" : {
              "type" : "string",
              "description" : "Date Value",
              "example" : "2020-02-10T00:00:00.000"
            }
          },
          "description" : "repliformDataList"
        },
        "AppointmentDetailsDto" : {
          "required" : [ "serviceLocation" ],
          "type" : "object",
          "properties" : {
            "roomIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "ID of the room(s) in which appointment is scheduled",
              "example" : [ 100, 102 ],
              "items" : {
                "type" : "integer",
                "description" : "ID of the room(s) in which appointment is scheduled",
                "format" : "int32"
              }
            },
            "otherProviderIds" : {
              "type" : "array",
              "description" : "IDs of the other providers in which appointment is scheduled. These IDs are read-only. ",
              "example" : [ 100, 102 ],
              "items" : {
                "type" : "integer",
                "description" : "IDs of the other providers in which appointment is scheduled. These IDs are read-only. ",
                "format" : "int32"
              }
            },
            "billingProviderId" : {
              "type" : "integer",
              "description" : "ID of the billing provider on this appointmentThis will be the provider associated with the appointment's claim",
              "format" : "int32",
              "nullable" : true,
              "example" : 18770
            },
            "referringProviderId" : {
              "type" : "integer",
              "description" : "ID of the referring provider on this appointment",
              "format" : "int32",
              "nullable" : true,
              "example" : 18770
            },
            "notes" : {
              "maxLength" : 1000,
              "type" : "string",
              "description" : "Note that will be displayed in the appointment view in Accuro",
              "nullable" : true,
              "example" : "Patient would like to discuss flu vaccines"
            },
            "alerts" : {
              "maxLength" : 255,
              "type" : "string",
              "description" : "Alerts that will be displayed when the appointment is clicked upon in Accuro",
              "nullable" : true,
              "example" : "Patient is always late, booked an extra 10 minutes"
            },
            "reasonId" : {
              "type" : "integer",
              "description" : "ID of the appointment reason",
              "format" : "int32",
              "nullable" : true,
              "example" : 42
            },
            "typeId" : {
              "type" : "integer",
              "description" : "ID of the appointment type",
              "format" : "int32",
              "nullable" : true,
              "example" : 17
            },
            "priorityId" : {
              "type" : "integer",
              "description" : "ID of the priority level for this appointment",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "arrived" : {
              "type" : "boolean",
              "description" : "Arrived status",
              "example" : true
            },
            "confirmed" : {
              "type" : "boolean",
              "description" : "Confirmed status for this appointment",
              "example" : false
            },
            "serviceLocation" : {
              "maxLength" : 1,
              "minLength" : 1,
              "pattern" : "^[0-9A-Z]$",
              "type" : "string",
              "description" : "Location code for this appointment",
              "example" : "O"
            }
          },
          "description" : "AppointmentDetails data transfer object model"
        },
        "AppointmentDto" : {
          "required" : [ "date", "endTime", "officeId", "providerId", "startTime", "subColumn" ],
          "type" : "object",
          "properties" : {
            "appointmentId" : {
              "type" : "integer",
              "description" : "The unique id of the appointment",
              "format" : "int32"
            },
            "date" : {
              "type" : "string",
              "description" : "Appointment date",
              "example" : "2017-11-29"
            },
            "startTime" : {
              "type" : "integer",
              "description" : "The appointment start time in 24 hour time as an integer",
              "format" : "int32",
              "example" : 1300
            },
            "endTime" : {
              "type" : "integer",
              "description" : "The appointment end time in 24 hour time as an integer",
              "format" : "int32",
              "example" : 1315
            },
            "subColumn" : {
              "type" : "integer",
              "description" : "Sub column of the appointment. Appointments with overlapping times cannot have the same sub column, otherwise they conflict. Sub columns start at zero.",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The id of the patient associated with this appointment",
              "format" : "int32",
              "nullable" : true,
              "example" : 12
            },
            "providerId" : {
              "type" : "integer",
              "description" : "The id of the provider associated with this appointment.",
              "format" : "int32",
              "example" : 21
            },
            "resourceId" : {
              "type" : "integer",
              "description" : "The id of the resource associated with this appointment. Should be null if provider scheduling is used.",
              "format" : "int32",
              "nullable" : true,
              "example" : 34
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The id of the office associated with this appointment",
              "format" : "int32",
              "example" : 54
            },
            "maskId" : {
              "type" : "integer",
              "description" : "The id of the mask associated with this appointment. Should be null unless the appointment has been masked.",
              "format" : "int32",
              "nullable" : true,
              "example" : 11
            },
            "billOnly" : {
              "type" : "boolean"
            },
            "accessionNumber" : {
              "maxLength" : 50,
              "type" : "string",
              "description" : "Accession number associated with the appointment. This is read-only field.",
              "readOnly" : true,
              "example" : "2020-00-022244"
            },
            "cancelled" : {
              "type" : "boolean",
              "description" : "Cancellation status associated with the appointment.",
              "example" : false
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Deletion status associated with the appointment.",
              "example" : false
            },
            "siteId" : {
              "type" : "integer",
              "description" : "Site Id of the appointment. Can only be updated through PATCH endpoint and not PUT endpoint",
              "format" : "int32",
              "example" : 3
            },
            "appointmentDetails" : {
              "$ref" : "#/components/schemas/AppointmentDetailsDto"
            }
          },
          "description" : "Appointment data transfer object"
        },
        "ProviderScheduleCalendarDto" : {
          "required" : [ "date", "note", "title" ],
          "type" : "object",
          "properties" : {
            "providerId" : {
              "type" : "integer",
              "description" : "Unique id of the provider",
              "format" : "int32",
              "example" : 1
            },
            "title" : {
              "maxLength" : 150,
              "minLength" : 0,
              "type" : "string",
              "description" : "Title for the note"
            },
            "note" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Note for the provider"
            },
            "date" : {
              "type" : "string",
              "description" : "Date for the provider note",
              "example" : "2022-11-29"
            }
          },
          "description" : "The provider schedule calendar data transfer object."
        },
        "ScheduleSlotDto" : {
          "type" : "object",
          "properties" : {
            "date" : {
              "type" : "string",
              "description" : "Schedule slot date.",
              "example" : "2017-11-29"
            },
            "subColumn" : {
              "type" : "integer",
              "description" : "Schedule slot sub column.",
              "format" : "int32",
              "example" : 0
            },
            "startTime" : {
              "type" : "integer",
              "description" : "Schedule slot start time in 24 hours.",
              "format" : "int32",
              "example" : 1300
            },
            "endTime" : {
              "type" : "integer",
              "description" : "Schedule slot end time in 24 hours.",
              "format" : "int32",
              "example" : 1315
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider ID associated with the schedule slot",
              "format" : "int32",
              "example" : 1
            },
            "resourceId" : {
              "type" : "integer",
              "description" : "Resource ID associated with the schedule slot.",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Schedule Timeslot data transfer object model representing a range of time in the scheduler."
        },
        "ScheduleSuggestionDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "Suggestion Name",
              "example" : "General Checkups"
            },
            "color" : {
              "type" : "object",
              "properties" : {
                "red" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "green" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "blue" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "alpha" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "rgb" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "colorSpace" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "numComponents" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "cs_sRGB" : {
                      "type" : "boolean"
                    }
                  }
                },
                "transparency" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "description" : "The hex color code for the suggestions label",
              "example" : "#FFFFFF"
            },
            "abbreviation" : {
              "type" : "string",
              "description" : "Suggestion Abbreviation",
              "example" : "CH"
            },
            "typeId" : {
              "type" : "integer",
              "description" : "Appointment Type ID",
              "format" : "int32",
              "example" : 1
            },
            "reasonId" : {
              "type" : "integer",
              "description" : "Appointment Reason ID",
              "format" : "int32",
              "example" : 2
            },
            "allowProviderCreation" : {
              "type" : "boolean",
              "description" : "Allow Provider Creation",
              "example" : true
            },
            "allowMedeoEBookingRequests" : {
              "type" : "boolean",
              "description" : "Allow Medeo E-Booking Request Creation",
              "example" : true
            },
            "barDisplay" : {
              "type" : "boolean",
              "description" : "Is there a Bar Display",
              "example" : true
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication if the Schedule Suggestion is Active",
              "example" : true
            }
          },
          "description" : "Schedule suggestion data transfer object model"
        },
        "AppliedAvailabilityDto" : {
          "type" : "object",
          "properties" : {
            "officeId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "providerId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "date" : {
              "type" : "string",
              "description" : "The availabiltiy date",
              "example" : "2017-11-08T00:00:00.000-800"
            },
            "startTime" : {
              "type" : "integer",
              "format" : "int32"
            },
            "endTime" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "AppliedSuggestionDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The name of the applied suggestion",
              "example" : "Checkup"
            },
            "providerId" : {
              "type" : "integer",
              "description" : "The provider id",
              "format" : "int32",
              "example" : 1
            },
            "resourceId" : {
              "type" : "integer",
              "description" : "The resource id",
              "format" : "int32",
              "example" : 1
            },
            "subColumn" : {
              "type" : "integer",
              "description" : "Suggestion sub-column id",
              "format" : "int32",
              "example" : 0
            },
            "date" : {
              "type" : "string",
              "description" : "The date the suggestion applies for.",
              "example" : "2018-08-07T00:00:00.000-0700"
            },
            "startTime" : {
              "type" : "integer",
              "description" : "The start time for the applied suggestion",
              "format" : "int32",
              "example" : 800
            },
            "endTime" : {
              "type" : "integer",
              "description" : "The end time for the applied suggestion",
              "format" : "int32",
              "example" : 815
            },
            "grouped" : {
              "type" : "boolean",
              "description" : "Indication if the Applied Suggestion is grouped together or not.",
              "example" : true
            },
            "allowMedeoEBookingRequests" : {
              "type" : "boolean",
              "description" : "Is Medeo E-Booking Request Creation Allowed",
              "example" : true
            },
            "allowProviderCreation" : {
              "type" : "boolean",
              "description" : "Is Provider Appointment Creation Allowed",
              "example" : true
            }
          },
          "description" : "Applied suggestion data transfer object model"
        },
        "AvailabilityTemplateDto" : {
          "type" : "object",
          "properties" : {
            "templateId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "templateName" : {
              "type" : "string"
            },
            "officeId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "timeInterval" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "BillingDetailsDto" : {
          "type" : "object",
          "properties" : {
            "noCharge" : {
              "type" : "boolean",
              "description" : "Indication if the appointment is to be charged or not.",
              "example" : false
            },
            "noShow" : {
              "type" : "boolean",
              "description" : "Indication if the patient failed to show.",
              "example" : true
            },
            "insurerId" : {
              "type" : "integer",
              "description" : "The ID of the Insurer associated with this Billing Details DTO",
              "format" : "int32",
              "example" : 14
            }
          },
          "description" : "Billing details data transfer object model"
        },
        "AvailabilityDto" : {
          "type" : "object",
          "properties" : {
            "officeId" : {
              "type" : "integer",
              "description" : "The ID of the office associated with this Availability DTO",
              "format" : "int32",
              "example" : 1
            },
            "startTime" : {
              "type" : "integer",
              "description" : "Availability start time as 24-hour number",
              "format" : "int32",
              "example" : 1400
            },
            "endTime" : {
              "type" : "integer",
              "description" : "Availability end time as 24-hour number",
              "format" : "int32",
              "example" : 1415
            }
          },
          "description" : "Schedule availability data transfer object model"
        },
        "SchedulerTimeIntervalDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Provider id or user id",
              "format" : "int32"
            },
            "timeInterval" : {
              "type" : "integer",
              "description" : "Scheduler time interval in minute",
              "format" : "int32",
              "example" : 15
            }
          },
          "description" : "SchedulerTimeInterval data transfer object model"
        },
        "TimeIntervalsDto" : {
          "type" : "object",
          "properties" : {
            "providers" : {
              "type" : "array",
              "description" : "Scheduler time intervals of providers",
              "items" : {
                "$ref" : "#/components/schemas/SchedulerTimeIntervalDto"
              }
            },
            "users" : {
              "type" : "array",
              "description" : "Scheduler time intervals of users",
              "items" : {
                "$ref" : "#/components/schemas/SchedulerTimeIntervalDto"
              }
            }
          },
          "description" : "SchedulerTimeInterval data transfer object model"
        },
        "AttachmentDto" : {
          "type" : "object",
          "properties" : {
            "itemId" : {
              "type" : "integer",
              "description" : "The unique id of the item",
              "format" : "int32",
              "example" : 1
            },
            "itemCategory" : {
              "type" : "string",
              "description" : "The category of the item. This field is ENUM and can contain only restricted values.",
              "example" : "Document",
              "enum" : [ "ItemCategoryDto{categoryId=1, name='Appointment'}", "ItemCategoryDto{categoryId=2, name='Encounter'}", "ItemCategoryDto{categoryId=3, name='Form'}", "ItemCategoryDto{categoryId=4, name='Prescription'}", "ItemCategoryDto{categoryId=5, name='Lab'}", "ItemCategoryDto{categoryId=6, name='Letter'}", "ItemCategoryDto{categoryId=7, name='Document'}", "ItemCategoryDto{categoryId=8, name='Lab Group'}", "ItemCategoryDto{categoryId=9, name='CDM Worksheet'}", "ItemCategoryDto{categoryId=10, name='History'}", "ItemCategoryDto{categoryId=11, name='HistoryText'}", "ItemCategoryDto{categoryId=12, name='Task'}", "ItemCategoryDto{categoryId=13, name='Allergy'}", "ItemCategoryDto{categoryId=14, name='Diagnosis'}", "ItemCategoryDto{categoryId=15, name='HistoryURL'}", "ItemCategoryDto{categoryId=16, name='Lab Observation'}", "ItemCategoryDto{categoryId=17, name='Problem History'}", "ItemCategoryDto{categoryId=18, name='Generated Letter'}", "ItemCategoryDto{categoryId=19, name='Risk Factor'}", "ItemCategoryDto{categoryId=20, name='Immunization'}", "ItemCategoryDto{categoryId=21, name='Alert or Special Need'}", "ItemCategoryDto{categoryId=22, name='Custom Lab View'}", "ItemCategoryDto{categoryId=23, name='HistoryTracking'}", "ItemCategoryDto{categoryId=24, name='Note'}", "ItemCategoryDto{categoryId=25, name='Pregnancy'}", "ItemCategoryDto{categoryId=26, name='PatientSupportProgram'}", "ItemCategoryDto{categoryId=27, name='Messaging Conversation'}", "ItemCategoryDto{categoryId=28, name='Procedure Code'}", "ItemCategoryDto{categoryId=29, name='MedicationReconciliation'}" ]
            }
          },
          "description" : "Attachment data transfer object"
        },
        "WaitRoomEntryDto" : {
          "required" : [ "arrivedTime" ],
          "type" : "object",
          "properties" : {
            "waitroomId" : {
              "type" : "integer",
              "description" : "Unique waitroom id.",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Unique id of a patient",
              "format" : "int32",
              "example" : 125
            },
            "insurerId" : {
              "type" : "integer",
              "description" : "The id for the patients insurer",
              "format" : "int32",
              "example" : 2
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "The id for the patients physician",
              "format" : "int32",
              "example" : 8
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "The unique id of the appointment",
              "format" : "int32",
              "example" : 19
            },
            "roomId" : {
              "type" : "integer",
              "description" : "The id for the room in which patient is allocated. If the room id is -1 then the patient is in waiting room.",
              "format" : "int32",
              "example" : 2
            },
            "roomPhysicianId" : {
              "type" : "integer",
              "description" : "Id of the physician allocated to the room.",
              "format" : "int32",
              "example" : 2
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The id of the office associated with this appointment",
              "format" : "int32",
              "example" : 54
            },
            "arrivedTime" : {
              "type" : "string",
              "description" : "The arrival date time of the patient.",
              "example" : "2020-01-23T10:15:00.000"
            },
            "enteredRoomTime" : {
              "type" : "string",
              "description" : "Room entered time.",
              "example" : "2020-01-23T10:15:00.000"
            },
            "completeDate" : {
              "type" : "string",
              "description" : "The completed date time of the wait room entry to the related patient.If the value is null then the patient is still in traffic manager.",
              "example" : "2020-01-23T11:15:00.000"
            },
            "lastModifiedDate" : {
              "type" : "string",
              "description" : "This field is updated by the system.",
              "example" : "2020-02-10T00:00:00.000"
            },
            "avatars" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "This field represents the avatars for the rooms which the patient has been through. This field is read only.",
              "example" : "/icons/pill16.png,/icons/Document 2 16.png"
            },
            "cashCollected" : {
              "type" : "boolean"
            }
          },
          "description" : "Data Transfer Object for waitroom entry information"
        },
        "DocumentReviewDto" : {
          "title" : "List of DocumentReviewDto",
          "type" : "object",
          "properties" : {
            "physician_id" : {
              "type" : "integer",
              "description" : "The id of physician who reviewed the document. During document write request, this field becomes mandatory if review date is not null.",
              "format" : "int32",
              "example" : 12129
            },
            "reviewDate" : {
              "type" : "string",
              "description" : "The date when the document is reviewed. This field indicates if the document is reviewed or not. If this field is null, system will set the document as un-reviewed. If valid date is provided, system will set the document as reviewed.",
              "example" : "2018-10-23T00:00:00.000"
            }
          },
          "description" : "DocumentReview data transfer object model",
          "example" : [ {
            "physician_id" : 12129,
            "reviewDate" : "2018-12-29"
          }, {
            "physician_id" : 12130,
            "reviewDate" : "2018-12-30"
          } ]
        },
        "FileTypeDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique file type id",
              "format" : "int32",
              "example" : 3
            },
            "type" : {
              "type" : "string",
              "description" : "File Type (extension)",
              "example" : "pdf"
            },
            "description" : {
              "type" : "string",
              "description" : "File type description",
              "example" : "PDF Document"
            }
          },
          "description" : "FileType data transfer object model"
        },
        "DocumentDto" : {
          "type" : "object",
          "properties" : {
            "document_id" : {
              "type" : "integer",
              "description" : "The unique document id",
              "format" : "int32",
              "example" : 1
            },
            "patient_id" : {
              "type" : "integer",
              "description" : "The unique id for the patient associated with the document. For the referral document, this field is mandatory. It's optional for other document types.",
              "format" : "int32",
              "example" : 1
            },
            "file_name" : {
              "type" : "string",
              "description" : "Document file name. This field has relevance in the document read request only. With document write request, file name would be parsed from the document meta data which is sent in the headers of multipart file request. Valid file extensions are: PDF, JPEG or JPG.",
              "example" : "SampleFile.pdf"
            },
            "description" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Description of document. It is optional field and cannot be more than 500 characters.",
              "example" : "A description of the example file."
            },
            "accuro_file_type_id" : {
              "type" : "integer",
              "description" : "ID of the Accuro file type for the Document. This field has relevance only in the read request.",
              "format" : "int32",
              "example" : 8
            },
            "document_date" : {
              "type" : "string",
              "description" : "The date the document was originally uploaded. This field has relevance only in the read request.",
              "example" : "2018-10-23T00:00:00.000"
            },
            "received_date" : {
              "type" : "string",
              "description" : "The date the document was received. If the field is null, current system date would be set corresponding to this field. This field shows up on the Accuro. The value cannot be in future.",
              "example" : "2018-10-23T00:00:00.000"
            },
            "date_created" : {
              "type" : "string",
              "description" : "Date the document was created. For REFERRAL documents this field is set by the system during the write request. For non-REFERRAL documents, system will take the value sent by client or set to systems date if the value is null. The value cannot be in future.",
              "example" : "2018-10-23T00:00:00.000"
            },
            "folder_id" : {
              "minimum" : 1,
              "type" : "integer",
              "description" : "Id of the document folder name. This is mandatory field in the document write request.",
              "format" : "int32",
              "example" : 1
            },
            "folder" : {
              "type" : "string",
              "description" : "Folder name of the document. This field is relevant only for the read request.It is ignored during document write request.",
              "example" : "Documents"
            },
            "sub_folder_id" : {
              "type" : "integer",
              "description" : "Id of the document sub folder name(also called sub type). This is optional field in the document write requests. If this field is populated in the write request, make sure to enable the preference to view sub folder in Accuro.",
              "format" : "int32",
              "example" : 1
            },
            "sub_folder" : {
              "type" : "string",
              "description" : "The sub folder name(also called sub type) of the document. This field is relevant only for the read request. It is ignored during document write request.",
              "example" : "Reports"
            },
            "from_id" : {
              "type" : "integer",
              "description" : "The Id of the documents sender",
              "format" : "int32",
              "example" : 1
            },
            "from_type" : {
              "type" : "string",
              "description" : "The senders type. In the write request, this field can send null or any one of these values: Physician, Insurer, Contact, Patient, OneTimeRecipient. This field can be null but not blank.",
              "example" : "physician"
            },
            "from_name" : {
              "type" : "string",
              "description" : "The name of the documents sender. For the referral documents, this is mandatory field but optional for other document types. If this field is populated in the write request, make sure to enable the preference to view **From** field in Accuro.",
              "example" : "Dr. Jane Doe"
            },
            "reviews" : {
              "$ref" : "#/components/schemas/DocumentReviewDto"
            },
            "priority" : {
              "maximum" : 3,
              "minimum" : 1,
              "type" : "integer",
              "description" : "Priority of the document. This is optional field, 3 being the highest and 1 lowest. By default the priority of the document is normal i.e 1.",
              "format" : "int32",
              "example" : 2
            }
          },
          "description" : "Document data transfer object model"
        },
        "PatientFoldersDto" : {
          "type" : "object",
          "properties" : {
            "patient_id" : {
              "type" : "integer",
              "description" : "Patient id associated with the patient folder",
              "format" : "int32",
              "example" : 1
            },
            "folders" : {
              "title" : "List of folders",
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of folder names",
              "example" : [ "Document", "X-Ray" ],
              "items" : {
                "title" : "List of folders",
                "type" : "string",
                "description" : "A set of folder names",
                "example" : "[\"Document\",\"X-Ray\"]"
              }
            },
            "subtypes" : {
              "title" : "List of sub-folders",
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of sub-folders",
              "example" : [ "Allergy", "Family History" ],
              "items" : {
                "title" : "List of sub-folders",
                "type" : "string",
                "description" : "A set of sub-folders",
                "example" : "[\"Allergy\",\"Family History\"]"
              }
            }
          },
          "description" : "PatientFolder data transfer object model. This object represents all of the folders and sub-folders."
        },
        "HistoryRegularItemDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of this item",
              "format" : "int32",
              "example" : 1
            },
            "typeId" : {
              "type" : "integer",
              "description" : "Unique history type id",
              "format" : "int32",
              "example" : 1
            },
            "description" : {
              "type" : "string",
              "description" : "Description of the item",
              "example" : "Chronic Pain"
            },
            "location" : {
              "type" : "string",
              "description" : "Represents eye locations for diagnoses, history items, symptoms, etc",
              "example" : "LEFT_EYE",
              "enum" : [ "LEFT_EYE", "RIGHT_EYE", "BOTH_EYES", "NO_EYES" ]
            },
            "active" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the item is active",
              "example" : true
            },
            "code" : {
              "type" : "string",
              "description" : "The drug code",
              "example" : "1230"
            },
            "codeSystem" : {
              "type" : "string",
              "description" : "The code system",
              "example" : "CUSTOM"
            },
            "codeSubSystem" : {
              "type" : "string",
              "description" : "The drug code subsystem",
              "example" : "Diagnosis"
            }
          },
          "description" : "History item data transfer object model"
        },
        "HistoryTypeDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of the history type",
              "format" : "int32",
              "example" : 1
            },
            "typeName" : {
              "type" : "string",
              "description" : "The history type name",
              "example" : "Diagnostic History"
            },
            "description" : {
              "type" : "string",
              "description" : "The history type description",
              "example" : "Diagnostic History"
            },
            "builtin" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the item is built-in",
              "example" : true
            },
            "historyType" : {
              "type" : "string",
              "description" : "History type enum. Determines different custom history types",
              "example" : "REGULAR",
              "enum" : [ "REGULAR", "FREE_TEXT", "URL", "TRACKING" ]
            },
            "requireTrackingDate" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the history type requires a tracking date",
              "example" : true
            },
            "alternateBackground" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the history type is alternate background",
              "example" : false
            },
            "imported" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the history type is imported",
              "example" : false
            },
            "showIfEmpty" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the history type is shown when empty",
              "example" : true
            }
          },
          "description" : "History type data transfer object model"
        },
        "NoKnownAllergyDto" : {
          "type" : "object",
          "properties" : {
            "noKnownAllergyId" : {
              "type" : "integer",
              "description" : "The unique id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The patient id",
              "format" : "int32",
              "example" : 1
            },
            "createdDate" : {
              "type" : "string",
              "description" : "The created date of the no known allergy",
              "example" : "2017-11-29T00:00:00.000"
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "The modified date of the no known allergy",
              "example" : "2017-11-29T00:00:00.000"
            },
            "allergyType" : {
              "type" : "string",
              "description" : "The type of the allergy",
              "example" : "DRUG_INTOLERANCE",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            },
            "enteredInError" : {
              "type" : "boolean",
              "description" : "Flag which indicates if entered in error",
              "example" : true
            },
            "active" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the allergy is active",
              "example" : true
            },
            "maskId" : {
              "type" : "integer",
              "description" : "Mask id",
              "format" : "int32",
              "example" : 2
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider id who diagnoses the allergy to the patient",
              "format" : "int32",
              "example" : 1500
            },
            "providerInformation" : {
              "type" : "string",
              "description" : "Information which provider can refer to",
              "example" : "Extra attention is needed"
            }
          },
          "description" : "No known allergy data transfer object model"
        },
        "PatientAllergyDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique patient allergy id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The id of the patient",
              "format" : "int32",
              "example" : 1200
            },
            "allergyId" : {
              "type" : "integer",
              "description" : "The id of the allergy",
              "format" : "int32",
              "example" : 1
            },
            "allergyName" : {
              "type" : "string",
              "description" : "The name of the allergy",
              "example" : "Tylenol"
            },
            "allergyGroupId" : {
              "type" : "string",
              "description" : "The id of the allergen group",
              "example" : "2"
            },
            "allergyGroupName" : {
              "type" : "string",
              "description" : "The name of the allergen group",
              "example" : "Clebopride"
            },
            "allergyType" : {
              "type" : "string",
              "description" : "The type of the allergy",
              "example" : "DRUG_ALLERGY",
              "enum" : [ "DRUG_ALLERGY", "NON_DRUG_ALLERGY", "DRUG_INTOLERANCE", "NON_DRUG_INTOLERANCE" ]
            },
            "clinicalStatus" : {
              "type" : "string",
              "description" : "The clinical status of the allergy",
              "example" : "DoubtRaised",
              "enum" : [ "ConfirmedOrVerified", "DoubtRaised", "Erroneous", "ConfirmedButInactive", "Pending", "Reputed", "TerminatedAndReclassified", "Suspect" ]
            },
            "reactionDate" : {
              "type" : "string",
              "description" : "The patient reaction date",
              "example" : "2017-11-29"
            },
            "diagnosedAge" : {
              "type" : "string",
              "description" : "The age that the allergy was diagnosed",
              "example" : "59 Yr"
            },
            "lifeStageType" : {
              "type" : "string",
              "description" : "The life stage type of the patient allergy",
              "example" : "Child",
              "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
            },
            "severityCode" : {
              "type" : "string",
              "description" : "The severity code of the allergy",
              "example" : "Moderate",
              "enum" : [ "Unknown", "Severe", "Moderate", "Mild" ]
            },
            "reactionCode" : {
              "type" : "string",
              "description" : "The allergic reaction after exposure to the allergen",
              "example" : "RashHives",
              "enum" : [ "RashHives", "RashMaculopapular", "RashLocalContact", "RashOther", "Anaphylaxis", "Angiodema", "MalignantHyperthermia", "SerumSickness", "StevensJohnson", "Rash", "Other" ]
            },
            "maskId" : {
              "type" : "integer",
              "description" : "The mask id",
              "format" : "int32",
              "example" : 3
            },
            "masked" : {
              "type" : "boolean",
              "description" : "The indication if the patient allergy is masked",
              "example" : false
            },
            "reportedDate" : {
              "type" : "string",
              "description" : "The date when the allergy was reported",
              "example" : "2017-11-29"
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "The date when this entry was last modified",
              "example" : "2017-11-29T00:00:00.000"
            },
            "authorizingProvider" : {
              "type" : "string",
              "description" : "The id of the authorizing provider",
              "example" : "25862"
            },
            "providerInformation" : {
              "type" : "string",
              "description" : "The information about the authorizing provider",
              "example" : "Doctor, David [12340]"
            },
            "drugCode" : {
              "type" : "string",
              "description" : "The drug code",
              "example" : "11577"
            },
            "genericDrugId" : {
              "type" : "integer",
              "description" : "The generic drug id",
              "format" : "int32",
              "example" : 18
            },
            "medicationType" : {
              "type" : "string",
              "description" : "The medication type",
              "example" : "DIN",
              "enum" : [ "DIN", "GF", "AHP", "NPN", "GD", "COMPOUND" ]
            },
            "patientReaction" : {
              "type" : "string",
              "description" : "The allergic reaction caused by the allergen",
              "example" : "Hives"
            },
            "reactionDescription" : {
              "type" : "string",
              "description" : "The description of the effects caused by the allergy",
              "example" : "An itchy sensation"
            },
            "providerId" : {
              "type" : "string",
              "description" : "The provider id",
              "example" : "18230"
            },
            "legacy" : {
              "type" : "boolean",
              "description" : "The indication if this allergy was imported from another EMR",
              "example" : true
            },
            "ehrId" : {
              "type" : "string",
              "description" : "The id of EHR",
              "example" : "3"
            },
            "pipId" : {
              "type" : "string",
              "description" : "The id of the Pharmaceutical Information Program(PIP) in Saskatchewan",
              "example" : "2"
            }
          },
          "description" : "Patient allergy data transfer object model representing an allergy which has been applied to a specific patient"
        },
        "AllergyCommentDto" : {
          "type" : "object",
          "properties" : {
            "commentId" : {
              "type" : "integer",
              "description" : "The id of the allergy comment",
              "format" : "int32",
              "example" : 2
            },
            "accuroUserId" : {
              "type" : "integer",
              "description" : "User id of the person who commented",
              "format" : "int32",
              "example" : 10
            },
            "patientAllergyId" : {
              "type" : "integer",
              "description" : "The patient allergy id",
              "format" : "int32",
              "example" : 200
            },
            "creationDate" : {
              "type" : "string",
              "description" : "The comment date",
              "format" : "date-time"
            },
            "comment" : {
              "type" : "string",
              "description" : "The content of the comment related to allergy",
              "example" : "This content is limited to 2000 characters"
            }
          },
          "description" : "Allergy comment data transfer object model"
        },
        "AccuroCalendar" : {
          "type" : "object",
          "properties" : {
            "calender" : {
              "type" : "string",
              "format" : "date-time"
            },
            "precision" : {
              "type" : "string",
              "enum" : [ "Year", "Month", "Day", "Hour", "Minute", "Second", "Millisecond" ]
            }
          },
          "description" : "Date of diagnosis when the symptom first appeared",
          "example" : "2018-07-13"
        },
        "PatientDiagnosisDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the diagnosis",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "ID of the patient",
              "format" : "int32",
              "example" : 1
            },
            "codeTable" : {
              "type" : "string",
              "description" : "Code table name of the diagnosis",
              "example" : "ICD9"
            },
            "code" : {
              "type" : "string",
              "description" : "Diagnosis code",
              "example" : "7641"
            },
            "description" : {
              "type" : "string",
              "description" : "Description of the diagnosis",
              "example" : "'LIGHT-FOR-DATES' WITH SIGNS OF FETAL MALNUTRITION"
            },
            "notes" : {
              "type" : "string",
              "description" : "Notes of the patient diagnosis",
              "example" : "Extra attention is needed"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Date when diagnosis is created",
              "example" : "2018-07-13T00:00:00.000"
            },
            "dateOfDiagnosis" : {
              "type" : "string",
              "description" : "Date of the diagnosis",
              "example" : "2018-07-13"
            },
            "onsetDate" : {
              "$ref" : "#/components/schemas/AccuroCalendar"
            },
            "recoveryDate" : {
              "type" : "string",
              "description" : "The diagnosis recovery date",
              "example" : "2018-07-13"
            },
            "negative" : {
              "type" : "boolean",
              "description" : "Indication if the diagnosis is negative",
              "example" : true
            },
            "diagnosisStatus" : {
              "$ref" : "#/components/schemas/DiagnosisStatusDto"
            },
            "symptomCodeTable" : {
              "type" : "string",
              "description" : "Symptom code table name",
              "example" : "ICD9"
            },
            "symptomCode" : {
              "type" : "string",
              "description" : "Symptom code",
              "example" : "E91"
            },
            "symptomDescription" : {
              "type" : "string",
              "description" : "Description of the diagnosis symptom",
              "example" : "'NO' INDICATOR PRESENT"
            },
            "lifeStage" : {
              "type" : "string",
              "description" : "Life stage of the patient diagnosis",
              "example" : "Newborn, Newborn: Birth - 28 days",
              "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
            },
            "problemDescription" : {
              "type" : "string",
              "description" : "Diagnosis problem description",
              "example" : "ATTENTION"
            },
            "creatorUserId" : {
              "type" : "integer",
              "description" : "ID of the user who created the diagnosis",
              "format" : "int32",
              "example" : 1
            },
            "maskId" : {
              "type" : "integer",
              "description" : "Mask id",
              "format" : "int32",
              "example" : 2
            },
            "pinned" : {
              "type" : "boolean",
              "description" : "Indication if the diagnosis is pinned",
              "example" : true
            }
          },
          "description" : "Patient diagnosis data transfer object model"
        },
        "PatientDiagnosisHistoryDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique patient diagnosis history id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "ID of the patient",
              "format" : "int32",
              "example" : 1
            },
            "patientDiagnosisId" : {
              "type" : "integer",
              "description" : "ID of the patient diagnosis",
              "format" : "int32",
              "example" : 1
            },
            "diagnosisStatus" : {
              "$ref" : "#/components/schemas/DiagnosisStatusDto"
            },
            "creatorUserId" : {
              "type" : "integer",
              "description" : "ID of the user who created the diagnosis",
              "format" : "int32",
              "example" : 1
            },
            "maskId" : {
              "type" : "integer",
              "description" : "Mask id",
              "format" : "int32",
              "example" : 2
            },
            "codeTable" : {
              "type" : "string",
              "description" : "Code table name of the diagnosis",
              "example" : "ICD9"
            },
            "code" : {
              "type" : "string",
              "description" : "Diagnosis code",
              "example" : "7641"
            },
            "description" : {
              "type" : "string",
              "description" : "Description of the diagnosis",
              "example" : "'LIGHT-FOR-DATES' WITH SIGNS OF FETAL MALNUTRITION"
            },
            "notes" : {
              "type" : "string",
              "description" : "Notes of the patient diagnosis",
              "example" : "Extra attention is needed"
            },
            "problemDescription" : {
              "type" : "string",
              "description" : "Diagnosis problem description",
              "example" : "ATTENTION"
            },
            "symptomCodeTable" : {
              "type" : "string",
              "description" : "Symptom code table name",
              "example" : "ICD9"
            },
            "symptomCode" : {
              "type" : "string",
              "description" : "Symptom code",
              "example" : "E91"
            },
            "symptomDescription" : {
              "type" : "string",
              "description" : "Description of the diagnosis symptom",
              "example" : "'NO' INDICATOR PRESENT"
            },
            "outcomeCode" : {
              "type" : "string",
              "description" : "Outcome code",
              "example" : "E91"
            },
            "alternativeDescription" : {
              "type" : "string",
              "description" : "Alternative description",
              "example" : "Essential hypertension"
            },
            "negative" : {
              "type" : "boolean",
              "description" : "Flag indicating if the diagnosis is negative",
              "example" : true
            },
            "lifeStage" : {
              "type" : "string",
              "description" : "Life stage of the patient diagnosis",
              "example" : "Newborn, Newborn: Birth - 28 days",
              "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Date when diagnosis is created",
              "example" : "2018-07-13T00:00:00.000"
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "Date when diagnosis is last modified",
              "example" : "2018-07-13T00:00:00.000"
            },
            "dateOfDiagnosis" : {
              "type" : "string",
              "description" : "Date of the diagnosis",
              "example" : "2018-07-13"
            },
            "onsetDate" : {
              "type" : "string",
              "description" : "Date of diagnosis when the symptom first appeared",
              "example" : "2018-07-13"
            },
            "recoveryDate" : {
              "type" : "string",
              "description" : "The diagnosis recovery date",
              "example" : "2018-07-13"
            }
          },
          "description" : "Patient diagnosis history data transfer object model"
        },
        "PatientHistoryRegularDto" : {
          "type" : "object",
          "description" : "PatientHistoryRegular data transfer object model",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyRegularItem" : {
                "$ref" : "#/components/schemas/HistoryRegularItemDto"
              },
              "date" : {
                "type" : "string",
                "description" : "The history date",
                "example" : "2018-09-11"
              },
              "active" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is active",
                "example" : true
              },
              "note" : {
                "type" : "string",
                "description" : "The note",
                "example" : "high blood pressure"
              },
              "negative" : {
                "type" : "boolean",
                "description" : "Flag indicating if it is negative",
                "example" : true
              },
              "location" : {
                "type" : "string",
                "description" : "Represents eye locations for diagnoses, history items, symptoms, etc",
                "enum" : [ "LEFT_EYE", "RIGHT_EYE", "BOTH_EYES", "NO_EYES" ]
              },
              "relation" : {
                "type" : "string",
                "description" : "The relation",
                "example" : "Mother"
              },
              "createdDate" : {
                "type" : "string",
                "description" : "The recorded date of this patient history item",
                "example" : "2018-07-13T00:00:00.000"
              },
              "details" : {
                "type" : "string",
                "description" : "The details of the item",
                "example" : "Non-Smoker"
              },
              "treatment" : {
                "type" : "string",
                "description" : "The treatment",
                "example" : "ETC"
              },
              "creatorUserId" : {
                "type" : "integer",
                "description" : "The creator user id",
                "format" : "int32",
                "example" : 1
              },
              "resolvedDate" : {
                "type" : "string",
                "description" : "The date when resolved",
                "example" : "2018-09-11"
              },
              "ageOfOnset" : {
                "type" : "string",
                "description" : "The age of onset",
                "example" : "Diagnosed in her 40s"
              },
              "lifeStage" : {
                "type" : "string",
                "description" : "The life stage",
                "example" : "Adult: 18 years or older",
                "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
              },
              "historyClass" : {
                "type" : "string",
                "description" : "The history classification",
                "example" : "Surgical/Medical"
              }
            }
          } ]
        },
        "PatientHistoryTextDto" : {
          "type" : "object",
          "description" : "PatientHistoryText data transfer object model",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyTypeId" : {
                "type" : "integer",
                "description" : "The history type id",
                "format" : "int32",
                "example" : 10
              },
              "historyDate" : {
                "type" : "string",
                "description" : "The history date",
                "example" : "2018-09-11"
              },
              "value" : {
                "type" : "string",
                "description" : "The value",
                "example" : "HepB screen"
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              }
            }
          } ]
        },
        "HistoryTrackingItemDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique history item id",
              "format" : "int32",
              "example" : 1
            },
            "historyTypeId" : {
              "type" : "integer",
              "description" : "The unique history type id that the item belongs to",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The tracking name",
              "example" : "Flu Vaccination"
            },
            "active" : {
              "type" : "boolean",
              "description" : "The flag indicating if the item is active",
              "example" : true
            }
          },
          "description" : "The History Tracking Item data transfer object model"
        },
        "PatientHistoryTrackingDto" : {
          "type" : "object",
          "description" : "PatientHistoryTracking data transfer object model",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemDto"
          }, {
            "type" : "object",
            "properties" : {
              "modifiedUserId" : {
                "type" : "integer",
                "description" : "The modified user id",
                "format" : "int32",
                "example" : 1
              },
              "creatorUserId" : {
                "type" : "integer",
                "description" : "The creator user id",
                "format" : "int32",
                "example" : 2
              },
              "stateDate" : {
                "type" : "string",
                "description" : "The state date",
                "format" : "date",
                "example" : "2018-09-11"
              },
              "modifiedDate" : {
                "type" : "string",
                "description" : "The modified date",
                "example" : "2018-07-13T00:00:00.000"
              },
              "note" : {
                "type" : "string",
                "description" : "The note"
              },
              "currentState" : {
                "type" : "boolean",
                "description" : "Flag indicating if this is current state",
                "example" : true
              },
              "majorChange" : {
                "type" : "boolean",
                "description" : "Flag indicating if this is the major change",
                "example" : true
              },
              "active" : {
                "type" : "boolean",
                "description" : "Flag indicating if this item is active",
                "example" : true
              },
              "historyTrackingItem" : {
                "$ref" : "#/components/schemas/HistoryTrackingItemDto"
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              }
            }
          } ]
        },
        "PatientHistoryUrlDto" : {
          "type" : "object",
          "description" : "PatientHistoryUrl data transfer object model",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyTypeId" : {
                "type" : "integer",
                "description" : "The history type id",
                "format" : "int32",
                "example" : 15
              },
              "historyDate" : {
                "type" : "string",
                "description" : "The history date",
                "example" : "2018-09-11"
              },
              "url" : {
                "type" : "string",
                "description" : "The URL",
                "example" : "www.example.com"
              },
              "urlName" : {
                "type" : "string",
                "description" : "The URL name",
                "example" : "Sample"
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              }
            }
          } ]
        },
        "AbstractPatientHistoryItemDto" : {
          "required" : [ "historyType" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of this history item",
              "format" : "int32",
              "example" : 2
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id of this history item",
              "format" : "int32",
              "example" : 23680
            },
            "maskId" : {
              "type" : "integer",
              "description" : "Id of the mask",
              "format" : "int32",
              "example" : 5
            },
            "historyType" : {
              "type" : "string"
            }
          },
          "description" : "Abstract model class of patient history item",
          "discriminator" : {
            "propertyName" : "historyType"
          }
        },
        "PatientHistoryRegularHistoryDto" : {
          "type" : "object",
          "description" : "Patient history regular history data transfer object",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemHistoryDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyRegularId" : {
                "type" : "integer",
                "description" : "The id of the history regular item this patient history regular record refers to.",
                "format" : "int32",
                "example" : 1
              },
              "patientHistoryRegularId" : {
                "type" : "integer",
                "description" : "The id of the patient history regular record",
                "format" : "int32",
                "example" : 1
              },
              "creatorUserId" : {
                "type" : "integer",
                "description" : "The creator user id",
                "format" : "int32",
                "example" : 1
              },
              "historyUserId" : {
                "type" : "integer",
                "description" : "The id of the Accuro user who updated the patient history regular record",
                "format" : "int32",
                "example" : 1
              },
              "date" : {
                "type" : "string",
                "description" : "The date of this patient history regular history record",
                "example" : "2018-09-11"
              },
              "resolvedDate" : {
                "type" : "string",
                "description" : "The date when resolved",
                "example" : "2018-09-11"
              },
              "createdDate" : {
                "type" : "string",
                "description" : "The date this patient history regular was created at the very first time",
                "format" : "date"
              },
              "relation" : {
                "type" : "string",
                "description" : "The relation",
                "example" : "Mother"
              },
              "treatment" : {
                "type" : "string",
                "description" : "The treatment",
                "example" : "ETC"
              },
              "note" : {
                "type" : "string",
                "description" : "The note",
                "example" : "high blood pressure"
              },
              "details" : {
                "type" : "string",
                "description" : "The details of the item",
                "example" : "Non-Smoker"
              },
              "historyClass" : {
                "type" : "string",
                "description" : "The history classification",
                "example" : "Surgical/Medical"
              },
              "ageOfOnset" : {
                "type" : "string",
                "description" : "The age of onset",
                "example" : "Diagnosed in her 40s"
              },
              "location" : {
                "type" : "string",
                "description" : "The eye location"
              },
              "lifeStage" : {
                "type" : "string",
                "description" : "The life stage",
                "example" : "Adult: 18 years or older",
                "enum" : [ "Newborn", "Infant", "Child", "Adolescent", "Adult" ]
              },
              "active" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is active",
                "example" : true
              },
              "negative" : {
                "type" : "boolean",
                "description" : "Flag indicating if it is negative",
                "example" : true
              }
            }
          } ]
        },
        "PatientHistoryTextHistoryDto" : {
          "type" : "object",
          "description" : "Patient history text history data transfer object",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemHistoryDto"
          }, {
            "type" : "object",
            "properties" : {
              "patientHistoryTextId" : {
                "type" : "integer",
                "description" : "Id of the patient history text record",
                "format" : "int32",
                "example" : 1
              },
              "historyTypeId" : {
                "type" : "integer",
                "description" : "The history type id",
                "format" : "int32",
                "example" : 10
              },
              "historyDate" : {
                "type" : "string",
                "description" : "The history date",
                "example" : "2018-09-11"
              },
              "value" : {
                "type" : "string",
                "description" : "The value",
                "example" : "HepB screen"
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              },
              "historyUserId" : {
                "type" : "integer",
                "description" : "Id of the Accuro user who created/updated the patient history text record",
                "format" : "int32",
                "example" : 2
              }
            }
          } ]
        },
        "PatientHistoryTrackingHistoryDto" : {
          "type" : "object",
          "description" : "Patient history tracking history data transfer object",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemHistoryDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyTrackingItem" : {
                "$ref" : "#/components/schemas/HistoryTrackingItemDto"
              },
              "modifiedUserId" : {
                "type" : "integer",
                "description" : "The modified user id",
                "format" : "int32",
                "example" : 1
              },
              "createdUserId" : {
                "type" : "integer",
                "description" : "The creator user id",
                "format" : "int32",
                "example" : 2
              },
              "stateDate" : {
                "type" : "string",
                "description" : "The state date",
                "example" : "2018-09-11"
              },
              "note" : {
                "type" : "string",
                "description" : "The note"
              },
              "currentState" : {
                "type" : "boolean",
                "description" : "Flag indicating if this is current state",
                "example" : true
              },
              "majorChange" : {
                "type" : "boolean",
                "description" : "Flag indicating if this is the major change",
                "example" : true
              },
              "active" : {
                "type" : "boolean",
                "description" : "Flag indicating if this item is active",
                "example" : true
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              }
            }
          } ]
        },
        "PatientHistoryUrlHistoryDto" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/components/schemas/AbstractPatientHistoryItemHistoryDto"
          }, {
            "type" : "object",
            "properties" : {
              "historyTypeId" : {
                "type" : "integer",
                "description" : "The unique id of the history type",
                "format" : "int32",
                "example" : 15
              },
              "historyDate" : {
                "type" : "string",
                "description" : "The created date of this patient history url at the very beginning",
                "example" : "2018-09-11"
              },
              "url" : {
                "type" : "string",
                "description" : "The URL",
                "example" : "www.example.com"
              },
              "urlName" : {
                "type" : "string",
                "description" : "The URL name in the patient history url record",
                "example" : "Sample"
              },
              "deleted" : {
                "type" : "boolean",
                "description" : "Flag indicating if this record is deleted",
                "example" : true
              },
              "patientHistoryUrlId" : {
                "type" : "integer",
                "description" : "The unique id of the patient history url record",
                "format" : "int32",
                "example" : 1
              },
              "historyUserId" : {
                "type" : "integer",
                "description" : "The id of the Accuro user who created/updated the patient history URL record",
                "format" : "int32",
                "example" : 1
              }
            }
          } ]
        },
        "AbstractPatientHistoryItemHistoryDto" : {
          "required" : [ "historyType" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of this record",
              "format" : "int32",
              "example" : 102
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Id of the patient who owns the history record",
              "format" : "int32",
              "example" : 1500
            },
            "maskId" : {
              "type" : "integer",
              "description" : "If masked in Accuro, this value will be the mask id, null otherwise",
              "format" : "int32",
              "example" : 2
            },
            "modifiedDate" : {
              "type" : "string",
              "description" : "The date when this patient history item was modified",
              "example" : "2018-07-13T11:22:32.703"
            },
            "historyType" : {
              "type" : "string"
            }
          },
          "description" : "Abstract model class of patient history item history",
          "discriminator" : {
            "propertyName" : "historyType"
          }
        },
        "ImmunizationAgeDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "ID of this Immunization Age",
              "example" : "+00106"
            },
            "years" : {
              "type" : "integer",
              "description" : "The number of years the age represents",
              "format" : "int32",
              "example" : 6
            },
            "months" : {
              "type" : "integer",
              "description" : "The number of months the age represents",
              "format" : "int32",
              "example" : 10
            },
            "customName" : {
              "type" : "string",
              "description" : "Custom display name for use in Accuro",
              "example" : "One Year"
            },
            "fromScheduledDate" : {
              "type" : "boolean",
              "description" : "Whether the age represents the time from the date of birth, or from the scheduled vaccine date",
              "example" : true
            }
          },
          "description" : "ImmunizationAge data transfer object model representing the age at which the immunization is scheduled to be given",
          "example" : 5
        },
        "PatientImmunizationDto" : {
          "type" : "object",
          "properties" : {
            "patientId" : {
              "type" : "integer",
              "description" : "ID of the patient",
              "format" : "int32",
              "example" : 1000
            },
            "immunizationAge" : {
              "$ref" : "#/components/schemas/ImmunizationAgeDto"
            },
            "derivedAge" : {
              "type" : "string",
              "description" : "The derived age is the age the immunization was applied on in the format yyymm. This denotes years and months after the patient was born.",
              "example" : "01710"
            },
            "vaccineId" : {
              "type" : "integer",
              "description" : "Vaccine id which identifies the vaccine that this immunization administered",
              "format" : "int32",
              "example" : 151
            },
            "vaccineName" : {
              "type" : "string",
              "description" : "The name of the vaccine which was administered",
              "example" : "Licodermicaine"
            },
            "codeValue" : {
              "type" : "string",
              "description" : "The code value",
              "example" : "00431648"
            },
            "codeTable" : {
              "type" : "string",
              "description" : "Code table",
              "example" : "DIN"
            },
            "manufacturer" : {
              "type" : "string",
              "description" : "The manufacturer",
              "example" : "SANOFI PASTEUR"
            },
            "lotNumber" : {
              "type" : "string",
              "description" : "The lot number",
              "example" : "544525N"
            },
            "expiryDate" : {
              "type" : "string",
              "description" : "The expiry date",
              "example" : "2017-11-29T00:00:00.000"
            },
            "dose" : {
              "type" : "string",
              "description" : "The dose given",
              "example" : "2.0ml"
            },
            "note" : {
              "type" : "string",
              "description" : "The note",
              "example" : "Subcutaneous injection"
            },
            "administeredDate" : {
              "type" : "string",
              "description" : "The date when this immunization was administered",
              "example" : "2017-11-29"
            },
            "site" : {
              "type" : "string",
              "description" : "The site this immunization was administered",
              "example" : "Buttocks"
            },
            "route" : {
              "type" : "string",
              "description" : "The route",
              "example" : "IM"
            },
            "status" : {
              "type" : "string",
              "description" : "The status of this immunization",
              "example" : "refused"
            },
            "statusReason" : {
              "type" : "string",
              "description" : "The reason for the status"
            },
            "administeredInClinic" : {
              "type" : "boolean",
              "description" : "Flag indicating if this immunization was administered in clinic",
              "example" : true
            },
            "administeredLocation" : {
              "type" : "string",
              "description" : "The location this immunization was given",
              "example" : "Medical van"
            },
            "reaction" : {
              "type" : "string",
              "description" : "The reaction to the immunization",
              "example" : "Hives"
            },
            "contactInformation" : {
              "type" : "string",
              "description" : "Contact information with this immunization",
              "example" : "James Cell: 234-243-2345"
            },
            "instructions" : {
              "type" : "string",
              "description" : "Instructions with this immunization",
              "example" : "For the treatment of Bob's disease"
            },
            "customUuid" : {
              "type" : "string",
              "description" : "Custom uuid to this immunization",
              "example" : "d22d6188-9d6b-4b52-a34b-cfc5cf4641b2"
            },
            "immunizationId" : {
              "type" : "integer",
              "description" : "The id of this object",
              "format" : "int32",
              "example" : 12
            }
          },
          "description" : "PatientImmunization data transfer object model. This contains information regarding the vaccine which has been administered to the patient."
        },
        "ImmunizationScheduleDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "ID of the immunization schedule",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "Name of the immunization schedule",
              "example" : "Routine Schedule for Infants and Children"
            },
            "forAllPatients" : {
              "type" : "boolean",
              "description" : "Flag which indicates if the immunization schedule is for all patients",
              "example" : true
            }
          },
          "description" : "ImmunizationSchedule stores meta data associated with groups of scheduled vaccines."
        },
        "AlternativeHealthProductDto" : {
          "type" : "object",
          "properties" : {
            "productId" : {
              "type" : "integer",
              "description" : "The alternative health product id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The unique name of the alternative health product",
              "example" : "QHR SAMPLE PRODUCT 1MG"
            },
            "description" : {
              "type" : "string",
              "description" : "The description about the alternative health product",
              "example" : "THIS IS A SAMPLE PRODUCT"
            },
            "category" : {
              "type" : "string",
              "description" : "The category of the alternative health product",
              "example" : "TEMPORARY"
            },
            "productForm" : {
              "type" : "string",
              "description" : "The form of the alternative health product",
              "example" : "AEROSOL"
            },
            "dispenseUnit" : {
              "type" : "string",
              "description" : "The dispensed unit of the alternative health product",
              "example" : "AER"
            },
            "defaultDosageUnit" : {
              "type" : "string",
              "description" : "The dosage unit of the alternative health product",
              "example" : "AER"
            },
            "routeCode" : {
              "type" : "string",
              "description" : "The route code of the alternative health product",
              "example" : "Apply Externally"
            }
          },
          "description" : "The alternative health product transfer model"
        },
        "AnnotationDto" : {
          "type" : "object",
          "properties" : {
            "date" : {
              "type" : "string",
              "description" : "The date, the annotation has been created",
              "example" : "2018-07-13T00:00:00.000"
            },
            "type" : {
              "type" : "string",
              "description" : "The note type",
              "example" : "Record dosage for an as-directed Rx"
            },
            "authorizedBy" : {
              "type" : "string",
              "description" : "Provider name who authorized the note",
              "example" : "Doctor, David"
            },
            "enteredBy" : {
              "type" : "string",
              "description" : "Provider name who entered the note",
              "example" : "Doctor, David"
            },
            "comments" : {
              "type" : "string",
              "description" : "Comments by provider to the note type",
              "example" : "THIS PATIENT TAKES 2 PILLS AT ONCE"
            }
          },
          "description" : "Annotation data transfer object model"
        },
        "CodeValueDto" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "string",
              "description" : "A code of a codeValue",
              "example" : "OTH, SYNC"
            },
            "description" : {
              "type" : "string",
              "description" : "A description of a codeValue code",
              "example" : "Other(OTH), Unregistered Provider Detail(UPD)"
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Indication if codeValue is deleted or not",
              "example" : false
            },
            "codeOrder" : {
              "type" : "integer",
              "description" : "An order value of a list codevalues of same category",
              "format" : "int32",
              "example" : 1
            },
            "tableId" : {
              "type" : "string",
              "description" : "An Id which represents a category for codeValues",
              "example" : "99P0092"
            }
          },
          "description" : "The code value data transfer object",
          "example" : "Continued - See Comments"
        },
        "CustomCompoundDto" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The custom compound name",
              "example" : "CUSTOM COMPOUND"
            },
            "description" : {
              "type" : "string",
              "description" : "The description of the compound",
              "example" : "THIS IS A CUSTOM COMPOUND"
            },
            "includedIngredients" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A Set of ingredients included in the compound",
              "items" : {
                "$ref" : "#/components/schemas/IngredientDto"
              }
            },
            "excludedIngredients" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A Set of ingredients excluded in the compound",
              "items" : {
                "$ref" : "#/components/schemas/IngredientDto"
              }
            }
          },
          "description" : "The custom compound transfer model"
        },
        "FdbCcddMappingDto" : {
          "required" : [ "externalVocabId", "externalVocabType", "fdbVocabId", "fdbVocabType" ],
          "type" : "object",
          "properties" : {
            "fdbVocabId" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "The FDB vocabulary ID",
              "example" : "1"
            },
            "fdbVocabType" : {
              "type" : "string",
              "description" : "The FDB vocabulary type",
              "example" : "GenericCodeNumber",
              "enum" : [ "MedNameId", "MedId", "GenericCodeNumber", "FdbProductId", "HierarchicalIngredientCode", "Idc" ]
            },
            "externalVocabId" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The external(CCDD) vocabulary ID",
              "example" : "1"
            },
            "externalVocabType" : {
              "type" : "string",
              "description" : "The external(CCDD) vocabulary type",
              "example" : "NonProprietaryTherapeuticProduct",
              "enum" : [ "ManufacturedProduct", "NonProprietaryTherapeuticProduct", "TherapeuticMoiety", "DeviceNonProprietaryTherapeuticProduct" ]
            },
            "fdbLinkActivateDateUtc" : {
              "type" : "string",
              "description" : "The activate date(UTC) for the FDB link",
              "example" : "2000-05-31T00:00:00.000"
            },
            "externalLinkPreferred" : {
              "type" : "boolean",
              "description" : "The flag if the external link is preferred",
              "example" : true
            },
            "externalLinkRelated" : {
              "type" : "boolean",
              "description" : "The flag if the external link is related",
              "example" : true
            },
            "fdbLinkInactivateDateUtc" : {
              "type" : "string",
              "description" : "The inactivate date(UTC) for the FDB link",
              "example" : "2000-05-31T00:00:00.000"
            }
          },
          "description" : "The FDB CCDD mapping data transfer model"
        },
        "FormulationDto" : {
          "type" : "object",
          "properties" : {
            "formulationId" : {
              "type" : "integer",
              "description" : "The formulation id",
              "format" : "int32",
              "example" : 1
            },
            "genericId" : {
              "type" : "integer",
              "description" : "The generic id",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The formulation name",
              "example" : "250 mg Oral Capsule"
            },
            "systemicCode" : {
              "type" : "string",
              "description" : "The systemic code",
              "example" : "S"
            },
            "routeCode" : {
              "type" : "string",
              "description" : "The route code. For the details of code, look up values of code table, 99P0101.",
              "example" : "IJ"
            },
            "formCode" : {
              "type" : "string",
              "description" : "The form code. For the details of code, look up values of code table, 99P0101.",
              "example" : "IJ"
            },
            "commonForm" : {
              "type" : "string",
              "description" : "The common form",
              "example" : "AER"
            },
            "strengthDescription" : {
              "type" : "string",
              "description" : "The strength description",
              "example" : "2 mg/mL"
            },
            "fdbCcddMappings" : {
              "type" : "array",
              "description" : "The list of FDB CCDD mappings",
              "items" : {
                "$ref" : "#/components/schemas/FdbCcddMappingDto"
              }
            }
          },
          "description" : "The formulation transfer model"
        },
        "IngredientDto" : {
          "type" : "object",
          "properties" : {
            "drugId" : {
              "type" : "string",
              "description" : "The ingredient id",
              "example" : "1"
            },
            "drugType" : {
              "type" : "string",
              "description" : "The ingredient type",
              "example" : "SAMPLE"
            },
            "drugName" : {
              "type" : "string",
              "description" : "The ingredient name",
              "example" : "GRAPE"
            },
            "componentAmount" : {
              "type" : "integer",
              "description" : "The component amount",
              "format" : "int32",
              "example" : 1
            },
            "componentUnit" : {
              "type" : "string",
              "description" : "The component unit",
              "example" : "mg"
            },
            "componentNote" : {
              "type" : "string",
              "description" : "The component note",
              "example" : "THIS IS THE SAMPLE COMPONENT"
            },
            "drugIncluded" : {
              "type" : "boolean",
              "description" : "The flag if the ingredient is included",
              "example" : true
            }
          },
          "description" : "The ingredient transfer model"
        },
        "InteractionDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The interaction id",
              "format" : "int32",
              "example" : 1
            },
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The prescription id of the prescription which has the interaction",
              "format" : "int32",
              "example" : 1
            },
            "nameSpace" : {
              "type" : "string",
              "description" : "The name space",
              "example" : "ACCURO"
            },
            "source" : {
              "type" : "string",
              "description" : "The source of the interaction",
              "example" : "\"5\" Strain Dophilus"
            },
            "severityCode" : {
              "type" : "string",
              "description" : "The severity code",
              "example" : "UN",
              "enum" : [ "Unknown", "Severe", "Moderate", "Mild" ]
            },
            "severityText" : {
              "type" : "string",
              "description" : "The severity text",
              "example" : "UNKNOWN"
            },
            "screenType" : {
              "type" : "string",
              "description" : "The interaction screenType",
              "example" : "DAI",
              "enum" : [ "AllergyToDrug", "DrugAllergen", "DrugIntolerance", "DrugToDrug", "DosageAlert", "DuplicateTherapy", "DrugToDisease", "DiseaseToDrug", "DrugToLab", "LabToDrug", "RemovedInteraction", "ConcurrentDifferentUnits", "MultipleIngredients", "ScreeningUnavailable" ]
            },
            "subType" : {
              "type" : "string",
              "description" : "The interaction sub screenType",
              "example" : "SAMPLE"
            },
            "subTypeText" : {
              "type" : "string",
              "description" : "The text of the interaction sub screenType",
              "example" : "SAMPLE SUB TYPE"
            },
            "subCodeSystem" : {
              "type" : "string",
              "description" : "The sub code system",
              "example" : "SUBCODE"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the interaction",
              "example" : "\"5\" Strain Dophilus allergy conflicts with \"5\" Strain Dophilus"
            },
            "monographName" : {
              "type" : "string",
              "description" : "The monograph name",
              "example" : "SAMPLE MONOGRAPH"
            },
            "monographText" : {
              "type" : "string",
              "description" : "The monograph text",
              "example" : "THIS IS A SAMPLE MONOGRAPH"
            },
            "monographEffective" : {
              "type" : "string",
              "description" : "The effective date for the monograph",
              "example" : "2018-07-13T00:00:00.000"
            },
            "minDosage" : {
              "type" : "string",
              "description" : "The minimum dosage",
              "example" : "1"
            },
            "maxDosage" : {
              "type" : "string",
              "description" : "The maximum dosage",
              "example" : "0"
            },
            "dosageUnit" : {
              "type" : "string",
              "description" : "The dosage unit",
              "example" : "CAP"
            },
            "reqestedDosage" : {
              "type" : "string",
              "description" : "The requested dosage",
              "example" : "1"
            },
            "reqestedUnit" : {
              "type" : "string",
              "description" : "The requested dosage unit",
              "example" : "CAP"
            },
            "systemSource" : {
              "type" : "string",
              "description" : "The system source",
              "example" : "SAMPLE SOURCE"
            },
            "requiredManagement" : {
              "type" : "boolean",
              "description" : "The flag indicating if the dosage is required for the management",
              "example" : false
            },
            "sourceId" : {
              "type" : "string",
              "description" : "The source id",
              "example" : "1"
            },
            "interactionManagementDetails" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of interaction management details",
              "items" : {
                "$ref" : "#/components/schemas/InteractionManagementDetailsDto"
              }
            }
          },
          "description" : "Interaction data transfer object model"
        },
        "InteractionManagementDetailsDto" : {
          "type" : "object",
          "properties" : {
            "interactionId" : {
              "type" : "integer",
              "description" : "The id of the contraindication (interaction)",
              "format" : "int32",
              "example" : 1
            },
            "userName" : {
              "type" : "string",
              "description" : "The user name managed this contraindication (interaction). </p>This is not a provider's name.",
              "example" : "JohnDoe"
            },
            "managedTime" : {
              "type" : "string",
              "description" : "The date and time the contraindication was managed",
              "example" : "2018-07-13T00:00:00.000"
            },
            "managementAction" : {
              "$ref" : "#/components/schemas/CodeValueDto"
            },
            "applied" : {
              "type" : "boolean",
              "description" : "The flag if this is applied",
              "example" : true
            },
            "comments" : {
              "type" : "string",
              "description" : "The comments the user left",
              "example" : "THIS PATIENT SHOULD TRY TO TAKE THIS PILL."
            },
            "printedOnRx" : {
              "type" : "boolean",
              "description" : "The flag if the indication was printed on the prescription",
              "example" : true
            },
            "userId" : {
              "type" : "integer",
              "description" : "The user id managed this contraindication (interaction)",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The id of a managed prescription",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            }
          },
          "description" : "The interaction management details data transfer object"
        },
        "ManufacturedDrugDto" : {
          "type" : "object",
          "properties" : {
            "drugIdentificationNumber" : {
              "type" : "string",
              "description" : "The unique drug identification number as known as DIN of the manufacture drug",
              "example" : "00000001"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the manufactured drug",
              "example" : "QHR SAMPLE 1MG TABLET"
            },
            "manufacturer" : {
              "type" : "string",
              "description" : "The manufacturer of the manufactured drug",
              "example" : "QHR PHARMA"
            },
            "effectiveDate" : {
              "type" : "string",
              "description" : "The effective date",
              "format" : "date",
              "example" : "2017-11-29"
            },
            "endDate" : {
              "type" : "string",
              "description" : "The end date",
              "format" : "date",
              "example" : "2017-11-29"
            },
            "activeIngredientNumber" : {
              "type" : "string",
              "description" : "The number of the active ingredient as known as AIG",
              "example" : "0000000001"
            },
            "drugSchedule" : {
              "type" : "string",
              "description" : "The classification code of the manufactured drug",
              "example" : "P"
            },
            "formulationId" : {
              "type" : "integer",
              "description" : "The formulation id of the manufactured drug",
              "format" : "int32",
              "example" : 1
            },
            "commonForm" : {
              "type" : "string",
              "description" : "The common form of the manufactured drug.",
              "example" : "COMMON FORM"
            },
            "triplicate" : {
              "type" : "boolean",
              "description" : "The flag if the manufactured drug is triplicate",
              "example" : false
            },
            "asDirected" : {
              "type" : "boolean",
              "description" : "The flag if the manufactured drug is as directed",
              "example" : true
            }
          },
          "description" : "The manufactured drug transfer model"
        },
        "NaturalHealthProductDto" : {
          "type" : "object",
          "properties" : {
            "productId" : {
              "type" : "integer",
              "description" : "The unique id of the natural health product",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the natural health product",
              "example" : "Melatonin"
            },
            "dosageForm" : {
              "type" : "string",
              "description" : "The dosage form of the natural health product",
              "example" : "Capsule"
            },
            "routeCode" : {
              "type" : "string",
              "description" : "The route code of the natural health product",
              "example" : "Oral"
            },
            "licenceNumber" : {
              "type" : "string",
              "description" : "The licence number of the natural health product",
              "example" : "80000370"
            },
            "licenceDate" : {
              "type" : "string",
              "description" : "The license date of the natural health product",
              "format" : "date",
              "example" : "2017-11-29"
            }
          },
          "description" : "The natural health product transfer model"
        },
        "PrescriptionDetailsDto" : {
          "type" : "object",
          "properties" : {
            "formulation" : {
              "$ref" : "#/components/schemas/FormulationDto"
            },
            "manufacturedDrug" : {
              "$ref" : "#/components/schemas/ManufacturedDrugDto"
            },
            "genericDrug" : {
              "$ref" : "#/components/schemas/GenericDrugDto"
            },
            "naturalHealthProduct" : {
              "$ref" : "#/components/schemas/NaturalHealthProductDto"
            },
            "alternativeHealthProduct" : {
              "$ref" : "#/components/schemas/AlternativeHealthProductDto"
            },
            "customCompound" : {
              "$ref" : "#/components/schemas/CustomCompoundDto"
            }
          },
          "description" : "The prescription details transfer model"
        },
        "PrescriptionIndicationDto" : {
          "type" : "object",
          "properties" : {
            "indicationId" : {
              "type" : "string",
              "description" : "The indication id of an indication for the prescription",
              "example" : "1"
            },
            "indicationName" : {
              "type" : "string",
              "description" : "The indication name",
              "example" : "Crushing injury of external genitalia"
            },
            "indicationNote" : {
              "type" : "string",
              "description" : "The indication note",
              "example" : "SAMPLE NOTE"
            },
            "type" : {
              "type" : "string",
              "description" : "The indication type",
              "example" : "Legacy"
            }
          },
          "description" : "PrescriptionIndication data transfer object model"
        },
        "PrescriptionMedicationDto" : {
          "type" : "object",
          "properties" : {
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The unique prescription id",
              "format" : "int32",
              "example" : 1
            },
            "uuid" : {
              "type" : "string",
              "description" : "The mapped uuid for the prescription id",
              "example" : "cda20596-d35e-425b-87a5-d190281a020c"
            },
            "medicationId" : {
              "type" : "integer",
              "description" : "The medication id of the medication prescribed",
              "format" : "int32",
              "example" : 1
            },
            "maxDispenseQuantity" : {
              "type" : "integer",
              "description" : "The maximum dispense quantity",
              "format" : "int32",
              "example" : 0
            },
            "dispenseInterval" : {
              "type" : "integer",
              "description" : "The dispense interval",
              "format" : "int32",
              "example" : 0
            },
            "patientId" : {
              "type" : "integer",
              "description" : "The patient id of the patient having this prescription",
              "format" : "int32",
              "example" : 1
            },
            "refills" : {
              "type" : "integer",
              "description" : "The number of refill",
              "format" : "int32",
              "example" : 0
            },
            "prescribingPhysician" : {
              "type" : "integer",
              "description" : "The physician id of the physician prescribing",
              "format" : "int32",
              "example" : 1
            },
            "authorizingPhysician" : {
              "type" : "integer",
              "description" : "The physician id of the physician authorized",
              "format" : "int32"
            },
            "maskId" : {
              "type" : "integer",
              "description" : "The mask id",
              "format" : "int32",
              "example" : 1
            },
            "dispenseAmount" : {
              "type" : "integer",
              "description" : "The dispense amount",
              "format" : "int32",
              "example" : 1
            },
            "daysRemaining" : {
              "type" : "integer",
              "description" : "Days remaining",
              "format" : "int32",
              "example" : 0
            },
            "creatorUserId" : {
              "type" : "integer",
              "description" : "The user id of the user created the prescription",
              "format" : "int32",
              "example" : 1
            },
            "previousPrescriptionId" : {
              "type" : "integer",
              "description" : "The previous prescription id. Null if the prescription is the first prescription",
              "format" : "int32",
              "nullable" : true,
              "example" : 1
            },
            "refillAmount" : {
              "type" : "integer",
              "description" : "The refill amount",
              "format" : "int32",
              "example" : 1
            },
            "userId" : {
              "type" : "integer",
              "description" : "The user id",
              "format" : "int32",
              "example" : 1
            },
            "wellnetFormulationId" : {
              "type" : "integer",
              "description" : "The Wellnet formulation id",
              "format" : "int32",
              "example" : 1
            },
            "pharmacyId" : {
              "type" : "integer",
              "description" : "The pharmacy id",
              "format" : "int32",
              "example" : 1
            },
            "active" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is active",
              "example" : true
            },
            "maskDisplay" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is masked",
              "example" : true
            },
            "externalRx" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is an external prescription",
              "example" : true
            },
            "nondrug" : {
              "type" : "boolean",
              "description" : "The indication if the prescribed medication is non-drug",
              "example" : true
            },
            "legacy" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is legacy",
              "example" : true
            },
            "autoExpire" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is auto-expired",
              "example" : true
            },
            "renewed" : {
              "type" : "boolean",
              "description" : "The indication if the prescription is re-newed",
              "example" : true
            },
            "quantityModified" : {
              "type" : "boolean",
              "description" : "The indication if the quantity is modified",
              "example" : true
            },
            "quantityUnitModified" : {
              "type" : "boolean",
              "description" : "The indication if the quantity unit is modified",
              "example" : true
            },
            "nonAuthoritativeIndicator" : {
              "type" : "boolean",
              "description" : "The indication if the prescribed indicator is non-authoritative",
              "example" : true
            },
            "allowSubstitutions" : {
              "type" : "boolean",
              "description" : "The indication if the prescription allows substitutions.",
              "nullable" : true,
              "example" : true
            },
            "allowTrialDispenses" : {
              "type" : "boolean",
              "description" : "The indication if the prescription allows trial dispenses",
              "nullable" : true,
              "example" : true
            },
            "compliancePackageRequired" : {
              "type" : "boolean",
              "description" : "The indication if the prescription requires compliance package",
              "nullable" : true,
              "example" : true
            },
            "patientCompliance" : {
              "type" : "boolean",
              "description" : "The indication if a prescribed patient is compliance",
              "nullable" : true,
              "example" : true
            },
            "localStartDate" : {
              "type" : "string",
              "description" : "The prescription local start date",
              "example" : "2017-11-29"
            },
            "dosage" : {
              "type" : "string",
              "description" : "The dosage",
              "example" : "TAB"
            },
            "dosageForm" : {
              "type" : "string",
              "description" : "The dosage form",
              "example" : "TAB"
            },
            "medType" : {
              "type" : "string",
              "description" : "The medication type",
              "example" : "MEDICATION TYPE"
            },
            "pharmacyInstructions" : {
              "type" : "string",
              "description" : "The pharmacy instructions",
              "example" : "DO NOT TAKE 2 PILLS AT ONCE"
            },
            "sigInstructions" : {
              "type" : "string",
              "description" : "The sig instructions which is labeled in prescription",
              "example" : "TAKE 1 PILL, BY MOUTH, AT BEDTIME"
            },
            "route" : {
              "type" : "string",
              "description" : "The route to take the medication",
              "example" : "Oral"
            },
            "interval" : {
              "type" : "string",
              "description" : "The interval quantity to take the medication",
              "example" : "1"
            },
            "amount" : {
              "type" : "string",
              "description" : "Unit to take the medication",
              "example" : "TAB"
            },
            "medStatus" : {
              "type" : "string",
              "description" : "Status of the prescription",
              "example" : "Recently Active",
              "enum" : [ "Active", "Recently Active", "Inactive" ]
            },
            "dispenseUnit" : {
              "type" : "string",
              "description" : "The dispense unit",
              "example" : "TAB"
            },
            "drugUse" : {
              "type" : "string",
              "description" : "The drug use on Accuro",
              "example" : "One Time"
            },
            "openIndication" : {
              "type" : "string",
              "description" : "The open indication",
              "example" : "TAKE 1PILL EVERYDAY"
            },
            "din" : {
              "type" : "string",
              "description" : "The drug identification number as DIN",
              "example" : "1"
            },
            "compoundName" : {
              "type" : "string",
              "description" : "The compound name. An empty string If the prescription is not a compound.",
              "example" : "SAMPLE COMPOUND"
            },
            "wellnetId" : {
              "type" : "string",
              "description" : "The Wellnet id",
              "example" : "1"
            },
            "orderStatus" : {
              "type" : "string",
              "description" : "The order status",
              "example" : "Unknown"
            },
            "compoundDetails" : {
              "type" : "string",
              "description" : "The compound details. Empty if the prescription is not a compound.",
              "example" : "THIS IS A SAMPLE COMPOUND"
            },
            "providerId" : {
              "type" : "string",
              "description" : "The provider id of a provider prescribed",
              "example" : "1"
            },
            "providerName" : {
              "type" : "string",
              "description" : "The name of a provider prescribed",
              "example" : "David Doctor"
            },
            "orderCode" : {
              "type" : "string",
              "description" : "The order code",
              "example" : "1"
            },
            "source" : {
              "type" : "string",
              "description" : "The source of the drug",
              "example" : "PIN"
            },
            "maxDispenseUnit" : {
              "type" : "string",
              "description" : "The maximum dispense unit",
              "example" : "APPLN"
            },
            "dispenseIntervalUnit" : {
              "type" : "string",
              "description" : "The dispense interval unit",
              "example" : "AN"
            },
            "dispensedNote" : {
              "type" : "string",
              "description" : "The dispense note",
              "example" : "SAMPLE NOTE"
            },
            "externalMedicationState" : {
              "type" : "string",
              "description" : "The external medication state"
            },
            "protocolIdentifier" : {
              "type" : "string",
              "description" : "The protocol identifier"
            },
            "eprescribeStatus" : {
              "type" : "string",
              "description" : "Electronic prescription status",
              "example" : "NEW"
            },
            "note" : {
              "type" : "string",
              "description" : "The note",
              "example" : "TAKE 2 PILLS AT ONCE"
            },
            "dinSystem" : {
              "type" : "string",
              "description" : "The medication type",
              "example" : "DIN",
              "enum" : [ "DIN", "GF", "AHP", "NPN", "GD", "COMPOUND" ]
            },
            "writtenDate" : {
              "type" : "string",
              "description" : "The written date of the prescription",
              "example" : "2017-11-29"
            },
            "expiryDate" : {
              "type" : "string",
              "description" : "The expired date of the prescription",
              "example" : "2017-11-29"
            },
            "effectiveDate" : {
              "type" : "string",
              "description" : "The effective date of the prescription",
              "example" : "2017-11-29"
            },
            "pickUpDate" : {
              "type" : "string",
              "description" : "The pick-up date of the prescription",
              "example" : "2017-11-29"
            },
            "dispensedDate" : {
              "type" : "string",
              "description" : "The dispensed date of the prescription",
              "example" : "2017-11-29"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "The created date of the prescription",
              "example" : "2017-11-29T00:00:00.000"
            },
            "lastModified" : {
              "type" : "string",
              "description" : "The last modified date of the prescription",
              "example" : "2017-11-29T00:00:00.000"
            },
            "doNotAutofill" : {
              "type" : "boolean",
              "description" : "Do not auto fill flag for prescription",
              "nullable" : true,
              "example" : true
            },
            "allowRenewalRequests" : {
              "type" : "boolean",
              "description" : "Allow renewal requests flag for prescription",
              "nullable" : true,
              "example" : false
            },
            "prescriptionDetails" : {
              "$ref" : "#/components/schemas/PrescriptionDetailsDto"
            },
            "dosages" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of dosages",
              "items" : {
                "$ref" : "#/components/schemas/DosageDto"
              }
            },
            "indications" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of indications",
              "items" : {
                "$ref" : "#/components/schemas/PrescriptionIndicationDto"
              }
            },
            "annotations" : {
              "type" : "array",
              "description" : "A list of annotations",
              "items" : {
                "$ref" : "#/components/schemas/AnnotationDto"
              }
            },
            "statusHistories" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of status histories",
              "items" : {
                "$ref" : "#/components/schemas/StatusHistoryDto"
              }
            },
            "interactions" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of interactions",
              "items" : {
                "$ref" : "#/components/schemas/InteractionDto"
              }
            },
            "wellnetPrescriptionLinks" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "A set of Wellnet prescription links",
              "items" : {
                "$ref" : "#/components/schemas/WellnetPrescriptionLinkDto"
              }
            },
            "limitedUseCodes" : {
              "type" : "array",
              "description" : "A list of limited use code. This entity will return on Ontario and when the medication type is DIN",
              "items" : {
                "$ref" : "#/components/schemas/LimitedUseCodeDto"
              }
            },
            "ontarioDetails" : {
              "$ref" : "#/components/schemas/OntarioDetailsDto"
            }
          },
          "description" : "Prescription medication transfer model"
        },
        "StatusHistoryDto" : {
          "type" : "object",
          "properties" : {
            "changeId" : {
              "type" : "integer",
              "description" : "Change id",
              "format" : "int32",
              "example" : 12
            },
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The prescription id.",
              "format" : "int32",
              "example" : 12
            },
            "orderStatus" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The order status",
              "example" : "Order is on hold"
            },
            "effectiveDate" : {
              "type" : "string",
              "description" : "The effective date",
              "example" : "2018-07-13T00:00:00.000"
            },
            "endDate" : {
              "type" : "string",
              "description" : "The end date",
              "example" : "2018-07-13T00:00:00.000"
            },
            "authorizedBy" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name and the provider id of the provider who authorized the status",
              "example" : "Doctor, David [12340]"
            },
            "reason" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The reason of the status",
              "example" : "HOLD Reasons no longer apply"
            },
            "comments" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The comments of the status",
              "example" : "SAMPLE COMMENTS"
            }
          },
          "description" : "StatusHistory data transfer object model"
        },
        "WellnetPrescriptionLinkDto" : {
          "type" : "object",
          "properties" : {
            "wellnetId" : {
              "type" : "string",
              "description" : "The Wellnet id related to the prescription",
              "example" : "1"
            }
          },
          "description" : "WellnetPrescriptionLink data transfer object model"
        },
        "EnvelopeDtoPrescriptionMedicationDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/PrescriptionMedicationDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "ScheduleVaccineDto" : {
          "type" : "object",
          "properties" : {
            "immunizationScheduleId" : {
              "type" : "integer",
              "description" : "ID of this immunization schedule",
              "format" : "int32",
              "example" : 1
            },
            "immunizationAge" : {
              "$ref" : "#/components/schemas/ImmunizationAgeDto"
            },
            "vaccine" : {
              "$ref" : "#/components/schemas/VaccineDto"
            },
            "optional" : {
              "type" : "boolean",
              "description" : "Flag indicating if the scheduled vaccine is optional",
              "example" : false
            }
          },
          "description" : "Schedule vaccine data transfer object model"
        },
        "VaccineDto" : {
          "type" : "object",
          "properties" : {
            "vaccineId" : {
              "type" : "integer",
              "description" : "Id of the vaccine",
              "format" : "int32",
              "example" : 1
            },
            "vaccineName" : {
              "type" : "string",
              "description" : "Name of the vaccine",
              "example" : "Hepatitis A"
            },
            "immunizationAbbreviation" : {
              "type" : "string",
              "description" : "Abbreviation of the vaccine name",
              "example" : "HepA"
            },
            "codeValue" : {
              "type" : "string",
              "description" : "Drug code of the vaccine",
              "example" : "02245677"
            },
            "codeTable" : {
              "type" : "string",
              "description" : "Drug code table of the vaccine",
              "example" : "DIN"
            },
            "manufacturer" : {
              "type" : "string",
              "description" : "The manufacturer of the vaccine",
              "example" : "GlaxoSmithKline"
            },
            "lotNumber" : {
              "type" : "string",
              "description" : "The vaccine lot number",
              "example" : "12"
            },
            "expiryDate" : {
              "type" : "string",
              "description" : "The expiry date",
              "example" : "2024-06-27T00:00:00.000"
            },
            "route1" : {
              "type" : "string",
              "description" : "The first route of the vaccine",
              "example" : "IM"
            },
            "route2" : {
              "type" : "string",
              "description" : "The second route of the vaccine",
              "example" : "SC"
            },
            "dose" : {
              "type" : "string",
              "description" : "Dose of the vaccine",
              "example" : "2"
            },
            "note" : {
              "type" : "string",
              "description" : "The note of the vaccine",
              "example" : "It contains thimerosal as a preservative"
            },
            "quantity" : {
              "type" : "integer",
              "description" : "Quantity of the vaccine",
              "format" : "int32",
              "example" : 3
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indication if the vaccine is active",
              "example" : true
            },
            "vaccineTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "description" : "The types of the vaccine",
              "example" : [ "MMR", "Rotavirus" ],
              "items" : {
                "type" : "string",
                "description" : "The types of the vaccine",
                "example" : "[\"MMR\",\"Rotavirus\"]"
              }
            }
          },
          "description" : "Vaccine data transfer object model"
        },
        "PrescriptionFavoriteDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "prescriptionIds" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "name" : {
              "type" : "string"
            },
            "userId" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "PrescriptionHistoryDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The prescription history id.",
              "format" : "int32"
            },
            "loggedTime" : {
              "type" : "string",
              "description" : "The date and time (Accuro application time) the activity was logged.",
              "example" : "2020-02-10T00:00:00.000"
            },
            "loggedObject" : {
              "type" : "string",
              "description" : "An xml representation of the changed prescription."
            },
            "activity" : {
              "type" : "string",
              "description" : "The action performed on the Prescription.",
              "enum" : [ "Accuro Launched", "Accuro Exited", "Custom Report Uploaded", "Custom Report Deleted", "Add Patient", "Update Patient", "Retrieve Patient Information", "Delete Patient", "Merge Patient", "Recover Patient", "Delete Patient (Administrative)", "Reverse Delete Patient (Administrative)", "Archive Patient", "Unarchive Patient", "Global Patient Loaded", "Delete Patient Cohort", "Recover Patient Cohort", "Login Failed", "Login Successful", "Logout Successful", "Screen Lock", "Switch User", "Copied Claim", "Permissions Changed", "Saved System Settings", "Add Prescription", "Update Prescription", "Remove Prescription", "Recover Prescription", "Print Rx", "Add Medication Administration", "Edit Medication Administration", "Add Allergy", "Edit Allergy", "Remove Allergy", "Recover Allergy", "Deactivate Allergy", "Reactivate Allergy", "Add Patient Flag", "Remove Patient Flag", "Add History", "Edit History", "Remove History", "Recover History", "Add History Text", "Edit History Text", "Remove History Text", "Recover History Text", "Add History URL", "Edit History URL", "Remove History URL", "Recover History URL", "Add Tracking History", "Edit Tracking History", "Delete Tracking History", "Recover Tracking History", "Add Risk Factor", "Edit Risk Factor", "Delete Risk Factor", "Recover Risk Factor", "Add Letter", "Update Letter", "Reviewed Letter", "Locked Letter", "Unlocked Letter", "Remove Letter", "Recovered Letter", "Transfer Clinical Note", "Delete External Chart Item", "Recovered External Chart Item", "Print Job Added To Queue", "Print Job Removed From Queue", "Letter Added To Queue", "Letter In Queue Modified", "Letter Removed From Queue", "Added Immunization", "Updated Immunization", "Removed Immunization", "Added Immunization Schedule", "Removed Immunization Schedule", "Lock Chart", "Unlock Chart", "Approve Daysheet", "Update Daysheet", "View Log", "Print Log", "Change Password", "OLIS Service Queried", "OLIS Patient Consent Changed", "View Chart", "View Medical Summary", "View Chart Item", "Add Provider", "Update Provider", "Removed Provider", "Deactivate Surgeon", "Reactivate Surgeon", "Add/Update Open Provider Permission", "Delete Open Provider Permission", "Merge Provider", "Recover Provider", "Add Insurer", "Update Insurer", "Delete Insurer", "Recover Insurer", "Private Payment Activity", "Add Private Payment Credit / Refund", "Delete Private Payment Credit / Refund", "Save Claim", "Adjusted Bill", "Undo Adjust Bill", "Write Off", "Undo Write Off", "Billing Error", "Previously Paid", "Delete Procedure", "Delete Bill Only Claim", "Accept bill response", "Mark as Invoiced", "Unmark as Invoiced", "Changed Insurer", "Changed to Private Insurer", "Unlock Claim", "Add Patient Insurer", "Remove Patient Insurer", "Modify Document Date", "Upload Document", "Modify Document", "Merge Document From Virtual Chart", "Delete Document", "Recover Document", "Read Document", "Unread Document", "File Transfer", "Edit Virtual Chart Document", "Document Annotated", "Document Annotated - Document Loader", "Document Annotated - Text Added", "Document Annotated - Text Deleted", "Document Annotated - Text Changed", "Document Annotated - Signature Added", "Document Annotated - Signature Deleted", "Document Annotated - Signature Changed", "Document Annotated - Highlight Added", "Document Annotated - Highlight Deleted", "Add Schedule Template", "Update Schedule Template", "Remove Schedule Template", "Add Schedule Suggestion", "Remove Schedule Suggestion", "Link Schedule Template to Provider", "Unlink Schedule Template to Provider", "Add Availability Template", "Update Availability Template", "Remove Availability Template", "Add Availability", "Remove Availability", "Link Availability Template to Provider", "Unlink Availability Template to Provider", "Add Lab Observation Group", "Edit Lab Observation Group", "Delete Lab Observation Group", "Recover Lab Observation Group", "Manual Lab Patient Match", "Viewed Labs", "Added Task", "Edited Task", "Completed Task", "Removed Task", "Recovered Task", "Uncomplete Task", "Removed Attachments", "Added Attachments", "Added Message", "Edited Message", "Filed Message", "Reviewed Message", "Deleted Message", "Added Note", "Updated Note", "Deleted Note", "Recovered Note", "Added Form", "Updated Form", "Deleted Form", "Recovered Form", "Reconciled Requsition", "Updated Repliform", "Added Letter", "Updated Letter", "Deleted Letter", "Recovered Letter", "Reviewed Letter", "Locked Letter", "Unlocked Letter", "Locked Form", "UnLocked Form", "Generated Letter", "Delete Generated Letter", "Sent/Faxed Generated Letter", "Letter Template Created", "Letter Template Updated", "Letter Template Deleted", "Added Diagnosis", "Updated Diagnosis", "Deleted Diagnosis", "Restore Diagnosis", "Deactivated Chronic Condition", "Reactivated Chronic Condition", "Mask Overriden", "Admin Mask Overriden", "Masked Access Attempt", "Change Mask", "Export Patient", "Import Patient", "Update Database Scheme", "Create Appointment", "Edit Appointment", "Move Appointment", "Copied Appointment", "Deleted Appointment", "Canceled Appointment", "Recover Appointment", "Archive Appointment", "Unarchive Appointment", "Remove Arrived Appointment", "Create Appointment Deflection", "Remove Appointment Deflection", "Add Patient Vaccine", "Edit Patient Vaccine", "Complete Patient Vaccine Entry", "Uncomplete Patient Vaccine Entry", "Edit Patient Vaccine Entry", "Set Vaccine Schedule for All Patients", "Remove Vaccine Schedule for All Patients", "Add CDM Worksheet", "Update CDM Worksheet", "Remove CDM Worksheet", "Recover CDM Worksheet", "Add Group Appointment", "Update Group Appointment", "Remove Group Appointment", "Recover Group Appointment", "Canceled Group Appointment", "Saved Procedure", "Match Remittence", "Unmatch Remittence", "Close Billing Period", "Open Billing Period", "Add Security Role", "Changed User Preferences", "Api Client Registration", "Copy User Preferences", "Remove Security Role", "Edit Security Role", "Add Office", "Edit Office", "Delete Office", "Add Office Providers", "Remove Office Providers", "Add Site", "Edit Site", "Add Office Resources", "Remove Office Resources", "Delete Site", "Add Permission Template", "Remove Permission Template", "Edit Permission Template", "Add User", "Remove User", "Edit User", "Add User Office Role For Provider Permissions", "Add User Office Role For Resource Permissions", "Remove User Office Role For Provider Permissions", "Remove User Office Role For Resource Permissions", "Add User Office Provider Permissions", "Add User Office Resource Permissions", "Remove User Office Provider Permissions", "Remove User Office Resource Permissions", "Edit User Office Provider Permissions", "Edit User Office Resource Permissions", "Edit Feature Permission Access", "Bulk Provider Permissions Changes", "Add Notification Recipient", "Remove Notification Recipient", "Notifications Changed", "UpdateList Run By", "Print", "Mass Transfer", "PMR Import", "QHR Technologies Admin Login", "ACE Login", "Provider Configuration", "Admin Activities", "Admin Password Verification", "CDS Export", "CDS Diabetes Export", "CDS CIHI Export", "Wait List Add Request", "Wait List Edit Request", "Wait List Delete Request", "Wait List Auto-Complete", "Wait List Mass Status Update", "Reverse Waitlist Mass Status Update", "Wait List Export", "Wait List OR Booking Package", "Data Sharing Export", "Data Sharing Import", "Review Return Chart", "Fax Create", "Fax Update", "Fax Delete", "Fax Sent", "Fax Download", "Recovered Fax", "Print Fax", "Add Contact", "Edit Contact", "Recover Contact", "Delete Contact", "Match Refusal", "Remittance NOF Status Changed", "Refusal NOF Status Changed", "SLI Changed", "Master Number Changed", "Remittance NOF", "Deleted Letter Macro", "Added Letter Macro", "Updated Letter Macro", "Deleted Pregnancy", "Viewed Locked Chart (MB)", "Restored Pregnancy", "Interface Event", "Remittance Payment Period Changed", "Patient Data Export", "Query Alert", "Run Query Alert", "Install Type Changed", "Copy User Permissions", "Added Documents Folder", "Edited Documents Folder", "Deleted Documents Folder", "Added Documents Sub-Type", "Edited Documents Sub-Type", "Deleted Documents Sub-Type", "Set Signature Settings", "Added New Resource", "Deleted Resource", "Edited Resource", "Registration Change", "Database Level Change", "Custom Action Deleted", "Recover resource", "Deleted Enrollment History Entry", "OAuth Access Granted", "OAuth Access Attempted", "OneID Account Link Modified", "Cleared Sent Faxes", "Recovered Cleared Sent Faxes", "PIN Indicator Override Change", "PatientPrep Sign-Up", "Health Card Validation Expiry Status changed", "Downloaded Remittance", "Accepted Medeo Booking Request", "Rejected Medeo Booking Request", "Adjusted Medeo Booking Request", "Manual Medeo Patient Match", "Medeo Patient Verified", "Medeo Dependency Patient Linked", "Reverse Medeo Patient Verified", "Reverse Manual Medeo Patient Match", "Reverse Medeo Patient Dependency Link", "Reverse Rejected Medeo Booking Request", "Configurable Interface Enabled", "Configurable Interface Disabled", "SK eHR Web Service", "Modified Claim Providers", "Reverse Modify Claim Providers", "SAML Auth Request", "SAML Auth Response", "Add RxAlterations Compound DIN Link", "Update RxAlterations Compound DIN Link", "Delete RxAlterations Compound DIN Link", "Restore RxAlterations Compound DIN Link", "Apply RxAlterations Compound DIN Link", "Revert RxAlterations Compound DIN Link", "Apply RxAlterations Compound DIN Link Rx", "Update RxAlterations Compound DIN Link Rx", "Revert RxAlterations Compound DIN Link Rx", "eConsult Conversation Created", "eConsult Message Added", "Conversation Viewed", "Medeo Messaging Conversation Created", "Medeo Messaging Message Added", "Medeo Messaging Conversation Closed", "Medeo Messaging Conversation Permanently Closed", "Patient Verified", "Reverse Patient Verified Status", "Add Custom Field", "Remove Custom Field", "Updated Traffic Manager Patient", "CDR Link Created", "CDR Link Deleted", "Created Virtual Care Appointment", "Edited Virtual Care Appointment", "Moved Virtual Care Appointment", "Copied Virtual Care Appointment", "Canceled Virtual Care Appointment", "Mapped Content Type to Notes/Forms", "Waitlist View Sharing", "Enroll Patient", "Enrollment Terminate", "MB Home Clinic Created", "MB Home Clinic Updated", "MB Home Clinic Deleted", "MB Home Clinic Patient Enrolled", "MB Home Clinic Patient Enrollment Update", "MB Home Clinic Patient Enrollment Cancelled", "MB Home Clinic Patient Enrollment Successful", "MB Home Clinic Patient Enrollment Failed", "MB Home Clinic Patient Enrollment Resend", "MB Home Clinic Remediation Retrieval", "MB Home Clinic Messages Received Total", "MB Home Clinic Complete Retrieval Successful", "MB Home Clinic Complete Retrieval Failed", "MB Home Clinic Client Summary Submission", "MB Home Clinic Client Summary Validation Message Retrieval", "Managing Cohorts", "Profile Loaded", "Update Document Metadata", "Create Docs Data", "Remove Docs Data", "Update Docs Data Process Flag", "Report Patient ID Column Selection Confirmed", "QHR Privacy Consent", "HINPIS Privacy Consent", "Added Task Conversation", "Create Schedule Room", "Update Schedule Room", "Remove Schedule Room", "Personal Waitlist View", "Add Healthmail Address", "Delete Healthmail Address", "Edit Healthmail Address", "Healthmail Delegate Add", "Healthmail Delegate Remove", "Healthmail Delegate Permission Update", "Healthmail Send Message", "Healthmail Delegate Send Message", "Healthmail Retrieve Messages", "Healthmail Read Message", "Healthmail Message Deleted", "Upload Provider Claims", "DHIR Data Retrieved", "DHIR Data Retrieval Failed", "DHDR Data Retrieved", "DHDR Data Retrieval Failed", "DHIR Immunization Submission Built", "DHIR Immunization Submission Sent", "DHIR Immunization Submission Failed", "DHDR Consent Verification Attempt", "DHDR Temporary Consent Override", "DHDR Disclaimer Suppressed", "ON organization selected", "ON organization created", "ON organization modified", "ON organization deleted", "ON organization assignment modified", "DHDR-DHIR Context Changed", "Ontario EHR Service Interaction", "ON eHealth Gateway Client ID Changed", "ON eHealth Gateway Client Secret Changed", "A Viewlet Configuration was created", "A Viewlet Configuration was modified", "A Viewlet Configuration was expired", "Application Configuration Update Failed", "Application Configuration Update Success", "Administration Activities", "Secure Folders User Group Updated", "Secure Folders Updated", "Medeo Messaging Conversation Opened", "Applications Access Updated", "Emtellipro Transmission", "Confirm Emtellipro Output", "Medeo Caregiver Added", "Medeo Caregiver Updated", "Medeo Caregiver Deleted", "Send ePrescription", "Send ePrescription Cancel Request", "Received ePrescription Cancel Response", "Deleted ePrescription Cancel Response", "Revoke ePrescription Cancel Request", "Renewal Request Received", "Renewal Request Deleted", "Renewal Request Group Received", "Renewal Request Group Updated", "Renewal Request Group Deleted", "Renewal Request Response Sent", "Jurisdictional RX Identifier Received", "Pharmacist Adapted Prescription", "Pharmacist Prescribed", "Formulary Request", "Dispense Notification", "Dispense Notification Created", "Dispense Notification Updated", "Dispense Notification Cancelled", "Erx Job Failed", "Erx Deferred Transmission Response", "HealthMail Patient Matched", "HealthMail Patient Unmatched", "Medeo Caregiver Invitation Sent", "Add Accuro Conversation Contact", "Update Accuro Conversation Contact", "Delete Accuro Conversation Contact", "Delete Accuro User Conversation Contact", "Create Accuro User Conversation Contact", "Accuro Identifier Updated", "MB Client Registry Search", "Transition To Cloud", "Medication Request Created", "Medication Request Updated", "Medication Request Cancelled", "Create Eprescribe Outcome", "Update Eprescribe Outcome", "Delete Eprescribe Outcome", "ERX Clinician Communication Sent", "Healthmail Conversation Created", "Healthmail Conversation Message Created", "Healthmail Conversation Updated", "Conversation External Patient Created", "Conversation External Patient Deleted", "External Patient Retrieved", "External Patient Created", "External Patient Updated", "External Patient Deleted", "Added custom facility", "Edited facility", "CPAR Panel Submission", "Update Interface Document Types", "Update Interface Letter Types", "Update Patient Provider", "Launched Provincial Web Service", "Disable physician Visibility", "Add physician lab ids", "Update physician lab ids", "Delete physician lab ids", "Update billing pharmacist claim status", "Delete billing pharmacist claim status", "Add billing pharmacist claim status", "Submit Billing Pharmacist Claim Status", "Override Billing Pharmacist Claim Status By User", "Update Billing Special Service Fee", "Delete Billing Special Service Fee", "Add Billing Special Service fee", "Check license entitlement", "Performed remittances administration action", "Create LicenseData", "Update LicenseData", "Delete LicenseData", "Create entitlement", "Update entitlement", "Delete entitlement", "Create Service Resource Roles", "Update Service Resource Roles", "Delete Service Resource Roles", "Run Report", "Export Report", "Conversation Unmatched Patient Retrieved", "Conversation Unmatched Patient Created", "Conversation Unmatched Patient Updated", "Conversation Unmatched Patient Deleted", "Create Procedure List", "Update Procedure List", "Delete Procedure List", "Add Swl Request Procedure", "Update Swl Request Procedure", "Delete Swl Request Procedure", "Add Swl Request Patient Unavailability", "Update Swl Request Patient Unavailability", "Delete Swl Request Patient Unavailability", "Marked as Resolved Manually", "Marked as Unresolved", "Create Referral Order", "Update Referral Order", "Delete Referral Order", "Update Business Arrangement", "Submission Started", "Submission Confirmed", "Submission Aborted", "Add Swl Request Site", "Update Swl Request Site", "Delete Swl Request Site", "Physician Number Created", "Physician Number Updated", "Physician Number Deleted" ]
            },
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The unique database id of the prescription that has been altered or created.",
              "format" : "int32"
            },
            "username" : {
              "type" : "string",
              "description" : "The username of the Accuro User who performed the activity."
            },
            "patientId" : {
              "type" : "integer",
              "description" : "A patient where a prescription is for.",
              "format" : "int32"
            }
          },
          "description" : "The prescription history transfer model"
        },
        "BillingPharmacistClaimStatusDto" : {
          "required" : [ "appointmentId", "guid", "physicianId", "province", "specialServiceFeeId", "status", "statusId" ],
          "type" : "object",
          "properties" : {
            "guid" : {
              "type" : "string",
              "description" : "The unique identifier as uuid",
              "example" : "16f73363-aedd-4ee8-87ea-8bafb454411d"
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "The appointment Id",
              "format" : "int32",
              "example" : 1
            },
            "statusId" : {
              "type" : "integer",
              "description" : "The status id",
              "format" : "int32",
              "example" : 1
            },
            "status" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "The status description",
              "example" : "updated status"
            },
            "statusErrorMessage" : {
              "type" : "string",
              "description" : "The status error message",
              "example" : "status message"
            },
            "statusUserMessage" : {
              "type" : "string",
              "description" : "The status user message",
              "example" : "status user message"
            },
            "statusDateUtc" : {
              "type" : "string",
              "description" : "The status updated date in utc. If its null it will be set to current utc timestamp",
              "example" : "2024-05-07T16:20:10.258"
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "ID of the physician",
              "format" : "int32",
              "example" : 12
            },
            "specialServiceFeeId" : {
              "type" : "integer",
              "description" : "ID of the special service fee. No size validation added because column length is not same in all provinces",
              "format" : "int32",
              "example" : 12
            },
            "province" : {
              "maxLength" : 2,
              "minLength" : 0,
              "type" : "string",
              "description" : "The Province",
              "example" : "ON"
            },
            "statusOverride" : {
              "type" : "integer",
              "description" : "status override by default it will be null",
              "format" : "int32"
            }
          },
          "description" : "Billing Pharmacist Claim Status Data Transfer Object"
        },
        "ConversationContactDto" : {
          "required" : [ "contactId", "identifier", "service" ],
          "type" : "object",
          "properties" : {
            "contactId" : {
              "type" : "integer",
              "description" : "The unique id of the conversation contact",
              "format" : "int32",
              "example" : 1
            },
            "identifier" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string",
              "description" : "The unique identifier of the conversation contact",
              "example" : "7dfbc81e-5e18-4d24-9750-f884869b8855"
            },
            "service" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string",
              "description" : "The service",
              "example" : "Service"
            },
            "displayName" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string",
              "description" : "The display name",
              "example" : "EMERGENCY CONTACT"
            },
            "externalUuid" : {
              "type" : "string",
              "description" : "The external UUID",
              "format" : "uuid",
              "example" : "550e8400-e29b-41d4-a716-446655440000"
            }
          },
          "description" : "The paginated results of the query"
        },
        "EnvelopeDtoConversationContactDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/ConversationContactDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "UserConversationContactDto" : {
          "required" : [ "contactId", "userId" ],
          "type" : "object",
          "properties" : {
            "userId" : {
              "type" : "integer",
              "description" : "The user id",
              "format" : "int32",
              "example" : 20
            },
            "contactId" : {
              "type" : "integer",
              "description" : "The unique id of the conversation contact",
              "format" : "int32",
              "example" : 1
            },
            "lastSyncTime" : {
              "type" : "string",
              "description" : "The last sync time UTC timezone",
              "example" : "2021-08-04T22:32:51.067"
            }
          },
          "description" : "UserConversationContact Data transfer object"
        },
        "ConversationDto" : {
          "required" : [ "conversationType" ],
          "type" : "object",
          "properties" : {
            "conversationId" : {
              "type" : "integer",
              "description" : "The id of the Conversation",
              "format" : "int32",
              "example" : 1
            },
            "subject" : {
              "type" : "string",
              "description" : "The conversation subject",
              "example" : "Hello"
            },
            "owner" : {
              "type" : "integer",
              "description" : "The owner of the Conversation",
              "format" : "int32",
              "example" : 1
            },
            "archived" : {
              "type" : "string",
              "description" : "The archived date in UTC",
              "example" : "2020-02-10T00:00:00.000"
            },
            "conversationType" : {
              "type" : "string",
              "description" : "The MessageType enum. Defines the message type for conversation.",
              "example" : "EREFERRAL",
              "enum" : [ "EREFERRAL", "ECONSULT", "INTERNAL", "CROSS_OFFICE", "MEDEO_MESSAGING", "ERX_MESSAGING", "PROVIDER_MESSAGING" ]
            },
            "externalIdentifier" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string"
            },
            "conversationSubType" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string"
            }
          },
          "description" : "Conversation Data transfer object"
        },
        "ConversationMessageDto" : {
          "type" : "object",
          "properties" : {
            "messageId" : {
              "type" : "integer",
              "description" : "The id of the Conversation Message",
              "format" : "int32",
              "example" : 1
            },
            "conversationId" : {
              "type" : "integer",
              "description" : "The conversation id",
              "format" : "int32",
              "example" : 1
            },
            "sender" : {
              "type" : "integer",
              "description" : "The conversation contact id for a sender",
              "format" : "int32",
              "example" : 1
            },
            "messageBody" : {
              "type" : "string",
              "description" : "The message body",
              "example" : "Hello"
            },
            "timestamp" : {
              "type" : "string",
              "description" : "The time stamp in UTC timezone",
              "example" : "2020-02-10T00:00:00.000"
            },
            "draft" : {
              "type" : "boolean",
              "description" : "Is conversation message drafted",
              "example" : false
            },
            "deleted" : {
              "type" : "boolean",
              "description" : "Deleted or active",
              "example" : true
            },
            "delegator" : {
              "type" : "integer",
              "description" : "The conversation contact id for a delegator",
              "format" : "int32",
              "example" : 1
            },
            "messageSubtype" : {
              "type" : "string",
              "description" : "The MessagingSubtype enum. Defines the messaging sub type for conversation message.",
              "example" : "ERX_RENEWAL",
              "enum" : [ "NONE", "ERX_RENEWAL" ]
            },
            "priority" : {
              "type" : "string",
              "description" : "The RequestPriority enum represents the priority for requests.",
              "example" : "2",
              "enum" : [ "ROUTINE", "URGENT", "ASAP", "STAT" ]
            }
          },
          "description" : "Conversatoin Message data transfer object"
        },
        "ConversationMessageAttachmentDto" : {
          "required" : [ "conversationMessageId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The id of the Conversation Message Attachment",
              "format" : "int32",
              "example" : 1
            },
            "conversationMessageId" : {
              "type" : "integer",
              "description" : "The id of the Conversation Message",
              "format" : "int32",
              "example" : 1
            },
            "fileName" : {
              "maxLength" : 256,
              "minLength" : 0,
              "type" : "string",
              "description" : "The file name",
              "example" : "Test file"
            },
            "mimeType" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The mime type",
              "example" : "text/plain"
            },
            "extension" : {
              "maxLength" : 25,
              "minLength" : 0,
              "type" : "string",
              "description" : "The file extension",
              "example" : "pdf"
            },
            "externalFileId" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The external file id",
              "example" : "1"
            },
            "uuid" : {
              "type" : "string",
              "description" : "The uuid",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "contentLengthBytes" : {
              "type" : "integer",
              "description" : "The content length of the healthmail Attachment in bytes. Read only field.",
              "format" : "int32",
              "example" : 4354358903845
            }
          },
          "description" : "Conversation message attachement data transfer object"
        },
        "ConversationAttachmentMultipartDefinition" : {
          "type" : "object",
          "properties" : {
            "file" : {
              "$ref" : "#/components/schemas/Attachment"
            }
          }
        },
        "ConversationParticipantDto" : {
          "type" : "object",
          "properties" : {
            "conversationId" : {
              "type" : "integer",
              "description" : "The unique id of the conversation.",
              "format" : "int32",
              "example" : 1
            },
            "conversationContactId" : {
              "type" : "integer",
              "description" : "The unique id of the conversation contact.",
              "format" : "int32",
              "example" : 1
            },
            "role" : {
              "type" : "integer",
              "description" : "The role id.",
              "format" : "int32",
              "example" : 1
            }
          }
        },
        "ConversationMessageStatusDto" : {
          "required" : [ "status" ],
          "type" : "object",
          "properties" : {
            "messageId" : {
              "type" : "integer",
              "description" : "Conversation message id",
              "format" : "int32",
              "example" : 1
            },
            "contactId" : {
              "type" : "integer",
              "description" : "Conversation contact id",
              "format" : "int32",
              "example" : 1
            },
            "status" : {
              "type" : "string",
              "description" : "Message status",
              "example" : "PROCESSED",
              "enum" : [ "READ", "UNREAD", "ERROR", "PROCESSED", "UNKNOWN" ]
            },
            "updated" : {
              "type" : "string",
              "description" : "Updated time(Read-Only) in UTC timezone",
              "example" : "2020-02-10T00:00:00.000"
            }
          },
          "description" : "Conversation message status data transfer object"
        },
        "ExternalPatientDto" : {
          "required" : [ "birthDate", "externalPatientIdentifier", "externalSystemIdentifier", "firstName", "gender", "lastName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The identity of the external patient",
              "format" : "int32",
              "example" : 1
            },
            "externalPatientIdentifier" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "External patient identifier",
              "example" : "STRING"
            },
            "externalSystemIdentifier" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "External System identifier",
              "example" : "PRESCRIBEIT"
            },
            "accuroPatientId" : {
              "type" : "integer",
              "description" : "Accuro patient id",
              "format" : "int32",
              "example" : 3421
            },
            "lastName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patient last/family name",
              "example" : "FAMILYNAME"
            },
            "firstName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patient first/given name",
              "example" : "GIVENNAME"
            },
            "birthDate" : {
              "type" : "string",
              "description" : "The patient birthdate",
              "format" : "date",
              "example" : "2020-06-09"
            },
            "gender" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patient gender",
              "example" : "Female"
            }
          },
          "description" : "External Patient Data transfer object"
        },
        "ConversationUnmatchedPatientDto" : {
          "required" : [ "conversationId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of the unmatched patient",
              "format" : "int32",
              "example" : 1
            },
            "conversationId" : {
              "type" : "integer",
              "description" : "Conversation ID",
              "format" : "int32",
              "example" : 19
            },
            "firstName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "First name of the patient.",
              "example" : "John"
            },
            "lastName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Last name of the patient.",
              "example" : "Shaw"
            },
            "dateOfBirth" : {
              "type" : "string",
              "description" : "The patient's date of birth. Format should be: YYYY-MM-DD.",
              "example" : "1959-02-16"
            },
            "sex" : {
              "maxLength" : 10,
              "minLength" : 0,
              "type" : "string",
              "description" : "The patient sex.",
              "example" : "Male"
            },
            "phn" : {
              "maxLength" : 30,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient health number.",
              "example" : "1001010"
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient ID",
              "format" : "int32",
              "example" : 19
            },
            "externalIdentifier" : {
              "maxLength" : 64,
              "minLength" : 0,
              "type" : "string",
              "description" : "External identifier.",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "patientHeightValue" : {
              "type" : "integer",
              "description" : "Patient height value",
              "format" : "int32",
              "example" : 10
            },
            "patientHeightUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Unit in which height is measured.",
              "example" : "inches"
            },
            "patientHeightSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient height system.",
              "example" : "Metric"
            },
            "patientWeightValue" : {
              "type" : "integer",
              "description" : "Patient weight system.",
              "format" : "int32",
              "example" : 10
            },
            "patientWeightUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient weight unit.",
              "example" : "Kilogram"
            },
            "patientWeightSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient weight system.",
              "example" : "Metric"
            },
            "patientAddress" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient address.",
              "example" : "1212 Lakeshore dr, Kelowna, BC, Canada"
            },
            "patientPhone" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient phone.",
              "example" : "121-288-8212"
            },
            "allergyList" : {
              "maxLength" : 2000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Patient's allergy list.",
              "example" : "List of allergies"
            }
          }
        },
        "DispenseNotificationAnnotationDto" : {
          "required" : [ "text" ],
          "type" : "object",
          "properties" : {
            "dispenseNotificationId" : {
              "type" : "integer",
              "description" : "The identity",
              "format" : "int32",
              "example" : 10
            },
            "time" : {
              "type" : "string",
              "description" : "The dispense time in the timezone set in Accuro",
              "example" : "2021-02-21T00:00:00.000"
            },
            "author" : {
              "type" : "string",
              "description" : "Author as identifier",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "text" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Text",
              "example" : "String"
            }
          },
          "description" : "Notes",
          "example" : 10
        },
        "DispenseNotificationDto" : {
          "required" : [ "medicationName", "uuid" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The identity",
              "format" : "int32",
              "example" : 10
            },
            "uuid" : {
              "type" : "string",
              "description" : "Unique identifier",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "conversationMessageId" : {
              "type" : "integer",
              "description" : "Conversation Message Id",
              "format" : "int32",
              "example" : 10
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Created date time (UTC). The field is read-only.",
              "example" : "2021-02-21T00:00:00.000"
            },
            "cancellationReason" : {
              "type" : "string",
              "description" : "Cancellation reason",
              "example" : "String"
            },
            "patient" : {
              "type" : "string",
              "description" : "Patient UUID",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "renderedDosageInstruction" : {
              "type" : "string",
              "description" : "Rendered dosage instruction",
              "example" : "String"
            },
            "quantityRemainingValue" : {
              "type" : "number",
              "description" : "Quantity remaining value",
              "example" : 10.1
            },
            "quantityRemainingUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Quantity remaining unit",
              "example" : "String"
            },
            "quantityRemainingSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Quantity remaining system",
              "example" : "String"
            },
            "pharmacyName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Pharmacy name",
              "example" : "String"
            },
            "pharmacyFax" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy fax",
              "example" : "String"
            },
            "pharmacyPhone" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy phone",
              "example" : "String"
            },
            "pharmacyAddressLine" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy address line",
              "example" : "String"
            },
            "pharmacyAddressCity" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy address city",
              "example" : "String"
            },
            "pharmacyAddressState" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy address state",
              "example" : "String"
            },
            "pharmacyAddressPostalCode" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy address postal code",
              "example" : "String"
            },
            "daysSupply" : {
              "type" : "integer",
              "description" : "Days supply",
              "format" : "int32",
              "example" : 10
            },
            "status" : {
              "type" : "string",
              "description" : "Dispense notification status",
              "enum" : [ "PREPARATION", "IN_PROGRESS", "COMPLETED", "STOPPED" ]
            },
            "category" : {
              "maxLength" : 10,
              "minLength" : 0,
              "type" : "string",
              "description" : "Category",
              "example" : "String"
            },
            "authorizingRequestUuid" : {
              "type" : "string",
              "description" : "Authorizing request uuid",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "prescribeItAuthorizingRequestUuid" : {
              "maxLength" : 64,
              "minLength" : 0,
              "type" : "string",
              "description" : "PrescribeIT authorizing request uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "dispenseType" : {
              "maxLength" : 6,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dispense type",
              "example" : "String"
            },
            "substitutionReason" : {
              "type" : "string",
              "description" : "Substitution reason",
              "example" : "String"
            },
            "notDoneReason" : {
              "type" : "string",
              "description" : "Not done reason",
              "example" : "String"
            },
            "din" : {
              "maxLength" : 18,
              "minLength" : 0,
              "type" : "string",
              "description" : "Din",
              "example" : "String"
            },
            "medicationCodeSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication code system",
              "example" : "String"
            },
            "medicationName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication Name",
              "example" : "String"
            },
            "medicationDetails" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication Details",
              "example" : "String"
            },
            "dispenseAmount" : {
              "type" : "integer",
              "description" : "Dispense Amount",
              "format" : "int32",
              "example" : 10
            },
            "dispenseUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dispense Unit",
              "example" : "String"
            },
            "dispenseTime" : {
              "type" : "string",
              "description" : "Dispense time in the timezone set in Accuro",
              "example" : "2021-02-21T00:00:00.000"
            },
            "notes" : {
              "type" : "array",
              "description" : "Notes",
              "example" : 10,
              "items" : {
                "$ref" : "#/components/schemas/DispenseNotificationAnnotationDto"
              }
            },
            "cancelled" : {
              "type" : "boolean",
              "description" : "Is cancelled",
              "example" : false
            },
            "identifierSystem" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Identifier System"
            },
            "identifierValue" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Identifier Value"
            }
          }
        },
        "EnvelopeDtoDispenseNotificationDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/DispenseNotificationDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "EprescribeCancelResponseDto" : {
          "required" : [ "bundleId", "externalId", "patientId", "pharmacyId", "taskId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The local id of the erx cancel request",
              "format" : "int32",
              "example" : 1
            },
            "externalId" : {
              "type" : "string",
              "description" : "The external id",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "eprescribeCancelRequestId" : {
              "type" : "integer",
              "description" : "Eprescribe Cancel Request Id ",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id",
              "format" : "int32",
              "example" : 1
            },
            "responseStatus" : {
              "maxLength" : 25,
              "minLength" : 0,
              "type" : "string"
            },
            "deliveryMethod" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The delivery method for cancel request"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "Created date time in UTC timezone",
              "example" : "2021-02-21T00:00:00.000"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "The date time in UTC timezone when record was last updated ",
              "example" : "2021-05-21T00:00:00.000"
            },
            "responseEvent" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The response event id",
              "example" : "String"
            },
            "bundleId" : {
              "type" : "string",
              "description" : "The bundle id",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "taskId" : {
              "type" : "string",
              "description" : "The task id",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "pharmacyId" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy id",
              "example" : "String"
            },
            "prescriptionMedicationId" : {
              "type" : "integer",
              "description" : "Prescription medication id",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "Eprescribe Cancel Response Data transfer object"
        },
        "EprescribeJobDto" : {
          "required" : [ "jobStatus", "jobType", "jobUuid", "processed", "queuedAt" ],
          "type" : "object",
          "properties" : {
            "ePrescribeJobId" : {
              "type" : "integer",
              "description" : "The e-prescribe job id",
              "format" : "int32",
              "example" : 1
            },
            "jobUuid" : {
              "maxLength" : 36,
              "minLength" : 0,
              "type" : "string",
              "description" : "The e-prescribe job uuid",
              "example" : "F96CBE3C-5113-440C-BBE1-E77ADCA01B8B"
            },
            "queuedAt" : {
              "type" : "string",
              "description" : "The date time in the timezone set in Accuro indicating when the job was put to the queue",
              "example" : "2012-02-15T07:44:59.000"
            },
            "correlationId" : {
              "maxLength" : 36,
              "minLength" : 0,
              "type" : "string",
              "description" : "The correlation id"
            },
            "jobType" : {
              "$ref" : "#/components/schemas/EprescribeJobTypeDto"
            },
            "processedDate" : {
              "type" : "string",
              "description" : "The processed date time in the timezone set in Accuro",
              "example" : "2012-02-15T07:44:59.000"
            },
            "processed" : {
              "type" : "boolean",
              "description" : "The flag if the job processed",
              "example" : true
            },
            "messageHeaderId" : {
              "maxLength" : 36,
              "minLength" : 0,
              "type" : "string",
              "description" : "The message header id"
            },
            "conversationId" : {
              "type" : "integer",
              "description" : "The conversation id",
              "format" : "int32"
            },
            "conversationMessageId" : {
              "type" : "integer",
              "description" : "The conversation message id",
              "format" : "int32"
            },
            "jobStatus" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The job status"
            },
            "appErrorCode" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Error codes"
            },
            "completionTimestampUtc" : {
              "type" : "string",
              "description" : "Completion date time in UTC timezone",
              "example" : "2012-02-15T07:44:59.000"
            },
            "completionMessage" : {
              "type" : "string",
              "description" : "Completion message"
            },
            "completionDetails" : {
              "type" : "string",
              "description" : "Completion details"
            }
          },
          "description" : "EprescribeJob Data transfer object"
        },
        "EprescribeJobTypeDto" : {
          "required" : [ "jobSubtype", "jobTypeSystem" ],
          "type" : "object",
          "properties" : {
            "ePrescribeJobTypeId" : {
              "type" : "integer",
              "description" : "The eprescribe job type id",
              "format" : "int32",
              "example" : 1
            },
            "jobTypeSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The eprescribe job type system",
              "example" : "system"
            },
            "description" : {
              "type" : "string",
              "description" : "The description",
              "example" : "details"
            },
            "jobSubtype" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The sub job type",
              "example" : "subtype1"
            }
          }
        },
        "EprescribeJobHistoryDto" : {
          "required" : [ "status", "timestamp" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Eprescribe Job History ID",
              "format" : "int32",
              "example" : 1
            },
            "eprescribeJobId" : {
              "type" : "integer",
              "description" : "Eprescribe Job ID",
              "format" : "int32",
              "example" : 1
            },
            "status" : {
              "type" : "string",
              "description" : "Eprescribe Job History status"
            },
            "timestamp" : {
              "type" : "string",
              "description" : "Eprescribe Job History date time in the timezone set in Accuro",
              "example" : "2024-02-15T07:44:59.000"
            },
            "httpStatusCode" : {
              "type" : "integer",
              "description" : "Eprescribe Job History HTTP status code",
              "format" : "int32"
            },
            "appErrorCode" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Eprescribe Job History app error code"
            },
            "description" : {
              "type" : "string",
              "description" : "Eprescribe Job History description"
            },
            "details" : {
              "type" : "string",
              "description" : "Eprescribe Job History details"
            }
          },
          "description" : "Eprescribe job history data transfer object model"
        },
        "EprescribeJobPrescriptionMedicationDto" : {
          "type" : "object",
          "properties" : {
            "prescriptionMedicationId" : {
              "type" : "integer",
              "description" : "The e-prescribe job medication id",
              "format" : "int32",
              "example" : 1
            },
            "ePrescribeJobId" : {
              "type" : "integer",
              "description" : "The e-prescribe job id",
              "format" : "int32",
              "example" : 1
            }
          },
          "description" : "EprescribeJobPrescriptionMedication Data transfer object"
        },
        "EprescribeJobOutcomeDto" : {
          "required" : [ "outcomeCodeId", "timestamp" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Eprescribe Job Outcome Id",
              "format" : "int32",
              "example" : 12
            },
            "outcomeCodeId" : {
              "type" : "integer",
              "description" : "Eprescribe Job Outcome Code Id. Valid outcome code ID required.",
              "format" : "int32",
              "example" : 12
            },
            "previousMessageHeaderId" : {
              "maxLength" : 36,
              "minLength" : 0,
              "type" : "string",
              "description" : "Previous Message Header Id",
              "example" : "12"
            },
            "responseCode" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Response Code",
              "example" : "12"
            },
            "errorSeverity" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Error Severity",
              "example" : "FATAL"
            },
            "code" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Code",
              "example" : "123"
            },
            "title" : {
              "type" : "string",
              "description" : "Title",
              "example" : "Outcome Title"
            },
            "detail" : {
              "type" : "string",
              "description" : "Details",
              "example" : "This is test outcome"
            },
            "timestamp" : {
              "type" : "string",
              "description" : "The updated local datetime in the timezone set in Accuro",
              "example" : "2012-02-15T07:44:59.000"
            },
            "createdAt" : {
              "type" : "string",
              "description" : "The created datetime(read-only) in UTC timezone",
              "example" : "2012-02-15T07:44:59.000"
            }
          }
        },
        "EprescribeJobTaskDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Eprescribe Job Task Id",
              "format" : "int32",
              "example" : 12
            },
            "erxJobId" : {
              "type" : "integer",
              "description" : "Eprescribe job Id",
              "format" : "int32",
              "example" : 12
            },
            "taskId" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task Id",
              "example" : "12"
            },
            "taskType" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task Type"
            },
            "taskUuid" : {
              "type" : "string",
              "description" : "Task UUID",
              "format" : "uuid"
            }
          },
          "description" : "Eprescribe Job Task object."
        },
        "EprescribeOrderStatusDto" : {
          "required" : [ "prescriptionId", "status", "system" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The e-prescribe order status id",
              "format" : "int32",
              "example" : 1
            },
            "prescriptionId" : {
              "type" : "integer",
              "description" : "The e-prescribe order status id",
              "format" : "int32",
              "example" : 1
            },
            "system" : {
              "type" : "string",
              "description" : "The e-prescribe order status id",
              "example" : "PRESCRIBE_IT",
              "enum" : [ "PRESCRIBE_IT" ]
            },
            "status" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The e-prescribe order status.",
              "example" : "Discontinued: Pharmacy denied request"
            },
            "createdDate" : {
              "type" : "string",
              "description" : "The e-prescribe order status date of creation in UTC. Read only field.",
              "example" : "2021-07-01T07:45:59.000"
            }
          },
          "description" : "Eprescribe Order Status Data transfer object"
        },
        "EprescribeOutcomeCodeDto" : {
          "required" : [ "identifier", "outcomeTypeId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The Eprescribe Outcome Code id",
              "format" : "int32",
              "example" : 1
            },
            "identifier" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The identifier of Eprescribe Outcome Code",
              "example" : "PIT_RECIPIENT_ERROR"
            },
            "displayName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The display name",
              "example" : "Recipient Asynchronous Reject"
            },
            "code" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The code",
              "example" : "990"
            },
            "outcomeTypeId" : {
              "type" : "integer",
              "description" : "The Outcome Type id",
              "format" : "int32",
              "example" : 2
            },
            "createdAt" : {
              "type" : "string",
              "description" : "The created datetime(read-only) in UTC timezone",
              "example" : "2021-07-01T07:45:59.000"
            }
          },
          "description" : "Eprescribe Outcome Code object."
        },
        "ErxCancelRequestsDto" : {
          "required" : [ "externalId", "patientId", "providerId", "requestReasonCode", "userId" ],
          "type" : "object",
          "properties" : {
            "localId" : {
              "type" : "integer",
              "description" : "The local id of the erx cancel request",
              "format" : "int32",
              "example" : 1
            },
            "externalId" : {
              "type" : "string",
              "description" : "The external id of the erx cancel request",
              "format" : "uuid",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            },
            "prescriptionMedicationId" : {
              "type" : "integer",
              "description" : "Prescription medication id",
              "format" : "int32",
              "example" : 1
            },
            "contactId" : {
              "type" : "integer",
              "description" : "Contact id",
              "format" : "int32",
              "example" : 1
            },
            "eprescribeTaskId" : {
              "type" : "integer",
              "description" : "Eprescribe task id",
              "format" : "int32",
              "example" : 1
            },
            "created" : {
              "type" : "string",
              "description" : "Created date time in UTC timezone. Read only field.",
              "example" : "2021-02-21T00:00:00.000"
            },
            "lastUpdated" : {
              "type" : "string",
              "description" : "The date time in UTC timezone indicating when record was last updated. Read only field.",
              "example" : "2021-05-21T00:00:00.000"
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider Id",
              "format" : "int32",
              "example" : 1
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id",
              "format" : "int32",
              "example" : 1
            },
            "deliveryMethod" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The delivery method for cancel request"
            },
            "userId" : {
              "type" : "integer",
              "description" : "User Id",
              "format" : "int32",
              "example" : 1
            },
            "requestEvent" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Request event for cancel request"
            },
            "requestReasonCode" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Request reason code for cancel request"
            },
            "requestReasonText" : {
              "maxLength" : 2000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Request reason for cancel request"
            },
            "dateRead" : {
              "type" : "string",
              "description" : "Date time in the timezone set in Accuro indicating when the cancel request was read.",
              "example" : "2021-05-210T00:00:00.000"
            }
          },
          "description" : "Erx cancel request Data transfer object"
        },
        "DispenseRequestDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The identity",
              "format" : "int32",
              "example" : 10
            },
            "dispenseIntervalMin" : {
              "type" : "integer",
              "description" : "Dispense interval min",
              "format" : "int32",
              "example" : 10
            },
            "dispenseIntervalMax" : {
              "type" : "integer",
              "description" : "Dispense interval max",
              "format" : "int32",
              "example" : 10
            },
            "dispenseIntervalUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dispense interval unit",
              "example" : "Unit"
            },
            "dispenseIntervalSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dispense interval system",
              "example" : "System"
            },
            "trialEligibility" : {
              "type" : "boolean",
              "description" : "Is trial eligibility",
              "example" : true
            },
            "firstFillDate" : {
              "type" : "string",
              "description" : "The first fill date in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "firstFillQuantity" : {
              "type" : "integer",
              "description" : "First fill quantity ",
              "format" : "int32",
              "example" : 10
            },
            "firstFillQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "First fill quantity unit",
              "example" : "unit"
            },
            "firstFillQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "First fill quantity system",
              "example" : "System"
            },
            "firstFillSupplyDuration" : {
              "type" : "integer",
              "description" : "First fill supply duration",
              "format" : "int32",
              "example" : 10
            },
            "firstFillSupplyDurationUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "First fill supply duration unit",
              "example" : "unit"
            },
            "firstFillSupplyDurationSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "First fill supply duration system",
              "example" : "System"
            },
            "maxDispenseQuantity" : {
              "type" : "integer",
              "description" : "Max dispense quantity",
              "format" : "int32",
              "example" : 10
            },
            "maxDispenseQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Max dispense quantity unit",
              "example" : "Unit"
            },
            "maxDispenseQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Max dispense quantity system",
              "example" : "System"
            },
            "totalPrescribedQuantity" : {
              "type" : "integer",
              "description" : "Total prescribed quantity",
              "format" : "int32",
              "example" : 10
            },
            "totalPrescribedQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Total prescribed quantity unit",
              "example" : "Unit"
            },
            "totalPrescribedQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Total prescribed quantity system",
              "example" : "System"
            },
            "validityStart" : {
              "type" : "string",
              "description" : "Validity start date in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "validityEnd" : {
              "type" : "string",
              "description" : "Validity end date in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "totalDaysSupply" : {
              "type" : "integer",
              "description" : "Total days supply",
              "format" : "int32",
              "example" : 10
            },
            "totalQuantityValue" : {
              "type" : "integer",
              "description" : "Total quantity value",
              "format" : "int32",
              "example" : 10
            },
            "totalQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Total quantity unit",
              "example" : "10"
            },
            "totalQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Total quantity system",
              "example" : "10"
            },
            "numberOfRepeatsAllows" : {
              "type" : "integer",
              "description" : "Number repeats allowed",
              "format" : "int32",
              "example" : 10
            },
            "supplyDurationValue" : {
              "type" : "integer",
              "description" : "Supply duration value",
              "format" : "int32",
              "example" : 10
            },
            "supplyDurationUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Supply duration unit",
              "example" : "Unit"
            },
            "supplyDurationSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Supply duration system",
              "example" : "System"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date time in UTC timezone",
              "example" : "2020-02-10T00:00:00.000"
            }
          },
          "description" : "Dispense request object"
        },
        "RenewalRequestDosageDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The identity",
              "format" : "int32",
              "example" : 10
            },
            "renewalRequestId" : {
              "type" : "integer",
              "description" : "Renewal request id",
              "format" : "int32",
              "example" : 10
            },
            "sequence" : {
              "type" : "integer",
              "description" : "Sequence",
              "format" : "int32",
              "example" : 10
            },
            "instructionRelationship" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Instruction relationship",
              "example" : "Direct"
            },
            "instructions" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Instructions on the dosage",
              "example" : "Daily 2 times"
            },
            "additionalInstructions" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Additional instructions",
              "example" : "Follow up"
            },
            "timing" : {
              "type" : "string",
              "description" : "Timing in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "timingRepeatBoundsQuantityValue" : {
              "type" : "integer",
              "description" : "Timing repeat bounds quantity value",
              "format" : "int32",
              "example" : 1
            },
            "timingRepeatBoundsQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat bounds quantity unit",
              "example" : "Unit name"
            },
            "timingRepeatBoundsQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat bounds quantity system",
              "example" : "System name"
            },
            "timingRepeatBoundsRangeHigh" : {
              "type" : "integer",
              "description" : "Timing repeat bounds range high ",
              "format" : "int32",
              "example" : 100
            },
            "timingRepeatBoundsRangeLow" : {
              "type" : "integer",
              "description" : "Timing repeat bounds range low ",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatBoundsRangeUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat bounds range unit",
              "example" : "Unit Name"
            },
            "timingRepeatBoundsRangeSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat bounds range system",
              "example" : "System name"
            },
            "timingRepeatBoundsPeriodStart" : {
              "type" : "string",
              "description" : "Timing repeat bounds period start in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "timingRepeatBoundsPeriodEnd" : {
              "type" : "string",
              "description" : "Timing repeat bounds period end in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "timingRepeatDoseCount" : {
              "type" : "integer",
              "description" : "Timing repeat dose count",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatDoseCountMax" : {
              "type" : "integer",
              "description" : "Timing repeat dose count max",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatDuration" : {
              "type" : "integer",
              "description" : "Timing repeat duration",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatDurationMax" : {
              "type" : "integer",
              "description" : "Timing repeat duration max",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatDurationUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat duration unit",
              "example" : "String"
            },
            "timingRepeatFrequency" : {
              "type" : "integer",
              "description" : "Timing repeat frequency",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatFrequencyMax" : {
              "type" : "integer",
              "description" : "Timing repeat frequency max",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatPeriod" : {
              "type" : "integer",
              "description" : "Timing repeat period",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatPeriodMax" : {
              "type" : "integer",
              "description" : "Timing repeat period max",
              "format" : "int32",
              "example" : 10
            },
            "timingRepeatPeriodUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Timing repeat period unit",
              "example" : "String"
            },
            "asNeeded" : {
              "type" : "boolean",
              "description" : "Is needed",
              "example" : true
            },
            "route" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Route",
              "example" : "String"
            },
            "doseQuantityValue" : {
              "type" : "integer",
              "description" : "Dose quantity value",
              "format" : "int32",
              "example" : 10
            },
            "doseQuantityUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dose quantity unit",
              "example" : "Unit"
            },
            "doseQuantitySystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dose range quantity system",
              "example" : "System"
            },
            "doseRangeLowValue" : {
              "type" : "integer",
              "description" : "Dose range low value",
              "format" : "int32",
              "example" : 10
            },
            "doseRangeHighValue" : {
              "type" : "integer",
              "description" : "Dose range high value",
              "format" : "int32",
              "example" : 10
            },
            "doseRangeUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dose range unit",
              "example" : "10"
            },
            "doseRangeSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Dose range system",
              "example" : "String"
            },
            "rateNumeratorValue" : {
              "type" : "integer",
              "description" : "Rate numerator value",
              "format" : "int32",
              "example" : 10
            },
            "rateDenominatorValue" : {
              "type" : "integer",
              "description" : "Rate denominator value",
              "format" : "int32",
              "example" : 10
            },
            "rateUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Rate Unit",
              "example" : "String"
            },
            "rateSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Rate system",
              "example" : "String"
            },
            "maxDosePerPeriodNumeratorValue" : {
              "type" : "integer",
              "description" : "Max dose per period Numerator value",
              "format" : "int32",
              "example" : 10
            },
            "maxDosePerPeriodDenominatorValue" : {
              "type" : "integer",
              "description" : "Max dose per period denomination value",
              "format" : "int32",
              "example" : 10
            },
            "maxDosePerPeriodUnit" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Max dose per period unit",
              "example" : "Unit"
            },
            "maxDosePerPeriodSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Max dose per period system",
              "example" : "System"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date time in UTC timezone",
              "example" : "2020-02-10T00:00:00.000"
            }
          },
          "description" : "Collection of renewal request dosage objects"
        },
        "RenewalRequestDto" : {
          "required" : [ "dispenseRequest" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique identity",
              "format" : "int32",
              "example" : 10
            },
            "externalTaskId" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The external task identity",
              "example" : "String"
            },
            "externalTaskGroupId" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The task group identity",
              "example" : "10"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date time(read-only) in UTC timezone",
              "example" : "2020-02-10T00:00:00.000"
            },
            "system" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "System description",
              "example" : "String"
            },
            "systemVersion" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "System version",
              "example" : "String"
            },
            "priority" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Priority",
              "example" : "String"
            },
            "medicationRequestId" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication request id",
              "example" : "String"
            },
            "medicationCodeValue" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication code value",
              "example" : "String"
            },
            "medicationCodeSystem" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication code system",
              "example" : "String"
            },
            "medicationCodeDescription" : {
              "maxLength" : 2500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication code description",
              "example" : "String"
            },
            "medicationIsRepresentative" : {
              "type" : "boolean",
              "description" : "Medication representative flag",
              "example" : true
            },
            "medicationCategory" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication category",
              "example" : "String"
            },
            "medicationRenderedDosage" : {
              "type" : "string",
              "description" : "Medication rendered dosage",
              "example" : "String"
            },
            "medicationProtocol" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication protocol",
              "example" : "String"
            },
            "medicationTreatmentType" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication treatment type",
              "example" : "String"
            },
            "medicationPharmacyInstructions" : {
              "type" : "string",
              "description" : "Medication pharmacy instructions",
              "example" : "Instruction"
            },
            "medicationIsCompoundMonitored" : {
              "type" : "boolean",
              "description" : "The flag if medication is compound monitored",
              "example" : false
            },
            "medicationAllowRenewals" : {
              "type" : "boolean",
              "description" : "Whether medication allow renewals",
              "example" : true
            },
            "medicationEmrId" : {
              "maxLength" : 64,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication emr id",
              "example" : "String"
            },
            "medicationDisId" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication dis id",
              "example" : "String"
            },
            "medicationDateWritten" : {
              "type" : "string",
              "description" : "Medication written date in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "medicationNote" : {
              "maxLength" : 2500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Medication note",
              "example" : "String"
            },
            "priorPrescriptionId" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Prior prescription Id",
              "example" : "String"
            },
            "renewalRequestGroupId" : {
              "type" : "integer",
              "description" : "Renewal request group id",
              "format" : "int32",
              "example" : 10
            },
            "dispenseRequest" : {
              "$ref" : "#/components/schemas/DispenseRequestDto"
            },
            "lastDispenseDate" : {
              "type" : "string",
              "description" : "last dispense date in the timezone set in Accuro",
              "example" : "2020-02-10T00:00:00.000"
            },
            "renewalRequestDosages" : {
              "type" : "array",
              "description" : "Collection of renewal request dosage objects",
              "items" : {
                "$ref" : "#/components/schemas/RenewalRequestDosageDto"
              }
            },
            "taskInstructions" : {
              "maxLength" : 2000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Task instructions"
            },
            "communication" : {
              "type" : "string",
              "description" : "Communication"
            }
          }
        },
        "RenewalRequestGroupDto" : {
          "required" : [ "conversationMessageId", "pharmacyPatientId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "additionalInstructions" : {
              "type" : "string"
            },
            "originalPrescriberName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The original prescriber name",
              "example" : "The prescriber name"
            },
            "pharmacyPatientId" : {
              "type" : "integer",
              "description" : "The pharmacy patient Id",
              "format" : "int32",
              "example" : 112
            },
            "matchedPatientId" : {
              "type" : "integer",
              "description" : "The matched PatientId",
              "format" : "int32",
              "example" : 10
            },
            "accuroPhysicianId" : {
              "type" : "integer",
              "description" : "The accuro Physician Id",
              "format" : "int32",
              "example" : 10
            },
            "matchedPharmacyContactId" : {
              "type" : "integer",
              "description" : "The matched Pharmacy Contact Id",
              "format" : "int32",
              "example" : 10
            },
            "pharmacyName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy Name",
              "example" : "Shoppers Drug Mart"
            },
            "pharmacyAddressLine" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy Address Line",
              "example" : "233 Doug Rd"
            },
            "pharmacyAddressLine2" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The pharmacy Address Line 2",
              "example" : "233 Doug Rd"
            },
            "pharmacyCity" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "pharmacy City ",
              "example" : "Vernon"
            },
            "pharmacyState" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "pharmacy State ",
              "example" : "BC"
            },
            "pharmacyPostalCode" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "pharmacy Postal Code ",
              "example" : "V1P 5X4"
            },
            "pharmacyPhoneNumber" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "pharmacy Phone Number ",
              "example" : "123-223-4569"
            },
            "pharmacyFaxNumber" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "pharmacyPostalCode ",
              "example" : "232-565-445"
            },
            "conversationMessageId" : {
              "type" : "integer",
              "description" : "The conversation message Id",
              "format" : "int32",
              "example" : 112
            },
            "originalPrescriberClinicAddress" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "original Prescriber Clinic Address",
              "example" : "112"
            },
            "originalPrescriberPhone" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "original Prescriber Phone",
              "example" : "232-565-445"
            },
            "originalPrescriberFax" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "original Prescriber Fax",
              "example" : "232-565-445"
            },
            "originalPrescriberLicenseNumber" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "original Prescriber LicenseNumber",
              "example" : "1212111"
            },
            "originalPrescriberSpecialty" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "original Prescriber Specialty",
              "example" : "GP"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "The created datetime in UTC. ",
              "example" : "2021-07-01T07:45:59.000"
            },
            "processedDateUtc" : {
              "type" : "string",
              "description" : "The processed datetime in UTC. ",
              "example" : "2021-07-01T07:45:59.000"
            },
            "messageHeaderUuid" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Message header UUID",
              "example" : "123e4567-e89b-12d3-a456-426614174000"
            }
          },
          "description" : "The renewal request group transfer model object."
        },
        "RenewalRequestResponseDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique id of renewal request response",
              "format" : "int32",
              "example" : 221
            },
            "renewalRequestId" : {
              "type" : "integer",
              "description" : "Unique id of renewal request",
              "format" : "int32",
              "example" : 221
            },
            "prescriptionMedicationId" : {
              "type" : "integer",
              "description" : "Prescription medication id",
              "format" : "int32",
              "example" : 221
            },
            "responseType" : {
              "type" : "string",
              "description" : "Response Type",
              "example" : "UNDER_REVIEW, ACCEPTED_WITH_CHANGES, ACCEPTED, DENIED",
              "enum" : [ "UNDER_REVIEW", "ACCEPTED_WITH_CHANGES", "ACCEPTED", "DENIED" ]
            },
            "createdById" : {
              "type" : "integer",
              "description" : "Created by user id",
              "format" : "int32",
              "example" : 221
            },
            "denyReason" : {
              "type" : "string",
              "description" : "Reason for denial of renewal request",
              "example" : "Denial reason"
            },
            "additionalComments" : {
              "type" : "string",
              "description" : "Additional comments on renewal request",
              "example" : "Some additional comments on renewal requests"
            },
            "createdDateUtc" : {
              "type" : "string",
              "description" : "Created date time in UTC",
              "example" : "2021-03-18T22:49:00.782"
            }
          },
          "description" : "Renewal Request Response model object"
        },
        "ReferralOrderDto" : {
          "required" : [ "orderStatus", "patientId", "type" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Referral Order id",
              "format" : "int32",
              "example" : 12
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Patient id",
              "format" : "int32",
              "example" : 120
            },
            "physicianId" : {
              "type" : "integer",
              "description" : "Physician id. It would override from generate letter table if faxLog is provided.",
              "format" : "int32",
              "example" : 120
            },
            "order" : {
              "maxLength" : 500,
              "minLength" : 0,
              "type" : "string",
              "description" : "Order. Name corresponding to contact Id. Field is updatable but it would be overridden by generate letters if faxLogId is provided . For referral from generate letter, this field would be auto-populated based on contact ID.",
              "example" : "Dr. James M"
            },
            "primaryRecipient" : {
              "maxLength" : 150,
              "minLength" : 0,
              "type" : "string",
              "description" : "Primary Recipient. Read-only. This holds the same value as Contact Id field.This field would be auto-populated by the referral order from generate letters.",
              "example" : "David"
            },
            "ccRecipients" : {
              "maxLength" : 220,
              "minLength" : 0,
              "type" : "string",
              "description" : "cc recipients. Comma separated list of ccRecipients. Field is read only and auto populated by API. Default set as blank by API.",
              "example" : "Dr James Hsu"
            },
            "chartItemId" : {
              "type" : "integer",
              "description" : "Chart Item Id. Read only field. This value is based on ChartItemType. ",
              "format" : "int32",
              "example" : 325
            },
            "chartItemType" : {
              "type" : "integer",
              "description" : "Chart Item Type. Read only field. This can be null or one of these two values: 3 - for requisitions(Repliforms), 6 - for letters. ",
              "format" : "int32",
              "example" : 6
            },
            "date" : {
              "type" : "string",
              "description" : "The referral date. Set by the API if left blank.",
              "example" : "2018-07-13T00:00:00.000"
            },
            "orderStatus" : {
              "maxLength" : 120,
              "minLength" : 0,
              "type" : "string",
              "description" : "Order status. Refer to this endpoint for this field's data:GET /v1/provider-portal/selection-lists/referral-statuses",
              "example" : "ORDERED"
            },
            "type" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Referral order type. This field is always set as referral for the referralorder from generate letter. Refer to this endpoint for this field's data:GET /v1/provider-portal/selection-lists/referral-types",
              "example" : "Referral"
            },
            "description" : {
              "maxLength" : 220,
              "minLength" : 0,
              "type" : "string",
              "description" : "Description. This field would be overridden from fax log table when orderis converted to referral from generate letter. ",
              "example" : "This is description"
            },
            "specific" : {
              "maxLength" : 120,
              "minLength" : 0,
              "type" : "string",
              "description" : "Specific",
              "example" : "This is specification"
            },
            "location" : {
              "maxLength" : 120,
              "minLength" : 0,
              "type" : "string",
              "description" : "Location",
              "example" : "Local"
            },
            "lastModified" : {
              "type" : "string",
              "description" : "The last Modified date. Read Only.",
              "example" : "2018-07-13T00:00:00.000"
            },
            "repliformLastModified" : {
              "type" : "string",
              "description" : "The repliform LastModified. Read only. Relevant to requisitions",
              "example" : "2018-07-13T00:00:00.000"
            },
            "modifiedByUser" : {
              "type" : "integer",
              "description" : "Modified By User. Read Only, auto-populated by API.",
              "format" : "int32",
              "example" : 235
            },
            "reconciled" : {
              "type" : "boolean",
              "description" : "Reconciled",
              "example" : false
            },
            "bookedDate" : {
              "type" : "string",
              "description" : "The booked date",
              "example" : "2018-07-13T00:00:00.000"
            },
            "contactType" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The contact type. Field is updatable but it would be overridden by generate letters if faxLogId is provided. Valid value allowed so far: PHYSICIAN or CONTACT.",
              "example" : "PHYSICIAN"
            },
            "contactId" : {
              "type" : "integer",
              "description" : "Contact Id. This field holds the ID of contactType field i.e the ID of either PHYSICIAN or CONTACT. Field is updatable but,  It would override from generate letters if faxLogId is provided. ",
              "format" : "int32",
              "example" : 25863
            },
            "erefOutboundId" : {
              "type" : "integer",
              "description" : "erefOutboundId. Read only field. Field would be ignored and not set if passed in POST request.",
              "format" : "int32",
              "example" : 100
            },
            "appointmentDateTime" : {
              "type" : "string",
              "description" : "The appointment date. Accuro shows only the date part for this field, therefore it is recommended to pass only date part  and not time part for this field like this: 2018-07-13 or pass the time part with zero values like this: 2018-07-13T00:00:00.000. For the time part there is a separate field with name appointmentDateTime. ",
              "example" : "2018-07-13"
            },
            "appointmentTime" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "The appointment time of format: HH:mm. Provide only when appointmentDateTime is provided. Default value or for invalidvalue passed, it would be set set to: 00:00. If appointmentDateTime is not provided, this value would be set to null by the system.  ",
              "example" : "13:00"
            },
            "faxLogId" : {
              "type" : "integer",
              "description" : "Fax Log Id. Mandatory field to create referral order from generate letters.",
              "format" : "int32",
              "example" : 7
            },
            "erefApptStatus" : {
              "type" : "string",
              "description" : "erefApptStatus. Read only field. Field would be ignored and not set if passed in POST request.",
              "example" : "scheduled"
            },
            "appointmentId" : {
              "type" : "integer",
              "description" : "Appointment Id. Read only field. Relevant to Requisition order",
              "format" : "int32",
              "example" : 8
            }
          }
        },
        "EnvelopeDtoReferralOrderDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/ReferralOrderDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "ScheduleRoomDto" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The id of the schedule room",
              "format" : "int32",
              "example" : 1
            },
            "name" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name of the schedule room",
              "example" : "Lab"
            },
            "order" : {
              "type" : "integer",
              "description" : "The order of the schedule room",
              "format" : "int32",
              "example" : 1
            },
            "abbreviation" : {
              "maxLength" : 3,
              "minLength" : 0,
              "type" : "string",
              "description" : "The abbreviation of the schedule room",
              "example" : "Big"
            },
            "officeId" : {
              "type" : "integer",
              "description" : "The office id of the schedule room",
              "format" : "int32",
              "example" : 123
            },
            "showAll" : {
              "type" : "boolean",
              "description" : "The flag if shows patients for all arrived dates",
              "example" : true
            },
            "kioskMessage" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "The kiosk message",
              "example" : "Test message"
            },
            "tmNote" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The note of the schedule room in the traffic manager",
              "example" : "Lab is on 2nd floor"
            },
            "tmPhysician" : {
              "type" : "integer",
              "description" : "The physician id of the schedule room. If it is null it will be saved as 0.",
              "format" : "int32"
            }
          }
        },
        "RoleDto" : {
          "type" : "object",
          "properties" : {
            "roleId" : {
              "type" : "integer",
              "description" : "Unique id of the role",
              "format" : "int32"
            },
            "name" : {
              "type" : "string",
              "description" : "Name of the role"
            },
            "builtIn" : {
              "type" : "boolean",
              "description" : "Is built in or custom role"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Is active or inactive role"
            }
          }
        },
        "SurgicalPriorityDto" : {
          "required" : [ "priorityName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique id of the surgical priority.",
              "format" : "int32",
              "example" : 1
            },
            "priorityName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the surgical priority.",
              "example" : "High"
            },
            "priorityValue" : {
              "type" : "integer",
              "description" : "The numerical value representing the priority.",
              "format" : "int32",
              "example" : 365
            },
            "displaySelectedUnit" : {
              "type" : "boolean",
              "description" : "Flag to indicate if the selected unit is displayed.",
              "example" : true
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indicates if the surgical priority is active.",
              "example" : true
            },
            "years" : {
              "type" : "integer",
              "description" : "Years component of the priority.",
              "format" : "int32",
              "example" : 2
            },
            "months" : {
              "type" : "integer",
              "description" : "Months component of the priority.",
              "format" : "int32",
              "example" : 12
            },
            "weeks" : {
              "type" : "integer",
              "description" : "Weeks component of the priority.",
              "format" : "int32",
              "example" : 52
            },
            "days" : {
              "type" : "integer",
              "description" : "Days component of the priority.",
              "format" : "int32",
              "example" : 7
            }
          },
          "description" : "Waitlist surgical priority data transfer object"
        },
        "SurgicalStatusDto" : {
          "required" : [ "statusName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique id of the surgical status.",
              "format" : "int32",
              "example" : 1
            },
            "statusName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the surgical status.",
              "example" : "Booked"
            },
            "color" : {
              "maxLength" : 7,
              "minLength" : 0,
              "type" : "string",
              "description" : "Color code of the surgical status.",
              "example" : "#FF5733"
            },
            "completed" : {
              "type" : "boolean",
              "description" : "Indicates if the surgical status is completed.",
              "example" : true
            }
          },
          "description" : "Waitlist surgical status data transfer object"
        },
        "SiteListDto" : {
          "required" : [ "siteCode", "siteName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique id of the consult site.",
              "format" : "int32",
              "example" : 1
            },
            "siteName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the consult site.",
              "example" : "Consult"
            },
            "siteCode" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Code of the consult site.",
              "example" : "C001"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indicates if the consult site is active.",
              "example" : true
            }
          },
          "description" : "Waitlist consult site data transfer object"
        },
        "SurgicalSiteDto" : {
          "required" : [ "siteCode", "siteName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique id of the surgical site.",
              "format" : "int32",
              "example" : 1
            },
            "siteName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the surgical site.",
              "example" : "Left Knee"
            },
            "siteCode" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Code of the surgical site.",
              "example" : "LK001"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indicates if the surgical site is active.",
              "example" : true
            }
          },
          "description" : "Waitlist surgical site data transfer object"
        },
        "WaitlistAttachmentDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The unique id of the waitlist attachment. This field is not required during POST request.",
              "format" : "int32",
              "example" : 1
            },
            "waitlistId" : {
              "type" : "integer",
              "description" : "The unique id of the waitlist(read-only).",
              "format" : "int32",
              "example" : 1
            },
            "itemId" : {
              "type" : "integer",
              "description" : "The unique id of the item",
              "format" : "int32",
              "example" : 1
            },
            "itemCategory" : {
              "type" : "string",
              "description" : "The category of the item. This field is ENUM and can contain only restricted values.",
              "example" : "Letter",
              "enum" : [ "ItemCategoryDto{categoryId=1, name='Appointment'}", "ItemCategoryDto{categoryId=2, name='Encounter'}", "ItemCategoryDto{categoryId=3, name='Form'}", "ItemCategoryDto{categoryId=4, name='Prescription'}", "ItemCategoryDto{categoryId=5, name='Lab'}", "ItemCategoryDto{categoryId=6, name='Letter'}", "ItemCategoryDto{categoryId=7, name='Document'}", "ItemCategoryDto{categoryId=8, name='Lab Group'}", "ItemCategoryDto{categoryId=9, name='CDM Worksheet'}", "ItemCategoryDto{categoryId=10, name='History'}", "ItemCategoryDto{categoryId=11, name='HistoryText'}", "ItemCategoryDto{categoryId=12, name='Task'}", "ItemCategoryDto{categoryId=13, name='Allergy'}", "ItemCategoryDto{categoryId=14, name='Diagnosis'}", "ItemCategoryDto{categoryId=15, name='HistoryURL'}", "ItemCategoryDto{categoryId=16, name='Lab Observation'}", "ItemCategoryDto{categoryId=17, name='Problem History'}", "ItemCategoryDto{categoryId=18, name='Generated Letter'}", "ItemCategoryDto{categoryId=19, name='Risk Factor'}", "ItemCategoryDto{categoryId=20, name='Immunization'}", "ItemCategoryDto{categoryId=21, name='Alert or Special Need'}", "ItemCategoryDto{categoryId=22, name='Custom Lab View'}", "ItemCategoryDto{categoryId=23, name='HistoryTracking'}", "ItemCategoryDto{categoryId=24, name='Note'}", "ItemCategoryDto{categoryId=25, name='Pregnancy'}", "ItemCategoryDto{categoryId=26, name='PatientSupportProgram'}", "ItemCategoryDto{categoryId=27, name='Messaging Conversation'}", "ItemCategoryDto{categoryId=28, name='Procedure Code'}", "ItemCategoryDto{categoryId=29, name='MedicationReconciliation'}" ]
            }
          },
          "description" : "Waitlist attachment data transfer object"
        },
        "ProcedureListDto" : {
          "required" : [ "active", "procedureCode", "procedureId", "procedureName" ],
          "type" : "object",
          "properties" : {
            "procedureId" : {
              "type" : "integer",
              "description" : "The unique ID of the procedure",
              "format" : "int32",
              "example" : 123
            },
            "procedureName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name of the procedure",
              "example" : "Heart Bypass"
            },
            "procedureCode" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "A code representing the procedure",
              "example" : "HBY"
            },
            "active" : {
              "type" : "boolean",
              "description" : "Indicates whether the procedure is active",
              "example" : true
            }
          },
          "description" : "Data Transfer Object for procedure list entries"
        },
        "WaitlistRequestProcedureDto" : {
          "required" : [ "areaName", "id", "note", "procedureName", "requestId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "The ID of waitlist request and procedure link",
              "format" : "int32",
              "example" : 123
            },
            "requestId" : {
              "type" : "integer",
              "description" : "The unique ID of the waitlist",
              "format" : "int32",
              "example" : 123
            },
            "procedureName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name of the procedure",
              "example" : "Heart Bypass"
            },
            "areaName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "The body area",
              "example" : "Both Legs"
            },
            "note" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Note",
              "example" : "Patient allergic to nuts"
            }
          },
          "description" : "Data Transfer Object for Waitlist requests and procedure links"
        },
        "TaskReasonDto" : {
          "required" : [ "taskReason" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "taskReason" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "The task reason",
              "example" : "daily task"
            },
            "officeId" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "description" : "Data Transfer Object for task reason"
        },
        "ConsultPriorityDto" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique identifier of the Priority list",
              "format" : "int32",
              "example" : 1
            },
            "priorityName" : {
              "type" : "string",
              "description" : "The name of the consult priority ",
              "example" : "urgent"
            },
            "priorityValue" : {
              "type" : "integer",
              "description" : "Maximum wait for the priority in days ",
              "format" : "int32",
              "example" : 365
            },
            "active" : {
              "type" : "boolean",
              "description" : "Is the priority active",
              "example" : true
            }
          },
          "description" : "Priority list data transfer object model"
        },
        "ConsultStatusDto" : {
          "required" : [ "statusName" ],
          "type" : "object",
          "properties" : {
            "statusId" : {
              "type" : "integer",
              "description" : "The unique id of waitlist consult status.",
              "format" : "int32",
              "example" : 3
            },
            "statusName" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Name of the waitlist consult status.",
              "example" : "Booked"
            },
            "completed" : {
              "type" : "boolean",
              "description" : "Shows the wailtlist consult status is completed or not.",
              "example" : true
            }
          },
          "description" : "Waitlist consultStatus data transfer object"
        },
        "WaitlistProviderDto" : {
          "required" : [ "firstName", "lastName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Waitlist provider id",
              "format" : "int32",
              "example" : 2
            },
            "practitionerNumber" : {
              "maxLength" : 12,
              "minLength" : 0,
              "type" : "string",
              "description" : "Practitioner number",
              "example" : "223456"
            },
            "payeeNumber" : {
              "maxLength" : 12,
              "minLength" : 0,
              "type" : "string",
              "description" : "Payee number",
              "example" : "12"
            },
            "firstName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "First name of the provider.",
              "example" : "John"
            },
            "lastName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "Last name of the provider.",
              "example" : "Doe"
            },
            "phoneNumber" : {
              "maxLength" : 20,
              "minLength" : 0,
              "type" : "string",
              "description" : "Phone number of the provider.",
              "example" : "(201) 987-6543"
            },
            "phoneExt" : {
              "maxLength" : 5,
              "minLength" : 0,
              "type" : "string",
              "description" : "Phone extension.",
              "example" : "213"
            },
            "providerId" : {
              "type" : "integer",
              "description" : "Provider id.",
              "format" : "int32",
              "example" : 2600
            },
            "active" : {
              "type" : "boolean",
              "description" : "Provider is active or not.",
              "example" : true
            }
          },
          "description" : "Waitlist providers data transfer object model."
        },
        "WaitlistRequestDto" : {
          "required" : [ "consultPriority", "consultStatus", "consultType", "patientId", "referralDate", "requestDate", "waitlistProviderId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique id for the waitlist request.",
              "format" : "int32"
            },
            "waitlistProviderId" : {
              "type" : "integer",
              "description" : "Waitlist provider id. Only providers registered to waitlist.",
              "format" : "int32",
              "example" : 2
            },
            "patientId" : {
              "type" : "integer",
              "description" : "Unique id of the patient.",
              "format" : "int32",
              "example" : 12
            },
            "consultPriority" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Valid values of consult priorities.",
              "example" : "Emergency"
            },
            "consultStatus" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Valid values of consult statuses.",
              "example" : "Booked"
            },
            "consultType" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Waitlist consult type",
              "example" : "EMG Consult"
            },
            "expedited" : {
              "type" : "boolean",
              "description" : "Request is expedited or not.",
              "example" : false
            },
            "providerTypeId" : {
              "type" : "integer",
              "description" : "Provider type id",
              "format" : "int32",
              "example" : 12
            },
            "referralTriaged" : {
              "type" : "boolean"
            },
            "notes" : {
              "type" : "string",
              "description" : "Any notes for the waitlist request."
            },
            "complaint" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Reason for referral"
            },
            "referringProviderId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "specificProviderRequested" : {
              "type" : "boolean",
              "description" : "Specific provider requested.",
              "example" : true
            },
            "firstAvailable" : {
              "type" : "boolean",
              "description" : "Book as first available",
              "example" : false
            },
            "referredOut" : {
              "type" : "boolean",
              "description" : "If the patient is referred out.",
              "example" : true
            },
            "consultRefusedReason" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Refused reason for consult"
            },
            "firstConsultDate" : {
              "type" : "string",
              "description" : "First consult date time",
              "example" : "2020-02-13T10:15:00.000"
            },
            "firstContactDate" : {
              "type" : "string",
              "description" : "First contact date time",
              "example" : "2020-02-12T13:50:00.000"
            },
            "patientAvailableForConsult" : {
              "type" : "string",
              "description" : "Patient available date time for consult",
              "example" : "2020-02-13T00:00:00.000"
            },
            "tentativeDate" : {
              "type" : "string",
              "description" : "Tentative date time",
              "example" : "2020-02-14T14:20:00.000"
            },
            "urgentDate" : {
              "type" : "string",
              "description" : "Urgent date time",
              "example" : "2020-02-15T13:30:00.000"
            },
            "referralDate" : {
              "type" : "string",
              "description" : "Referral date time",
              "example" : "2020-02-10T00:00:00.000"
            },
            "targetDate" : {
              "type" : "string",
              "description" : "Target date (Surgical)",
              "example" : "2020-02-10T00:00:00.000"
            },
            "requestDate" : {
              "type" : "string",
              "description" : "Booked date (Surgical)",
              "example" : "2020-02-10T00:00:00.000"
            },
            "altWaitlistProviderId" : {
              "type" : "integer",
              "description" : "Alternative waitlist provider id",
              "format" : "int32",
              "example" : 1
            },
            "caseState" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Case status",
              "example" : "Active"
            },
            "caseNumber" : {
              "type" : "integer",
              "description" : "Case number",
              "format" : "int32",
              "example" : 1
            },
            "caseCloseDate" : {
              "type" : "string",
              "description" : "Case closed date",
              "example" : "2020-02-10T00:00:00.000"
            },
            "followUp" : {
              "type" : "boolean",
              "description" : "Flag if request is follow-up or not",
              "example" : false
            },
            "bookedDate" : {
              "type" : "string",
              "description" : "Booked date for waitlist",
              "example" : "2020-02-10T00:00:00.000"
            },
            "decisionDate" : {
              "type" : "string",
              "description" : "Decision date (Surgical)",
              "example" : "2020-02-10T00:00:00.000"
            },
            "patientAvailableForSurgery" : {
              "type" : "string",
              "description" : "Patient available date time for surgery.",
              "example" : "2020-02-10T00:00:00.000"
            },
            "surgicalPriority" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Surgical priority. Cannot be updated through API",
              "example" : "Emergency"
            },
            "surgicalSiteId" : {
              "type" : "integer",
              "description" : "Surgical Site Id. Cannot be updated through API",
              "format" : "int32",
              "example" : 2
            },
            "surgicalStatus" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Surgical status. Cannot be updated through API",
              "example" : "Re-Book"
            },
            "surgicalType" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Surgical Type. Default value blank. Refer to this endpoints for valid values: GET /v1/provider-portal/selection-lists/waitlist-surgical-types.  Cannot be updated through API",
              "example" : "EMG Consult"
            },
            "surgicalRefusedReason" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "Surgical refused reason. Default value blank. Refer to this endpoint for valid values: GET /v1/provider-portal/selection-lists/waitlist-surgical-refused-reasons.  Cannot be updated through API",
              "example" : "Patient Deceased"
            },
            "availableForCancellation" : {
              "type" : "boolean",
              "description" : "Available for cancellation. Cannot be updated through API",
              "example" : false
            }
          },
          "description" : "Waitlist request object"
        },
        "ConsultSiteDto" : {
          "required" : [ "consultSiteName" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Id of this record (Read-only field).",
              "format" : "int32",
              "example" : 2
            },
            "waitlistRequestId" : {
              "type" : "integer",
              "description" : "Valid waitlistRequestId (Read-only field).",
              "format" : "int32",
              "example" : 2
            },
            "consultSiteName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Valid values of consult site names.",
              "example" : "Emergency"
            }
          },
          "description" : "Waitlist consult site object"
        },
        "EnvelopeDtoWaitlistRequestDto" : {
          "type" : "object",
          "properties" : {
            "contents" : {
              "type" : "array",
              "description" : "The paginated results of the query",
              "items" : {
                "$ref" : "#/components/schemas/WaitlistRequestDto"
              }
            },
            "count" : {
              "type" : "integer",
              "description" : "The count of records returned with this page",
              "format" : "int32",
              "example" : 100
            },
            "total" : {
              "type" : "integer",
              "description" : "The total number of records based on the parameters of the query. \n\nNote that this number can vary as a client moves through pages, as elements are added and removed externally.",
              "format" : "int32",
              "example" : 1340
            },
            "lastId" : {
              "type" : "integer",
              "description" : "The unique identifier of the last records in **EnvelopeDto#contents**.\n\nCan be used to determine the starting id of the next page.",
              "format" : "int64",
              "example" : 10034
            }
          },
          "description" : "Envelope data transfer object model used for pagination."
        },
        "WaitlistRequestPatientUnAvailabilityDto" : {
          "required" : [ "endDate", "requestId", "startDate", "unavailabilityReason" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "description" : "Unique id for the waitlist request patient unavailability.",
              "format" : "int32"
            },
            "requestId" : {
              "type" : "integer",
              "description" : "Waitlist request id.",
              "format" : "int32"
            },
            "startDate" : {
              "type" : "string",
              "description" : "Start date",
              "example" : "2020-02-10"
            },
            "endDate" : {
              "type" : "string",
              "description" : "End date",
              "example" : "2020-02-10"
            },
            "unavailabilityReason" : {
              "type" : "string",
              "description" : "Defines the Reason for Patient's unavailability.",
              "example" : "Medical",
              "enum" : [ "Medical", "Personal", "Work", "Other" ]
            }
          },
          "description" : "Waitlist request patient unavailability object"
        }
      }
    }
  }